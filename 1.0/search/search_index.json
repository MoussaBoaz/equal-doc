{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"eQual Framework \u00b6 eQual is a versatile, language-agnostic, and web-oriented framework, aiming to elegantly manage interactions between front-end Apps and Business Logic involved in modern Web Applications. Natively Secure eQual offers native HTTP Auth support (JWT, CORS) to secure every endpoint with User Management, Role-Based Access Controls, or custom Access management. Server-Side Scripting eQual allows to implement custom logic on any route endpoint, for quick creation of controllers and micro-services . Instant APIs Without Code eQual provides tools for automatic generation of fully-featured ReST APIs with live documentation, accessible for any kind of service. <?php // Tired of steep learning curves? echo \"This is a valid Contoller!\" Why eQual \u00b6 While being a solid framework that has everything you need to do almost anything, eQual has been designed to oppose as little constraints as possible to developers. Most frameworks require a long time to master and, while learning them, you might find yourself struggling to achieve simple things. But with eQual, taking advantage of the native features is entirely up to you. Actually, since you're reading this, you probably already know everything needed to start using it. So, use it your way. What I value the most in eQual is its high level of re-usability and its way of defining controllers by announcing what they do and what they expect, which relieves me from documenting boredom and memory blackouts. C\u00e9dric Fran\u00e7oys Sneak peek ? \u00b6 Controller \u00b6 /packages/demo/data/simple.php : <?php /** * (near) Zero learning-curve development * */ echo 'This is a valid HTTP controller' ; When needed, use existing components, or not. (using the ones you already know is encouraged!) /packages/demo/data/reuse.php : <?php /** * Code re-usability * */ echo run ( 'get' , 'demo_simple' ); HTTP request \u00b6 wget http://localhost/index.php?get=demo_simple Response: Header excerpt: Status Code: 200 OK Content-Length: 26 Content-Type: text/html; charset=UTF-8 Body: This is a valid controller! CLI \u00b6 $ ./equal.run --get = demo_simple This is a valid controller! Real life action \u00b6 $ ./equal.run --get = demo_image /packages/demo/data/image.php : <?php use equal\\http\\HttpRequest ; /** * HTTP native support * */ list ( $params , $providers ) = eQual :: announce ([ 'description' => 'Get picture data from imgur.com using imgur API.' , 'params' => [ 'id' => [ 'description' => 'Hash of the image to retrieve' , 'type' => 'string' , 'default' => 'a5NE1kW' ] ], 'response' => [ 'content-type' => 'application/json' , 'charset' => 'utf-8' ], 'providers' => [ 'context' ] ]); $request = new HttpRequest ( \"GET https://api.imgur.com/3/image/ { $params [ 'id' ] } \" ); $response = $request -> header ( 'Authorization' , \"Client-ID 34030ab1f5ef12d\" ) -> send (); $providers [ 'context' ] -> httpResponse () -> body ([ 'result' => $response -> body ()]) -> send (); In short \u00b6 eQual uses 3 kinds of controllers (Action handlers, Data providers, App providers), 5 methods (Create, Read, Update, Delete, Search) and has a robust set of native features : I/O as HTTP messages Cascading Configuration Dependency injection Services overload ORM & Collections support Model definition + inheritance support Data Adaptation Authentication Management Access Control Management Unit testing Logging Debugging console More \u00b6 This framework has been designed for those who : don't want to always re-invent the wheel (but might occasionally enjoy it); dislike learning entire frameworks at once; and loathe dealing with dozens of files to achieve simple things. In most situations you don't need everything a framework offers. For that reason, eQual does not require you to comply with a specific logic or structure, and allows you to use it the way you want. eQual learning curve is actually more like learning stairs : one can use it without having to start from scratch or even without knowing it. Key features \u00b6 client-server oriented : HTTP native support, intended for REST API development and back-end processing. code reusability : easy integration of existing controllers results (controllers can be used as functions). self-documented code : available tools invite to be descriptive about data structure: how it is structured, what is expected, what errors can occur. self-explanatory API : each route comes with a description (announcement) of its dependencies and expected parameters, which eases greatly the communication between front-end and back-end developers.","title":"Prologue"},{"location":"#equal-framework","text":"eQual is a versatile, language-agnostic, and web-oriented framework, aiming to elegantly manage interactions between front-end Apps and Business Logic involved in modern Web Applications. Natively Secure eQual offers native HTTP Auth support (JWT, CORS) to secure every endpoint with User Management, Role-Based Access Controls, or custom Access management. Server-Side Scripting eQual allows to implement custom logic on any route endpoint, for quick creation of controllers and micro-services . Instant APIs Without Code eQual provides tools for automatic generation of fully-featured ReST APIs with live documentation, accessible for any kind of service. <?php // Tired of steep learning curves? echo \"This is a valid Contoller!\"","title":"eQual Framework"},{"location":"#why-equal","text":"While being a solid framework that has everything you need to do almost anything, eQual has been designed to oppose as little constraints as possible to developers. Most frameworks require a long time to master and, while learning them, you might find yourself struggling to achieve simple things. But with eQual, taking advantage of the native features is entirely up to you. Actually, since you're reading this, you probably already know everything needed to start using it. So, use it your way. What I value the most in eQual is its high level of re-usability and its way of defining controllers by announcing what they do and what they expect, which relieves me from documenting boredom and memory blackouts. C\u00e9dric Fran\u00e7oys","title":"Why eQual"},{"location":"#sneak-peek","text":"","title":"Sneak peek ?"},{"location":"#controller","text":"/packages/demo/data/simple.php : <?php /** * (near) Zero learning-curve development * */ echo 'This is a valid HTTP controller' ; When needed, use existing components, or not. (using the ones you already know is encouraged!) /packages/demo/data/reuse.php : <?php /** * Code re-usability * */ echo run ( 'get' , 'demo_simple' );","title":"Controller"},{"location":"#http-request","text":"wget http://localhost/index.php?get=demo_simple Response: Header excerpt: Status Code: 200 OK Content-Length: 26 Content-Type: text/html; charset=UTF-8 Body: This is a valid controller!","title":"HTTP request"},{"location":"#cli","text":"$ ./equal.run --get = demo_simple This is a valid controller!","title":"CLI"},{"location":"#real-life-action","text":"$ ./equal.run --get = demo_image /packages/demo/data/image.php : <?php use equal\\http\\HttpRequest ; /** * HTTP native support * */ list ( $params , $providers ) = eQual :: announce ([ 'description' => 'Get picture data from imgur.com using imgur API.' , 'params' => [ 'id' => [ 'description' => 'Hash of the image to retrieve' , 'type' => 'string' , 'default' => 'a5NE1kW' ] ], 'response' => [ 'content-type' => 'application/json' , 'charset' => 'utf-8' ], 'providers' => [ 'context' ] ]); $request = new HttpRequest ( \"GET https://api.imgur.com/3/image/ { $params [ 'id' ] } \" ); $response = $request -> header ( 'Authorization' , \"Client-ID 34030ab1f5ef12d\" ) -> send (); $providers [ 'context' ] -> httpResponse () -> body ([ 'result' => $response -> body ()]) -> send ();","title":"Real life action"},{"location":"#in-short","text":"eQual uses 3 kinds of controllers (Action handlers, Data providers, App providers), 5 methods (Create, Read, Update, Delete, Search) and has a robust set of native features : I/O as HTTP messages Cascading Configuration Dependency injection Services overload ORM & Collections support Model definition + inheritance support Data Adaptation Authentication Management Access Control Management Unit testing Logging Debugging console","title":"In short"},{"location":"#more","text":"This framework has been designed for those who : don't want to always re-invent the wheel (but might occasionally enjoy it); dislike learning entire frameworks at once; and loathe dealing with dozens of files to achieve simple things. In most situations you don't need everything a framework offers. For that reason, eQual does not require you to comply with a specific logic or structure, and allows you to use it the way you want. eQual learning curve is actually more like learning stairs : one can use it without having to start from scratch or even without knowing it.","title":"More"},{"location":"#key-features","text":"client-server oriented : HTTP native support, intended for REST API development and back-end processing. code reusability : easy integration of existing controllers results (controllers can be used as functions). self-documented code : available tools invite to be descriptive about data structure: how it is structured, what is expected, what errors can occur. self-explanatory API : each route comes with a description (announcement) of its dependencies and expected parameters, which eases greatly the communication between front-end and back-end developers.","title":"Key features"},{"location":"advanced/cascade-configuration/","text":"Config \u00b6 The config constants are present globally inside the config/config.inc.php file. Some constants can be overridden in optional package specific config files. When an operation is invoked, the system checks if a config file is defined in the targeted package. If so, constants from that file override the ones from the general config file. Every overriden constant is limited to the package it belongs to. If they are used by a controller, they must be listed by it. If there is an error, the system displays Error 500 . The constants are checked by the announce() function inside eq.lib.php . The constants that can be overriden inside the config/config.inc.php file, @See Getting-started .","title":"Cascade Configuration"},{"location":"advanced/cascade-configuration/#config","text":"The config constants are present globally inside the config/config.inc.php file. Some constants can be overridden in optional package specific config files. When an operation is invoked, the system checks if a config file is defined in the targeted package. If so, constants from that file override the ones from the general config file. Every overriden constant is limited to the package it belongs to. If they are used by a controller, they must be listed by it. If there is an error, the system displays Error 500 . The constants are checked by the announce() function inside eq.lib.php . The constants that can be overriden inside the config/config.inc.php file, @See Getting-started .","title":"Config"},{"location":"advanced/ci-cd/","text":"CI/CD \u00b6 CI/CD (standing for Continuous Integration & Continuous Development) is an Agile concept closely related to Test Driven Development (TDD). The idea is to run set of tests whenever an update is made during development. By doing so we have a feedback loop as small as possible that allows to quickly identify potential issues. A real-world situation would be, for example, using a GIT versioning platform with a CI pipeline service that automatically runs our test units in any needed environment, whenever we make a new commit. We'll immediately see if something goes wrong, and easily locate where the problem comes from depending of the quality of our tests set. Docker \u00b6 Note: if you're looking for a guide that is not specific to eQual, please read getting started with docker In this section we'll focus on the main role of docker: setting up a replicable environment for your project. Below is a specific example to use eQual with Docker using an official php image. Setup \u00b6 Go ahead and install Docker On windows it comes with Docker Compose , which aims to automate the deployment process. In its simplest form, all you need to use Docker is a few command lines plus those 2 files in your project : Dockerfile docker-compose.yml Directory usually looks like this : project@root/ .docker/ Dockerfile another-config-file.example docker-compose.yml Dockerfile \u00b6 Dockerfile is used to build an image with additional requirements. The syntax : FROM tells which image you're gonna use as starting point (it can be an existing image from Docker Hub , or homemade) COPY tells what files of your project you want to bring inside the image, it can be specific config files aswell as the full project WORKDIR changes your default location inside the directory RUN tells what commands to run within the image; like additional requirements or rights management For more informations about dockerfile syntax, read Best practices for writing Dockerfiles Here is an example using eQual with a php-apache image : FROM php:7.3-apache # official image taken from docker hub COPY . /var/www/html # copy all the project into apache html folder (must be at project's root) RUN docker-php-ext-install pdo_mysql mysqli \\ # installing required mysql service && chown -R www-data:www-data /var/www \\ # granting permissions in apache folder && cp /etc/apache2/mods-available/rewrite.load /etc/apache2/mods-enabled/ # apache config WORKDIR /var/www/html # changing current location in directory COPY .docker/vhost.conf /etc/apache2/sites-available/000-default.conf # custom apache vhost COPY .docker/config.inc.php /config/config.inc.php # changing DB host to \"mysql\" COPY .docker/apache2.conf /etc/apache2/apache2.conf # apache config To build an image out of this file, use the following command : docker build --file .docker/Dockerfile -t todolist . docker-compose.yml \u00b6 docker-compose.yml is used to deploy container(s) from one or multiple image(s). For example, here is what we used to deploy an apache server along with its mysql service : version : '3' services : localhost : build : context : . dockerfile : .docker/Dockerfile image : todolist # using the image previously created with Dockerfile container_name : localhost restart : always ports : - 80:80 volumes : - /var/www/html environment : - QN_DB_NAME=equal - QN_DB_HOST=localhost - QN_DB_PORT=3306 - HTTPS_METHOD=noredirect - VIRTUAL_PORT=80 - VIRTUAL_HOST=localhost links : - mysql mysql : image : mysql:5.7 # using an official image for mySQL container_name : mysql restart : always ports : - 3306:3306 environment : MYSQL_DATABASE : equal MYSQL_ALLOW_EMPTY_PASSWORD : 'true' To launch the associated Docker command : docker-compose up -d With this, you have what you need to develop and test your application using docker. If you want to see the running containers : docker ps To access the bash CLI of a container : docker exec -ti CONTAINER_ID /bin/bash To run a bash script within a container (instead of opening it as CLI) : docker exec -ti CONTAINER_ID /bin/bash /full/directory/path/script.sh The following section will cover how that command can be used. Automating the process & database init \u00b6 Unfortunately if you want to setup a database once a container has been created, you still need to run a few commands manually. We'll work this around and use it as an opportunity to automate the whole process, from image creation to deployment. What we'll do is create a .cmd script (for windows) that we'll launch from the root of the project, using a few of the commands listed above plus the ones needed for the DB setup of a project called \"todolist\". docker build --file .docker/Dockerfile -t todolist . docker-compose up -d sleep 10 docker exec -ti localhost /bin/bash .docker/init.sh You've already seen the 2 first lines, they refer to Dockerfile and docker-compose.yml . Sleep 10 is important, granting time for the containers to establish a bridge before we connect the database. Last line launches the following bash script within the container \"localhost\". php run.php --do = init_db php run.php --do = init_package --package = core Note: if it returns a \"wrong host\" error, try to increase the sleep time to 20 or 30 sec. If it still doesn't work it means some config for apache is either missing or incorrect. Travis CI \u00b6 Travis CI is a testing environment offering many options and compatibilities. Configuration example (in YAML) for a .travis.yml file, running basic tests for checking eQual installation integrity: dist : xenial language : php php : - '7.2' services : - mysql env : global : - DB_NAME=\"equal\" before_script : # install apache2 - chmod +x .travis/*.sh - .travis/init-php.sh script : # check that mandatory directories are present and have correct access rights set - php run.php --do=test_fs-consistency # check ability to connect to the dbms service - php run.php --do=test_db-connectivity # create an empty database - php run.php --do=init_db # initialise database & demo data - php run.php --do=init_package --package=core # run test units - php run.php --do=test_package --package=core BitBucket Pipelines \u00b6 BitBucket has a built-in testing environment called Pipelines that relies on Docker . They have an amazing tutorial to get started , as well as a very handful YAML validator . Here is a minimal syntax example taken from their page about build artifacts : image : php:7.2-fpm pipelines : default : - step : script : - apt-get update && apt-get install -y default-mysql-client - docker-php-ext-install mysqli # check that mandatory directories are present and have correct access # rights set - php run.php --do=test_fs-consistency # check ability to connect to the dbms service - php run.php --do=test_db-connectivity # create an empty database - php run.php --do=init_db # initialise database with demo data - php run.php --do=init_package --package=core # run test units - php run.php --do=test_package --package=core --logs=true services : - mysql definitions : services : mysql : image : mysql:5.7 environment : MYSQL_DATABASE : 'qinoa' MYSQL_ROOT_PASSWORD : 'test' CircleCI \u00b6 Configuration example (in YAML) for a .config.yml file, running basic tests for checking eQual installation integrity: version : 2.1 # Define the jobs we want to run for this project jobs : build : docker : - image : php:7.3-apache - image : mysql:5.7 environment : MYSQL_ROOT_PASSWORD : test MYSQL_DATABASE : equal working_directory : ~/repo steps : # install dependencies - run : apt-get update && apt-get -y install git - run : docker-php-ext-install pdo pdo_mysql mysqli - run : docker-php-ext-enable mysqli - checkout : path : ~/repo # check that mandatory directories are present and have correct access # rights set - run : php run.php --do=test_fs-consistency # check ability to connect to the dbms service - run : php run.php --do=test_db-connectivity # create an empty database - run : php run.php --do=init_db # initialise database with demo data - run : php run.php --do=init_package --package=core --import=true # run test units - run : php run.php --do=test_package --package=core # Orchestrate our job run sequence workflows : build_and_test : jobs : - build","title":"CI/CD"},{"location":"advanced/ci-cd/#cicd","text":"CI/CD (standing for Continuous Integration & Continuous Development) is an Agile concept closely related to Test Driven Development (TDD). The idea is to run set of tests whenever an update is made during development. By doing so we have a feedback loop as small as possible that allows to quickly identify potential issues. A real-world situation would be, for example, using a GIT versioning platform with a CI pipeline service that automatically runs our test units in any needed environment, whenever we make a new commit. We'll immediately see if something goes wrong, and easily locate where the problem comes from depending of the quality of our tests set.","title":"CI/CD"},{"location":"advanced/ci-cd/#docker","text":"Note: if you're looking for a guide that is not specific to eQual, please read getting started with docker In this section we'll focus on the main role of docker: setting up a replicable environment for your project. Below is a specific example to use eQual with Docker using an official php image.","title":"Docker"},{"location":"advanced/ci-cd/#setup","text":"Go ahead and install Docker On windows it comes with Docker Compose , which aims to automate the deployment process. In its simplest form, all you need to use Docker is a few command lines plus those 2 files in your project : Dockerfile docker-compose.yml Directory usually looks like this : project@root/ .docker/ Dockerfile another-config-file.example docker-compose.yml","title":"Setup"},{"location":"advanced/ci-cd/#dockerfile","text":"Dockerfile is used to build an image with additional requirements. The syntax : FROM tells which image you're gonna use as starting point (it can be an existing image from Docker Hub , or homemade) COPY tells what files of your project you want to bring inside the image, it can be specific config files aswell as the full project WORKDIR changes your default location inside the directory RUN tells what commands to run within the image; like additional requirements or rights management For more informations about dockerfile syntax, read Best practices for writing Dockerfiles Here is an example using eQual with a php-apache image : FROM php:7.3-apache # official image taken from docker hub COPY . /var/www/html # copy all the project into apache html folder (must be at project's root) RUN docker-php-ext-install pdo_mysql mysqli \\ # installing required mysql service && chown -R www-data:www-data /var/www \\ # granting permissions in apache folder && cp /etc/apache2/mods-available/rewrite.load /etc/apache2/mods-enabled/ # apache config WORKDIR /var/www/html # changing current location in directory COPY .docker/vhost.conf /etc/apache2/sites-available/000-default.conf # custom apache vhost COPY .docker/config.inc.php /config/config.inc.php # changing DB host to \"mysql\" COPY .docker/apache2.conf /etc/apache2/apache2.conf # apache config To build an image out of this file, use the following command : docker build --file .docker/Dockerfile -t todolist .","title":"Dockerfile"},{"location":"advanced/ci-cd/#docker-composeyml","text":"docker-compose.yml is used to deploy container(s) from one or multiple image(s). For example, here is what we used to deploy an apache server along with its mysql service : version : '3' services : localhost : build : context : . dockerfile : .docker/Dockerfile image : todolist # using the image previously created with Dockerfile container_name : localhost restart : always ports : - 80:80 volumes : - /var/www/html environment : - QN_DB_NAME=equal - QN_DB_HOST=localhost - QN_DB_PORT=3306 - HTTPS_METHOD=noredirect - VIRTUAL_PORT=80 - VIRTUAL_HOST=localhost links : - mysql mysql : image : mysql:5.7 # using an official image for mySQL container_name : mysql restart : always ports : - 3306:3306 environment : MYSQL_DATABASE : equal MYSQL_ALLOW_EMPTY_PASSWORD : 'true' To launch the associated Docker command : docker-compose up -d With this, you have what you need to develop and test your application using docker. If you want to see the running containers : docker ps To access the bash CLI of a container : docker exec -ti CONTAINER_ID /bin/bash To run a bash script within a container (instead of opening it as CLI) : docker exec -ti CONTAINER_ID /bin/bash /full/directory/path/script.sh The following section will cover how that command can be used.","title":"docker-compose.yml"},{"location":"advanced/ci-cd/#automating-the-process-database-init","text":"Unfortunately if you want to setup a database once a container has been created, you still need to run a few commands manually. We'll work this around and use it as an opportunity to automate the whole process, from image creation to deployment. What we'll do is create a .cmd script (for windows) that we'll launch from the root of the project, using a few of the commands listed above plus the ones needed for the DB setup of a project called \"todolist\". docker build --file .docker/Dockerfile -t todolist . docker-compose up -d sleep 10 docker exec -ti localhost /bin/bash .docker/init.sh You've already seen the 2 first lines, they refer to Dockerfile and docker-compose.yml . Sleep 10 is important, granting time for the containers to establish a bridge before we connect the database. Last line launches the following bash script within the container \"localhost\". php run.php --do = init_db php run.php --do = init_package --package = core Note: if it returns a \"wrong host\" error, try to increase the sleep time to 20 or 30 sec. If it still doesn't work it means some config for apache is either missing or incorrect.","title":"Automating the process &amp; database init"},{"location":"advanced/ci-cd/#travis-ci","text":"Travis CI is a testing environment offering many options and compatibilities. Configuration example (in YAML) for a .travis.yml file, running basic tests for checking eQual installation integrity: dist : xenial language : php php : - '7.2' services : - mysql env : global : - DB_NAME=\"equal\" before_script : # install apache2 - chmod +x .travis/*.sh - .travis/init-php.sh script : # check that mandatory directories are present and have correct access rights set - php run.php --do=test_fs-consistency # check ability to connect to the dbms service - php run.php --do=test_db-connectivity # create an empty database - php run.php --do=init_db # initialise database & demo data - php run.php --do=init_package --package=core # run test units - php run.php --do=test_package --package=core","title":"Travis CI"},{"location":"advanced/ci-cd/#bitbucket-pipelines","text":"BitBucket has a built-in testing environment called Pipelines that relies on Docker . They have an amazing tutorial to get started , as well as a very handful YAML validator . Here is a minimal syntax example taken from their page about build artifacts : image : php:7.2-fpm pipelines : default : - step : script : - apt-get update && apt-get install -y default-mysql-client - docker-php-ext-install mysqli # check that mandatory directories are present and have correct access # rights set - php run.php --do=test_fs-consistency # check ability to connect to the dbms service - php run.php --do=test_db-connectivity # create an empty database - php run.php --do=init_db # initialise database with demo data - php run.php --do=init_package --package=core # run test units - php run.php --do=test_package --package=core --logs=true services : - mysql definitions : services : mysql : image : mysql:5.7 environment : MYSQL_DATABASE : 'qinoa' MYSQL_ROOT_PASSWORD : 'test'","title":"BitBucket Pipelines"},{"location":"advanced/ci-cd/#circleci","text":"Configuration example (in YAML) for a .config.yml file, running basic tests for checking eQual installation integrity: version : 2.1 # Define the jobs we want to run for this project jobs : build : docker : - image : php:7.3-apache - image : mysql:5.7 environment : MYSQL_ROOT_PASSWORD : test MYSQL_DATABASE : equal working_directory : ~/repo steps : # install dependencies - run : apt-get update && apt-get -y install git - run : docker-php-ext-install pdo pdo_mysql mysqli - run : docker-php-ext-enable mysqli - checkout : path : ~/repo # check that mandatory directories are present and have correct access # rights set - run : php run.php --do=test_fs-consistency # check ability to connect to the dbms service - run : php run.php --do=test_db-connectivity # create an empty database - run : php run.php --do=init_db # initialise database with demo data - run : php run.php --do=init_package --package=core --import=true # run test units - run : php run.php --do=test_package --package=core # Orchestrate our job run sequence workflows : build_and_test : jobs : - build","title":"CircleCI"},{"location":"advanced/external-libraries/","text":"Using external libraries with eQual \u00b6 eQual supports the PSR-4 standard for autoloading. Composer can be used to add dependencies inside the /vendor folder located in the root folder of eQual installation. Libraries that follow the PSR-4 standard can be loaded with a simple use statement. For libraries that do not provide such support, simply use 'require' or 'include' as stated in the documentation of the library. Examples \u00b6 Here below are a few examples showing how to embed various popular libraries. Twig - template engine \u00b6 composer require \"twig/twig:^2.0\" <?php use Twig\\Environment; use Twig\\Loader\\FilesystemLoader; PHPOffice - MS Office compatible documents generation library \u00b6 composer require phpoffice/phpspreadsheet <?php use PhpOffice\\PhpSpreadsheet\\Spreadsheet ; use PhpOffice\\PhpSpreadsheet\\IOFactory ; DOMPDF - HTML to PDF converter \u00b6 composer require dompdf/dompdf <?php use Dompdf\\Dompdf ; use Dompdf\\Options ; For libraries that do not support autoloading, it is still a good practice to store them in the /vendor folder, and then including them manually by using include or require : <?php require_once '../vendor/swiftmailer/swiftmailer/lib/swift_required.php' ; However, once included, you can still take advantage of the use statement in order to make the syntax smoother and not to bother with namespaces. <?php require_once '../vendor/swiftmailer/swiftmailer/lib/swift_required.php' ; use \\Swift_SmtpTransport as Swift_SmtpTransport ; use \\Swift_Message as Swift_Message ; use \\Swift_Mailer as Swift_Mailer ;","title":"External libraries"},{"location":"advanced/external-libraries/#using-external-libraries-with-equal","text":"eQual supports the PSR-4 standard for autoloading. Composer can be used to add dependencies inside the /vendor folder located in the root folder of eQual installation. Libraries that follow the PSR-4 standard can be loaded with a simple use statement. For libraries that do not provide such support, simply use 'require' or 'include' as stated in the documentation of the library.","title":"Using external libraries with eQual"},{"location":"advanced/external-libraries/#examples","text":"Here below are a few examples showing how to embed various popular libraries.","title":"Examples"},{"location":"advanced/external-libraries/#twig-template-engine","text":"composer require \"twig/twig:^2.0\" <?php use Twig\\Environment; use Twig\\Loader\\FilesystemLoader;","title":"Twig - template engine"},{"location":"advanced/external-libraries/#phpoffice-ms-office-compatible-documents-generation-library","text":"composer require phpoffice/phpspreadsheet <?php use PhpOffice\\PhpSpreadsheet\\Spreadsheet ; use PhpOffice\\PhpSpreadsheet\\IOFactory ;","title":"PHPOffice - MS Office compatible documents generation library"},{"location":"advanced/external-libraries/#dompdf-html-to-pdf-converter","text":"composer require dompdf/dompdf <?php use Dompdf\\Dompdf ; use Dompdf\\Options ; For libraries that do not support autoloading, it is still a good practice to store them in the /vendor folder, and then including them manually by using include or require : <?php require_once '../vendor/swiftmailer/swiftmailer/lib/swift_required.php' ; However, once included, you can still take advantage of the use statement in order to make the syntax smoother and not to bother with namespaces. <?php require_once '../vendor/swiftmailer/swiftmailer/lib/swift_required.php' ; use \\Swift_SmtpTransport as Swift_SmtpTransport ; use \\Swift_Message as Swift_Message ; use \\Swift_Mailer as Swift_Mailer ;","title":"DOMPDF - HTML to PDF converter"},{"location":"advanced/logging/","text":"Logging \u00b6 Logging \u00b6 The Logger ( equal/log/Logger.class.php ) class adds logs to the database using 4 different parameters : PARAMETER DESCRIPTION user_id Identifier of the user responsible for the action. action Action of the user. value Complementary value of the action ( example : previous value of the object). object_class Name of the entity on which the action is done. object_id Identifier of the entity on which the action is done. Those logs are system object, no permissions must be applied. The logs allow users to keep an overview of object changes (action log). The actions are CRUDS by default, but custom actions could also be created, example : SENT, when a message is sent. As of now, the logs don't keep track of the content of the changes or reason behind it. The logs can be enabled or disabled in the global config file : define('LOGGING_ENABLED', true); Versioning \u00b6 An other way to keep track of the object changes is the use of the version ( core/version.class.php ) class. In which you could have an evolving tracking of an object, going through changes over times, with the value changes ( serialized_value ). The versioning can be enabled or disabled in the global config file : define('VERSIONING_ENABLED', true); Reporting \u00b6 The Reporter lib/equal/error/Reporter.class.php class will keep track of debug (can be used in any script, to check variables values); warning (the action is done, but incomplete); error (the action can't be done); and fatal errors (the system stops) messages. The logs are kept inside the log (CSV files) folder (and appear in http://equal.local/console), they are written in a human readable way, to keep track easily. The logs are brief, and could, in the future, be written in JSON, to add info's. The logs content is written following the core/Log.class.php structure. They are just like any other object and may use any of their functions. For example, an other class could point at the log object (\"log_id\"), every time that object is subject to debug, warnings, errors and fatal errors. In the future, a timestamps journal could be enabled in the global config.inc.php , to keep track of the length of use of any eQual ressources.","title":"Logging"},{"location":"advanced/logging/#logging","text":"","title":"Logging"},{"location":"advanced/logging/#logging_1","text":"The Logger ( equal/log/Logger.class.php ) class adds logs to the database using 4 different parameters : PARAMETER DESCRIPTION user_id Identifier of the user responsible for the action. action Action of the user. value Complementary value of the action ( example : previous value of the object). object_class Name of the entity on which the action is done. object_id Identifier of the entity on which the action is done. Those logs are system object, no permissions must be applied. The logs allow users to keep an overview of object changes (action log). The actions are CRUDS by default, but custom actions could also be created, example : SENT, when a message is sent. As of now, the logs don't keep track of the content of the changes or reason behind it. The logs can be enabled or disabled in the global config file : define('LOGGING_ENABLED', true);","title":"Logging"},{"location":"advanced/logging/#versioning","text":"An other way to keep track of the object changes is the use of the version ( core/version.class.php ) class. In which you could have an evolving tracking of an object, going through changes over times, with the value changes ( serialized_value ). The versioning can be enabled or disabled in the global config file : define('VERSIONING_ENABLED', true);","title":"Versioning"},{"location":"advanced/logging/#reporting","text":"The Reporter lib/equal/error/Reporter.class.php class will keep track of debug (can be used in any script, to check variables values); warning (the action is done, but incomplete); error (the action can't be done); and fatal errors (the system stops) messages. The logs are kept inside the log (CSV files) folder (and appear in http://equal.local/console), they are written in a human readable way, to keep track easily. The logs are brief, and could, in the future, be written in JSON, to add info's. The logs content is written following the core/Log.class.php structure. They are just like any other object and may use any of their functions. For example, an other class could point at the log object (\"log_id\"), every time that object is subject to debug, warnings, errors and fatal errors. In the future, a timestamps journal could be enabled in the global config.inc.php , to keep track of the length of use of any eQual ressources.","title":"Reporting"},{"location":"advanced/remote-apis/","text":"Remote-apis \u00b6 Example of remote-api : <?php $body = [ 'access_token' => MAPBOX_KEY ]; // Send query to Mapbox geocoding API $request = new HttpRequest ( '/geocoding/v5/mapbox.places/' . urlencode ( $params [ 'address' ]) . '.json' , [ 'Host' => 'api.mapbox.com:443' ]); $response = $request -> setBody ( $body ) -> send (); /* expected response match a JSON array of geo+json Features (https://tools.ietf.org/html/rfc7946) */ $response -> getBody (); An other example : <?php use equal\\http\\HttpRequest ; /** * HTTP native support * */ list ( $params , $providers ) = eQual :: announce ([ 'description' => 'Get picture data from imgur.com using imgur API.' , 'params' => [ 'id' => [ 'description' => 'Hash of the image to retrieve' , 'type' => 'string' , 'default' => 'a5NE1kW' ] ], 'response' => [ 'content-type' => 'application/json' , 'charset' => 'utf-8' ], 'providers' => [ 'context' ] ]); $request = new HttpRequest ( \"GET https://api.imgur.com/3/image/ { $params [ 'id' ] } \" ); $response = $request -> header ( 'Authorization' , \"Client-ID 34030ab1f5ef12d\" ) -> send (); $providers [ 'context' ] -> httpResponse () -> body ([ 'result' => $response -> body ()]) -> send (); Use cases of remote-API'S in eQual : eQual is used to relay indirectly (use of a remote-API) informations to the User. Example : $request = new HttpRequest('/geocoding/v5/mapbox.places/'.urlencode ($params['address']).'.json', ['Host' => 'api.mapbox.com:443']); In this example, eQual sends 'address information' and expects to get 'gps informations' from an API. eQual is used as proxy Some API's expect identifiers, and to keep those secret, the API-call can be done in eQual. eQual is used as an adapter Example : if an API-response is in XML, an eQual controller could transform(ex: to JSON)/read the file to the expected value, needed for the frontend. Authentication to external social networks \u00b6 The oauth controller attempts to authenticate a user from an external social network. The controller expects two parameters : 'params' => [ 'network_name' => [ 'description' => 'name of the social network to address oauth request.', 'type' => 'string', 'required' => true ], 'network_token' => [ 'description' => 'valid acess token for oauth.', 'type' => 'string', 'required' => true ] ], And gives an access token as a response, that will be used to encrypt the messages sent to the server. Those tokens have a limited life expectancy and must be renewed.","title":"Remote APIs"},{"location":"advanced/remote-apis/#remote-apis","text":"Example of remote-api : <?php $body = [ 'access_token' => MAPBOX_KEY ]; // Send query to Mapbox geocoding API $request = new HttpRequest ( '/geocoding/v5/mapbox.places/' . urlencode ( $params [ 'address' ]) . '.json' , [ 'Host' => 'api.mapbox.com:443' ]); $response = $request -> setBody ( $body ) -> send (); /* expected response match a JSON array of geo+json Features (https://tools.ietf.org/html/rfc7946) */ $response -> getBody (); An other example : <?php use equal\\http\\HttpRequest ; /** * HTTP native support * */ list ( $params , $providers ) = eQual :: announce ([ 'description' => 'Get picture data from imgur.com using imgur API.' , 'params' => [ 'id' => [ 'description' => 'Hash of the image to retrieve' , 'type' => 'string' , 'default' => 'a5NE1kW' ] ], 'response' => [ 'content-type' => 'application/json' , 'charset' => 'utf-8' ], 'providers' => [ 'context' ] ]); $request = new HttpRequest ( \"GET https://api.imgur.com/3/image/ { $params [ 'id' ] } \" ); $response = $request -> header ( 'Authorization' , \"Client-ID 34030ab1f5ef12d\" ) -> send (); $providers [ 'context' ] -> httpResponse () -> body ([ 'result' => $response -> body ()]) -> send (); Use cases of remote-API'S in eQual : eQual is used to relay indirectly (use of a remote-API) informations to the User. Example : $request = new HttpRequest('/geocoding/v5/mapbox.places/'.urlencode ($params['address']).'.json', ['Host' => 'api.mapbox.com:443']); In this example, eQual sends 'address information' and expects to get 'gps informations' from an API. eQual is used as proxy Some API's expect identifiers, and to keep those secret, the API-call can be done in eQual. eQual is used as an adapter Example : if an API-response is in XML, an eQual controller could transform(ex: to JSON)/read the file to the expected value, needed for the frontend.","title":"Remote-apis"},{"location":"advanced/remote-apis/#authentication-to-external-social-networks","text":"The oauth controller attempts to authenticate a user from an external social network. The controller expects two parameters : 'params' => [ 'network_name' => [ 'description' => 'name of the social network to address oauth request.', 'type' => 'string', 'required' => true ], 'network_token' => [ 'description' => 'valid acess token for oauth.', 'type' => 'string', 'required' => true ] ], And gives an access token as a response, that will be used to encrypt the messages sent to the server. Those tokens have a limited life expectancy and must be renewed.","title":"Authentication to external social networks"},{"location":"advanced/security/","text":"Rights management \u00b6 The 'Permission' ( packages/core/classes/Permission.class.php ) class is dedicated to the rights management: for each object class (including the 'Permission' class itself), rights can be assigned to each existing group. Users \u00b6 The structure is defined inside the core\\User class ( packages/core/classes/User.class.php ). Each User object holds a list of groups to which it belongs. Note All users belong to the group \"users\", which is the default group (see DEFAULT_GROUP_ID in /eq.lib.php ). <?php public static function getColumns () { return [ 'firstname' => [ 'type' => 'string' ], 'lastname' => [ 'type' => 'string' ], 'login' => [ 'type' => 'string' , 'label' => 'Username' ], 'password' => [ 'type' => 'string' , 'label' => 'Password' ], 'language' => [ 'type' => 'string' ], 'groups_ids' => [ 'type' => 'many2many' , 'foreign_object' => 'core\\Group' , 'foreign_field' => 'users_ids' , 'rel_table' => 'core_rel_group_user' , 'rel_foreign_key' => 'group_id' , 'rel_local_key' => 'user_id' ] ]; } Groups \u00b6 The structure is defined inside the core\\Group class ( packages/core/classes/Group.class.php ). There, you will find informations about the users inside the group, and also the rights attached to these groups. <?php public static function getColumns () { return [ 'name' => [ 'type' => 'string' ], 'users_ids' => [ 'type' => 'many2many' , 'foreign_object' => 'core\\User' , 'foreign_field' => 'groups_ids' , 'rel_table' => 'core_rel_group_user' , 'rel_foreign_key' => 'user_id' , 'rel_local_key' => 'group_id' ], 'permissions_ids' => [ 'type' => 'one2many' , 'foreign_object' => 'core\\Permission' , 'foreign_field' => 'group_id' ] ]; } ACL \u00b6 The structure is defined inside the core\\Permission ( packages/core/classes/Permission.class.php ). In resume of the previous sections, Users are inside groups, and those groups have different rights (property group_id ). They are similar to the classical roles (admin,...) to which you can assign users. <?php public static function getColumns () { return [ 'class_name' => [ 'type' => 'string' ], 'group_id' => [ 'type' => 'many2one' , 'foreign_object' => 'core\\Group' , 'foreign_field' => 'permissions_ids' ], 'rights' => [ 'type' => 'integer' ] ]; } The field 'rights' of the Permission class is a binary mask (logical OR) of the rights given to the related group. If a user belongs to several groups, the permission set will result in the most permissive combination of the rights from all its groups. Rights values that can be assigned are defined in the file /eq.lib.php : <?php define ( 'R_CREATE' , 1 ); define ( 'R_READ' , 2 ); define ( 'R_WRITE' , 4 ); define ( 'R_DELETE' , 8 ); define ( 'R_MANAGE' , 16 ); // autorisation to manage the rights Default rights All users receive the default permissions, defined in the configuration file ( /config.json ) through setting DEFAULT_RIGHTS . AccessController.php \u00b6 This file is the built-in \"control tower\" of eQual, and is located in /lib/equal/access/ . What it does is granting the permission (or not) to perform CRUD actions depending on a few set criteria. This service is called by default and you usually don't have to think about it. Examples : \u00b6 The controller tells us that the root_user has all rights. On the other hand, the filter method checks if a specific user has the rights to execute a specific operation. Own objects : For example, if the user created the object himself, then he will have the rights to read it. Remember : The permission object has the rights property, where you decide which rights are available for which users/groups The User also has the rights to read and write(update) his own object. If you use collection methods from the collection class, you often need rights to perform them. for example : The search method checks if you have the rights to perform the read operation, with a sub-condition : if you have the right to perform the create operation, you as a consequence, also have the right to perform the read operation. Custom security rules \u00b6 If you need custom security rules, you can also overwrite AccessController (at your own risks). This is particularly useful to establish future-proof settings, as well as an alternative to core_permission (see Cheat Sheet > Grant DB rights ). In the following section we'll see how to proceed: Overriding AccessController \u00b6 The default AccesController service is defined in /lib/equal/access/AccessController.class.php , and can be overridden by a custom service to match any specific logic. In /lib , create a folder by the name of your project, you want a directory similar to this: /lib/myapp/access/AccessController.class.php Then, in the config.inc.php file of your package (located at /packages/myapp/config.inc.php ), add this line : <?php namespace config ; register ( 'access' , 'myapp\\access\\AccessController' ); Finally, open your newly created AccessController.class.php and copy paste this : <?php namespace myapp\\access ; // change 'myapp' with actual name use equal\\organic\\Service ; use equal\\services\\Container ; class AccessController extends \\equal\\access\\AccessController { // rewrite functions here to override their default behavior // non-exhaustive example with filter: filter ( $operation , $object_class = '*' , $object_fields = [], $object_ids = []){ $user_id = $this -> container -> get ( 'auth' ) -> userId (); // grant READ rights over 'User' class when an user is // authenticated (0 = guest_user) if ( $object_class == 'myapp\\User' ) { if ( $operation == QN_R_READ ) { if ( $user_id > 0 ) { return $object_ids ; } } } } } Authentication \u00b6 Access token \u00b6 eQual uses JWT tokens that are exchanged between the back-end and the client (browser ) as HttpOnly cookie. using CLI There is no authentication using CLI: user is identified as root with full priviledges. During authentication (via the signin controller) a token is generated, according to the AUTH_ACCESS_TOKEN_VALIDITY parameter, and stored by the browser. The duration defined in AUTH_ACCESS_TOKEN_VALIDITY corresponds to the maximum duration of inactivity of a user session. When the token's validity limit has been exceeded, the token is deleted by the browser and the user must identify himself again. Extension of validity Each time a valid session token is used, it authenticates the user for a minimum of 1 hour. The validity of the token is extended if necessary.","title":"Security"},{"location":"advanced/security/#rights-management","text":"The 'Permission' ( packages/core/classes/Permission.class.php ) class is dedicated to the rights management: for each object class (including the 'Permission' class itself), rights can be assigned to each existing group.","title":"Rights management"},{"location":"advanced/security/#users","text":"The structure is defined inside the core\\User class ( packages/core/classes/User.class.php ). Each User object holds a list of groups to which it belongs. Note All users belong to the group \"users\", which is the default group (see DEFAULT_GROUP_ID in /eq.lib.php ). <?php public static function getColumns () { return [ 'firstname' => [ 'type' => 'string' ], 'lastname' => [ 'type' => 'string' ], 'login' => [ 'type' => 'string' , 'label' => 'Username' ], 'password' => [ 'type' => 'string' , 'label' => 'Password' ], 'language' => [ 'type' => 'string' ], 'groups_ids' => [ 'type' => 'many2many' , 'foreign_object' => 'core\\Group' , 'foreign_field' => 'users_ids' , 'rel_table' => 'core_rel_group_user' , 'rel_foreign_key' => 'group_id' , 'rel_local_key' => 'user_id' ] ]; }","title":"Users"},{"location":"advanced/security/#groups","text":"The structure is defined inside the core\\Group class ( packages/core/classes/Group.class.php ). There, you will find informations about the users inside the group, and also the rights attached to these groups. <?php public static function getColumns () { return [ 'name' => [ 'type' => 'string' ], 'users_ids' => [ 'type' => 'many2many' , 'foreign_object' => 'core\\User' , 'foreign_field' => 'groups_ids' , 'rel_table' => 'core_rel_group_user' , 'rel_foreign_key' => 'user_id' , 'rel_local_key' => 'group_id' ], 'permissions_ids' => [ 'type' => 'one2many' , 'foreign_object' => 'core\\Permission' , 'foreign_field' => 'group_id' ] ]; }","title":"Groups"},{"location":"advanced/security/#acl","text":"The structure is defined inside the core\\Permission ( packages/core/classes/Permission.class.php ). In resume of the previous sections, Users are inside groups, and those groups have different rights (property group_id ). They are similar to the classical roles (admin,...) to which you can assign users. <?php public static function getColumns () { return [ 'class_name' => [ 'type' => 'string' ], 'group_id' => [ 'type' => 'many2one' , 'foreign_object' => 'core\\Group' , 'foreign_field' => 'permissions_ids' ], 'rights' => [ 'type' => 'integer' ] ]; } The field 'rights' of the Permission class is a binary mask (logical OR) of the rights given to the related group. If a user belongs to several groups, the permission set will result in the most permissive combination of the rights from all its groups. Rights values that can be assigned are defined in the file /eq.lib.php : <?php define ( 'R_CREATE' , 1 ); define ( 'R_READ' , 2 ); define ( 'R_WRITE' , 4 ); define ( 'R_DELETE' , 8 ); define ( 'R_MANAGE' , 16 ); // autorisation to manage the rights Default rights All users receive the default permissions, defined in the configuration file ( /config.json ) through setting DEFAULT_RIGHTS .","title":"ACL"},{"location":"advanced/security/#accesscontrollerphp","text":"This file is the built-in \"control tower\" of eQual, and is located in /lib/equal/access/ . What it does is granting the permission (or not) to perform CRUD actions depending on a few set criteria. This service is called by default and you usually don't have to think about it.","title":"AccessController.php"},{"location":"advanced/security/#examples","text":"The controller tells us that the root_user has all rights. On the other hand, the filter method checks if a specific user has the rights to execute a specific operation. Own objects : For example, if the user created the object himself, then he will have the rights to read it. Remember : The permission object has the rights property, where you decide which rights are available for which users/groups The User also has the rights to read and write(update) his own object. If you use collection methods from the collection class, you often need rights to perform them. for example : The search method checks if you have the rights to perform the read operation, with a sub-condition : if you have the right to perform the create operation, you as a consequence, also have the right to perform the read operation.","title":"Examples :"},{"location":"advanced/security/#custom-security-rules","text":"If you need custom security rules, you can also overwrite AccessController (at your own risks). This is particularly useful to establish future-proof settings, as well as an alternative to core_permission (see Cheat Sheet > Grant DB rights ). In the following section we'll see how to proceed:","title":"Custom security rules"},{"location":"advanced/security/#overriding-accesscontroller","text":"The default AccesController service is defined in /lib/equal/access/AccessController.class.php , and can be overridden by a custom service to match any specific logic. In /lib , create a folder by the name of your project, you want a directory similar to this: /lib/myapp/access/AccessController.class.php Then, in the config.inc.php file of your package (located at /packages/myapp/config.inc.php ), add this line : <?php namespace config ; register ( 'access' , 'myapp\\access\\AccessController' ); Finally, open your newly created AccessController.class.php and copy paste this : <?php namespace myapp\\access ; // change 'myapp' with actual name use equal\\organic\\Service ; use equal\\services\\Container ; class AccessController extends \\equal\\access\\AccessController { // rewrite functions here to override their default behavior // non-exhaustive example with filter: filter ( $operation , $object_class = '*' , $object_fields = [], $object_ids = []){ $user_id = $this -> container -> get ( 'auth' ) -> userId (); // grant READ rights over 'User' class when an user is // authenticated (0 = guest_user) if ( $object_class == 'myapp\\User' ) { if ( $operation == QN_R_READ ) { if ( $user_id > 0 ) { return $object_ids ; } } } } }","title":"Overriding AccessController"},{"location":"advanced/security/#authentication","text":"","title":"Authentication"},{"location":"advanced/security/#access-token","text":"eQual uses JWT tokens that are exchanged between the back-end and the client (browser ) as HttpOnly cookie. using CLI There is no authentication using CLI: user is identified as root with full priviledges. During authentication (via the signin controller) a token is generated, according to the AUTH_ACCESS_TOKEN_VALIDITY parameter, and stored by the browser. The duration defined in AUTH_ACCESS_TOKEN_VALIDITY corresponds to the maximum duration of inactivity of a user session. When the token's validity limit has been exceeded, the token is deleted by the browser and the user must identify himself again. Extension of validity Each time a valid session token is used, it authenticates the user for a minimum of 1 hour. The validity of the token is extended if necessary.","title":"Access token"},{"location":"architecture-concepts/collections/","text":"Collections \u00b6 Collections are widely used throughout the framework: they ease manipulations of entities (objects) and allow to execute a same operation on several objects in a single call. In eQual, a collection is a series of partial objects (the ORM loads only requested fields) on which one or more CRUD operations can be applied. When a collection is given as an array, it consists of a associative array mapping objects ids with their related (partial) value (which is also an array). Example: <?php [ 5 => [ 'id' => 5 , 'name' => 'Huey' ], 6 => [ 'id' => 6 , 'name' => 'Dewey' ], 7 => [ 'id' => 7 , 'name' => 'Louie' ] ] Manipulating collections \u00b6 eQual uses both ObjectManager service and Collection objects for manipulating entities. Methods from the ObjectManager can be considered as \"system\" calls while Collections offer an additional layer to make easier dealing with user permissions, objects consistency and data adaptation. Methods defined in Model classes (i.e. classes that inherit from equal\\orm\\Model ) are always invoked by the ObjectManager service, and their signature holds a reference to the service itself. On the other hand, in order to provide Collections eQual also uses PHP's __callstatic magic method on Model classes with special (reserved) methods dedicated to instanciating new Collections : ids() create() search() To illustrate this, here below are 2 pieces of code that provide an equivalent result. <?php use equal\\orm\\ObjectManager ; $orm = ObjectManager :: getInstance (); $users = $orm -> read ( 'core\\User' , [ 5 , 6 , 7 ], [ 'id' , 'name' ]); <?php use core\\User ; $users = User :: ids ([ 5 , 6 , 7 ]) -> read ([ 'id' , 'name' ]) -> get (); However, the first snippet results in calling directly the read() method of the ObjectManager, which will be directly translated into a SQL query to fetch the requested fields. While the second snippet also checks the current user (i.e. the user from who's the request is originating, if known) and make sure that s\u00b7he has enough rights to perform the operation. Also, in case of error, in the first example, $users will hold an error code, while in the second example, an Exception will be thrown and an HTTP response with an error status will be returned. Using Collections allows method chaining which makes code in controllers shorter and easier to read. Methods all have a similar return signature INSTANCE RETURN VALUE ERROR/EXCEPTION ObjectManager dependency injection Array In case of error, an error is returned (and a message is sent to the Reporter). ObjectManager methods don't raise Exceptions. Collections magic method Collection Methods raises exceptions: the process is interrupted and the exception is converted to an HTTP error. Both mecanism offer the following methods : create() read() update() delete() search()","title":"Collections"},{"location":"architecture-concepts/collections/#collections","text":"Collections are widely used throughout the framework: they ease manipulations of entities (objects) and allow to execute a same operation on several objects in a single call. In eQual, a collection is a series of partial objects (the ORM loads only requested fields) on which one or more CRUD operations can be applied. When a collection is given as an array, it consists of a associative array mapping objects ids with their related (partial) value (which is also an array). Example: <?php [ 5 => [ 'id' => 5 , 'name' => 'Huey' ], 6 => [ 'id' => 6 , 'name' => 'Dewey' ], 7 => [ 'id' => 7 , 'name' => 'Louie' ] ]","title":"Collections"},{"location":"architecture-concepts/collections/#manipulating-collections","text":"eQual uses both ObjectManager service and Collection objects for manipulating entities. Methods from the ObjectManager can be considered as \"system\" calls while Collections offer an additional layer to make easier dealing with user permissions, objects consistency and data adaptation. Methods defined in Model classes (i.e. classes that inherit from equal\\orm\\Model ) are always invoked by the ObjectManager service, and their signature holds a reference to the service itself. On the other hand, in order to provide Collections eQual also uses PHP's __callstatic magic method on Model classes with special (reserved) methods dedicated to instanciating new Collections : ids() create() search() To illustrate this, here below are 2 pieces of code that provide an equivalent result. <?php use equal\\orm\\ObjectManager ; $orm = ObjectManager :: getInstance (); $users = $orm -> read ( 'core\\User' , [ 5 , 6 , 7 ], [ 'id' , 'name' ]); <?php use core\\User ; $users = User :: ids ([ 5 , 6 , 7 ]) -> read ([ 'id' , 'name' ]) -> get (); However, the first snippet results in calling directly the read() method of the ObjectManager, which will be directly translated into a SQL query to fetch the requested fields. While the second snippet also checks the current user (i.e. the user from who's the request is originating, if known) and make sure that s\u00b7he has enough rights to perform the operation. Also, in case of error, in the first example, $users will hold an error code, while in the second example, an Exception will be thrown and an HTTP response with an error status will be returned. Using Collections allows method chaining which makes code in controllers shorter and easier to read. Methods all have a similar return signature INSTANCE RETURN VALUE ERROR/EXCEPTION ObjectManager dependency injection Array In case of error, an error is returned (and a message is sent to the Reporter). ObjectManager methods don't raise Exceptions. Collections magic method Collection Methods raises exceptions: the process is interrupted and the exception is converted to an HTTP error. Both mecanism offer the following methods : create() read() update() delete() search()","title":"Manipulating collections"},{"location":"architecture-concepts/dependency-injection/","text":"Dependency injection \u00b6 Scripts that act as controllers have a scope of their own. On the other hand, services are instantiated using a Container that is defined in the global scope. eQual offers a series of services that can be used to ease the writing of controllers (for instance, the 'context' service can provide the HTTP request the current thread is responding to). About controllers Under the hood, controllers are always included by the the eQual::run() method. That means that they have an access to global vars, but all the variables declared within a controller remains separate from the global scope. This can be done by using the eQual::announce method, which allows dependency injection. Dependency injection consists of receiving two kind of data : 1) the parameters received from the HTTP requests (or CLI equivalent call). 2) the instances to the services that the controller needs in order to perform its required tasks. <?php list ( $params , $providers ) = announce ([ 'description' => \"\" , 'response' => [ 'content-type' => 'application/json' , 'charset' => 'utf-8' , 'accept-origin' => '*' ], 'params' => [ [ ... ] ], 'providers' => [ 'context' , 'orm' ] // list of services to inject ]); /** * @var \\equal\\php\\Context $context * @var \\equal\\orm\\ObjectManager $orm */ list ( $context , $orm ) = $providers [ 'context' , 'orm' ]; About arguments order The order in which the services are declared has no impact on the way they are fetched. The returned providers structure is a maps that can be accessed by using the service names as keys. List of eQual predefined services \u00b6 'report' => 'equal\\error\\Reporter', 'auth' => 'equal\\auth\\AuthenticationManager', 'access' => 'equal\\access\\AccessController', 'context' => 'equal\\php\\Context', 'validate' => 'equal\\data\\DataValidator', 'adapt' => 'equal\\data\\DataAdapter', 'orm' => 'equal\\orm\\ObjectManager', 'route' => 'equal\\route\\Router', 'log' => 'equal\\log\\Logger', 'cron' => 'equal\\cron\\Scheduler', 'dispatch' => 'equal\\dispatch\\Dispatcher' Injection of custom services \u00b6 In some case, it is useful to design a custom service with a logic of its own. In other situation, the Access Control Management might be different than the one implemented by eQual. In such cases, it is possible to inject dependencies by specifying their class (in addition to their names). By doing so, we can perform 2 operation at a time : 1) inject a custom service ; 2) replace the default service with the custom one (by using an existing predefined name to override the service). For instance, here is how the Access controller and Authentication manager can be overridden: <?php list ( $params , $providers ) = announce ([ 'response' => [ 'content-type' => 'application/json' , 'charset' => 'utf-8' , 'accept-origin' => '*' ], 'params' => [ ... ], 'providers' => [ 'auth' => custom\\AuthenticationManager , 'access' => custom\\AccessController ] ]); /** * @var custom\\AuthenticationManager $auth * @var custom\\AccessController $access */ list ( $auth , $access ) = [ $providers ]; 'auth' => custom\\AuthenticationManager , 'access' => custom\\AccessController ] By doing so, all calls made within the Collection class will use the custom\\AccesController to check the permissions of the current user for CRUD requests.","title":"Dependency injection"},{"location":"architecture-concepts/dependency-injection/#dependency-injection","text":"Scripts that act as controllers have a scope of their own. On the other hand, services are instantiated using a Container that is defined in the global scope. eQual offers a series of services that can be used to ease the writing of controllers (for instance, the 'context' service can provide the HTTP request the current thread is responding to). About controllers Under the hood, controllers are always included by the the eQual::run() method. That means that they have an access to global vars, but all the variables declared within a controller remains separate from the global scope. This can be done by using the eQual::announce method, which allows dependency injection. Dependency injection consists of receiving two kind of data : 1) the parameters received from the HTTP requests (or CLI equivalent call). 2) the instances to the services that the controller needs in order to perform its required tasks. <?php list ( $params , $providers ) = announce ([ 'description' => \"\" , 'response' => [ 'content-type' => 'application/json' , 'charset' => 'utf-8' , 'accept-origin' => '*' ], 'params' => [ [ ... ] ], 'providers' => [ 'context' , 'orm' ] // list of services to inject ]); /** * @var \\equal\\php\\Context $context * @var \\equal\\orm\\ObjectManager $orm */ list ( $context , $orm ) = $providers [ 'context' , 'orm' ]; About arguments order The order in which the services are declared has no impact on the way they are fetched. The returned providers structure is a maps that can be accessed by using the service names as keys.","title":"Dependency injection"},{"location":"architecture-concepts/dependency-injection/#list-of-equal-predefined-services","text":"'report' => 'equal\\error\\Reporter', 'auth' => 'equal\\auth\\AuthenticationManager', 'access' => 'equal\\access\\AccessController', 'context' => 'equal\\php\\Context', 'validate' => 'equal\\data\\DataValidator', 'adapt' => 'equal\\data\\DataAdapter', 'orm' => 'equal\\orm\\ObjectManager', 'route' => 'equal\\route\\Router', 'log' => 'equal\\log\\Logger', 'cron' => 'equal\\cron\\Scheduler', 'dispatch' => 'equal\\dispatch\\Dispatcher'","title":"List of eQual predefined services"},{"location":"architecture-concepts/dependency-injection/#injection-of-custom-services","text":"In some case, it is useful to design a custom service with a logic of its own. In other situation, the Access Control Management might be different than the one implemented by eQual. In such cases, it is possible to inject dependencies by specifying their class (in addition to their names). By doing so, we can perform 2 operation at a time : 1) inject a custom service ; 2) replace the default service with the custom one (by using an existing predefined name to override the service). For instance, here is how the Access controller and Authentication manager can be overridden: <?php list ( $params , $providers ) = announce ([ 'response' => [ 'content-type' => 'application/json' , 'charset' => 'utf-8' , 'accept-origin' => '*' ], 'params' => [ ... ], 'providers' => [ 'auth' => custom\\AuthenticationManager , 'access' => custom\\AccessController ] ]); /** * @var custom\\AuthenticationManager $auth * @var custom\\AccessController $access */ list ( $auth , $access ) = [ $providers ]; 'auth' => custom\\AuthenticationManager , 'access' => custom\\AccessController ] By doing so, all calls made within the Collection class will use the custom\\AccesController to check the permissions of the current user for CRUD requests.","title":"Injection of custom services"},{"location":"architecture-concepts/domains/","text":"Domains \u00b6 A Domain is a structure that describes of a series of conditions, and is used for creating filtered lists of objects. Domains are widely used in eQual and are involved in most controllers and views. Concept definition \u00b6 The purpose of a domain is to define a logical filter targeting all objects that comply to a series of criteria. To represent such a filter, we take advantage of the fact that, whatever the logical configuration, it is always possible to convert it to a list of operands on which the OR operator is applied (disjunction). Here below are some Math equivalences to illustrate this ( \u2228 = OR, \u2227 = AND): (A \u2227 B) \u2228 (C \u2227 D) = A \u2228 B \u2228 C \u2228 D (A \u2228 B) \u2227 (C \u2228 D) = (A \u2227 C) \u2228 (A \u2227 D) \u2228 (B \u2227 C) \u2228 (B \u2227 D) In turn, each operand can be either a direct value or a conjunction of operands (logical AND). In other words, a domain is a structure that represents a list of \"disjunctions (OR) of conjunctions (AND)\". Based on that fact, it is possible to build a domain in an incremental way. To help with domain manipulations, eQual offers a Domain class ( lib\\equal\\orm\\Domain.class.php ) that both holds helper methods and allows to instantiate OOP modelization of domains. Structure \u00b6 A domain is a list of one or more clauses, each clause consisting of one or more conditions. The minimal domain being a single clause with a single condition. Condition \u00b6 A condition is represented as an array holding 3 elements: [ operand, operator, value ] PART ROLE operand Indicates the field on which the condition must be applied and matches one of the properties returned by Model::getColumns() . operator Provides the operator of the condition. Accepted operators are : = , < , > , <= , >= , <> , like , ilike (case-insensitive), in , contains . value Provides the value against which the operator must be applied on the operand. About value type The operator influences the type of the value (e.g.: 'in' implies that the value is an array). Clause \u00b6 A clause is a series or conditions on which the AND operator is applied. [ [ operand1, operator1, value1 ], [ operand1, operator1, value2 ] ] For instance, the below notation can be interpreted as \" field1 must be equal to 1 AND field2 must be equal to 2 \": [ [ \"field1\", \"=\" , 1 ], [ \"field2\", \"=\", 2 ] ] Notation \u00b6 The complete domain syntax is : [ [ [operand, operator, value], {...} ], {...} ] Shortcut notations eQual accepts shortcut notations : [operand, operator, value] and [[operand, operator, value]] (two pairs of square brackets) will both be interpreted as a domain with a single clause and a single condition. Here is a commented recap of the syntax : <?php $domain = [ // domain [ // clause [ '{operand}' , '{operator}' , '{value}' // condition ], [ '{operand}' , '{operator}' , '{value}' // another contition (AND) ] ], [ // another clause (OR) [ '{operand}' , '{operator}' , '{value}' // condition ], [ '{operand}' , '{operator}' , '{value}' // another contition (AND) ] ] ]; One advantage of using the array notation is that the syntax is very similar in PHP controllers and in JSON views. <?php $domain = [ [ \"login\" , \"like\" , \"%@equal.run\" ], [ \"validated\" , \"=\" , true ] ]; // note : in PHP, single quote and double quote are equivalent { domain: [ [ \"login\" , \"like\" , \"%@equal.run\" ] , [ \"validated\" , \"=\" , true] ] } Domains can be used in URL (must be URL encoded). Example: http://equal.local/?get=model_search&entity=core\\User&domain=[[id,in,[1,2,3]] References \u00b6 A few references can be used in the domain to improve the search. REFERENCE DESCRIPTION EXAMPLE object. The current object. [\"object_id\", \"=\", \"object.id\"] user. The current user. [\"creator\", \"=\", \"user.id\"] date The current date. [\"date_from\", \"=\", \"date.this.year.first\"]","title":"Domains"},{"location":"architecture-concepts/domains/#domains","text":"A Domain is a structure that describes of a series of conditions, and is used for creating filtered lists of objects. Domains are widely used in eQual and are involved in most controllers and views.","title":"Domains"},{"location":"architecture-concepts/domains/#concept-definition","text":"The purpose of a domain is to define a logical filter targeting all objects that comply to a series of criteria. To represent such a filter, we take advantage of the fact that, whatever the logical configuration, it is always possible to convert it to a list of operands on which the OR operator is applied (disjunction). Here below are some Math equivalences to illustrate this ( \u2228 = OR, \u2227 = AND): (A \u2227 B) \u2228 (C \u2227 D) = A \u2228 B \u2228 C \u2228 D (A \u2228 B) \u2227 (C \u2228 D) = (A \u2227 C) \u2228 (A \u2227 D) \u2228 (B \u2227 C) \u2228 (B \u2227 D) In turn, each operand can be either a direct value or a conjunction of operands (logical AND). In other words, a domain is a structure that represents a list of \"disjunctions (OR) of conjunctions (AND)\". Based on that fact, it is possible to build a domain in an incremental way. To help with domain manipulations, eQual offers a Domain class ( lib\\equal\\orm\\Domain.class.php ) that both holds helper methods and allows to instantiate OOP modelization of domains.","title":"Concept definition"},{"location":"architecture-concepts/domains/#structure","text":"A domain is a list of one or more clauses, each clause consisting of one or more conditions. The minimal domain being a single clause with a single condition.","title":"Structure"},{"location":"architecture-concepts/domains/#condition","text":"A condition is represented as an array holding 3 elements: [ operand, operator, value ] PART ROLE operand Indicates the field on which the condition must be applied and matches one of the properties returned by Model::getColumns() . operator Provides the operator of the condition. Accepted operators are : = , < , > , <= , >= , <> , like , ilike (case-insensitive), in , contains . value Provides the value against which the operator must be applied on the operand. About value type The operator influences the type of the value (e.g.: 'in' implies that the value is an array).","title":"Condition"},{"location":"architecture-concepts/domains/#clause","text":"A clause is a series or conditions on which the AND operator is applied. [ [ operand1, operator1, value1 ], [ operand1, operator1, value2 ] ] For instance, the below notation can be interpreted as \" field1 must be equal to 1 AND field2 must be equal to 2 \": [ [ \"field1\", \"=\" , 1 ], [ \"field2\", \"=\", 2 ] ]","title":"Clause"},{"location":"architecture-concepts/domains/#notation","text":"The complete domain syntax is : [ [ [operand, operator, value], {...} ], {...} ] Shortcut notations eQual accepts shortcut notations : [operand, operator, value] and [[operand, operator, value]] (two pairs of square brackets) will both be interpreted as a domain with a single clause and a single condition. Here is a commented recap of the syntax : <?php $domain = [ // domain [ // clause [ '{operand}' , '{operator}' , '{value}' // condition ], [ '{operand}' , '{operator}' , '{value}' // another contition (AND) ] ], [ // another clause (OR) [ '{operand}' , '{operator}' , '{value}' // condition ], [ '{operand}' , '{operator}' , '{value}' // another contition (AND) ] ] ]; One advantage of using the array notation is that the syntax is very similar in PHP controllers and in JSON views. <?php $domain = [ [ \"login\" , \"like\" , \"%@equal.run\" ], [ \"validated\" , \"=\" , true ] ]; // note : in PHP, single quote and double quote are equivalent { domain: [ [ \"login\" , \"like\" , \"%@equal.run\" ] , [ \"validated\" , \"=\" , true] ] } Domains can be used in URL (must be URL encoded). Example: http://equal.local/?get=model_search&entity=core\\User&domain=[[id,in,[1,2,3]]","title":"Notation"},{"location":"architecture-concepts/domains/#references","text":"A few references can be used in the domain to improve the search. REFERENCE DESCRIPTION EXAMPLE object. The current object. [\"object_id\", \"=\", \"object.id\"] user. The current user. [\"creator\", \"=\", \"user.id\"] date The current date. [\"date_from\", \"=\", \"date.this.year.first\"]","title":"References"},{"location":"architecture-concepts/http-native/","text":"HTTP native \u00b6 eQual complies with HTTP standards by natively analyzing HTTP messages to route client requests to the appropriate controller and outputting data as an HTTP response. A controller can announce which content-type it uses for the output. And in all situations, the output is sent to the STDOUT stream. For that reason, eQual can can seamlessly be used in both CLI or ReSTful API context. The following schema uses number lists, representing the order in which the elements happen. Controllers \u00b6 Any invocation made to an eQual-driven server is handled as an HTTP request (even within a CLI context) and relayed to the appropriate controller which, in turn, produces an HTTP response. Controllers are nothing more than regular PHP scripts. Here is an example of a minimalist controller: <?php echo \"Hello World\" ; When invoked, this controller produces the following HTTP response : HTTP/1.1 200 OK Server: Apache/2.2.14 Content-Type: text/html Connection: Closed Content-Length: 11 Hello World Invoking controllers \u00b6 Controllers are considered as operations that run specific sets of instructions based on parameters provided in the HTTP request. For convenience, controllers can also be invoked in a CLI context, or directly within a PHP script. Example : PATH demo\\simple.php HTTP Request ?get=demo_simple CLI $ ./equal.run --get=demo_simple PHP Script eQual::run('get', 'demo_simple'); A controller invocation consists of two parts: The first part tells what kind of operation must be performed: key must be one of the following : GET some data ( /?get=... ) DO something ( /?do=... ) SHOW some formatted content ( /?show=... ) value specifies the name of the package to be invoked (must be the name of a subfolder of the packages directory), as well as the script to be called(a package may have several scripts - stored in the subfolders action , data , or apps ) The second part is either the body or a series of parameters Here is an example of a controller invocation : http://equal.local/?get=model_collect&entity=core\\Group In this example, the main entry point ( index.php ) will try to execute the following script : packages/core/data/model/collect.php . If no controller matches the received request, a response with a 404 status is returned. Example: http://equal.local/?do=foo { \"errors\" : { \"UNKNOWN_OBJECT\" : \"Unknown ACTION_HANDLER (do) public:foo\" } } Default controller \u00b6 The main config file ( config/config.inc.php ) allows to define a default package, and a default App can be defined for every package. <?php define ( 'DEFAULT_PACKAGE' , 'core' ); In turn, each package can define a default App in its own config file (i.e. packages/equal/config.inc.php ) <?php namespace config ; define ( 'DEFAULT_APP' , 'workbench' ); This allows to make the root entry point redirect to a webapp (in this example: http://equal.local/index.php?show=core_workbench' ).","title":"HTTP native"},{"location":"architecture-concepts/http-native/#http-native","text":"eQual complies with HTTP standards by natively analyzing HTTP messages to route client requests to the appropriate controller and outputting data as an HTTP response. A controller can announce which content-type it uses for the output. And in all situations, the output is sent to the STDOUT stream. For that reason, eQual can can seamlessly be used in both CLI or ReSTful API context. The following schema uses number lists, representing the order in which the elements happen.","title":"HTTP native"},{"location":"architecture-concepts/http-native/#controllers","text":"Any invocation made to an eQual-driven server is handled as an HTTP request (even within a CLI context) and relayed to the appropriate controller which, in turn, produces an HTTP response. Controllers are nothing more than regular PHP scripts. Here is an example of a minimalist controller: <?php echo \"Hello World\" ; When invoked, this controller produces the following HTTP response : HTTP/1.1 200 OK Server: Apache/2.2.14 Content-Type: text/html Connection: Closed Content-Length: 11 Hello World","title":"Controllers"},{"location":"architecture-concepts/http-native/#invoking-controllers","text":"Controllers are considered as operations that run specific sets of instructions based on parameters provided in the HTTP request. For convenience, controllers can also be invoked in a CLI context, or directly within a PHP script. Example : PATH demo\\simple.php HTTP Request ?get=demo_simple CLI $ ./equal.run --get=demo_simple PHP Script eQual::run('get', 'demo_simple'); A controller invocation consists of two parts: The first part tells what kind of operation must be performed: key must be one of the following : GET some data ( /?get=... ) DO something ( /?do=... ) SHOW some formatted content ( /?show=... ) value specifies the name of the package to be invoked (must be the name of a subfolder of the packages directory), as well as the script to be called(a package may have several scripts - stored in the subfolders action , data , or apps ) The second part is either the body or a series of parameters Here is an example of a controller invocation : http://equal.local/?get=model_collect&entity=core\\Group In this example, the main entry point ( index.php ) will try to execute the following script : packages/core/data/model/collect.php . If no controller matches the received request, a response with a 404 status is returned. Example: http://equal.local/?do=foo { \"errors\" : { \"UNKNOWN_OBJECT\" : \"Unknown ACTION_HANDLER (do) public:foo\" } }","title":"Invoking controllers"},{"location":"architecture-concepts/http-native/#default-controller","text":"The main config file ( config/config.inc.php ) allows to define a default package, and a default App can be defined for every package. <?php define ( 'DEFAULT_PACKAGE' , 'core' ); In turn, each package can define a default App in its own config file (i.e. packages/equal/config.inc.php ) <?php namespace config ; define ( 'DEFAULT_APP' , 'workbench' ); This allows to make the root entry point redirect to a webapp (in this example: http://equal.local/index.php?show=core_workbench' ).","title":"Default controller"},{"location":"architecture-concepts/operations/","text":"Operations \u00b6 Operations are determined processes to obtain a result, using operators to do so. In eQual, there exists two types of operators: 1) unary operators \u00b6 <?php /** * Unary Operators a single operand (either a single value, or a field reference [array of values]) * @var array */ private static $unary_operators = [ 'ABS' , 'AVG' , 'COUNT' , 'DIFF' , 'MAX' , 'MIN' , 'SUM' ]; 2) binary operators \u00b6 <?php /** * Operators that take two operands (each operand can be an Operation, a single value, or a field reference [array of values]) * @var array */ private static $binary_operators = [ '+' , // addition '-' , // subtraction '*' , // multiplication '/' , // division '%' , // modulo '^' // exponentiation ]; Example In the charts views, if we want to display the SUM (unary operator) of a specific field : \"layout\" : { \"entity\" : \"lodging\\\\sale\\\\booking\\\\BookingLine\" , \"group_by\" : \"range\" , \"range_interval\" : \"month\" , \"range_from\" : \"date.this.year.first\" , \"range_to\" : \"date.this.year.last\" , \"datasets\" : [ { \"label\" : \"Repas CA TVAC\" , \"operation\" : [ \"SUM\" , \"object.total\" ], \"domain\" : [ \"is_meal\" , \"=\" , 1 ] }, { \"label\" : \"Repas CA HTVA\" , \"operation\" : [ \"SUM\" , \"object.price\" ], \"domain\" : [ \"is_meal\" , \"=\" , 1 ] } ] } In this example, we would have the SUM of the total field of all the BookingLine objects . NB: It also needs to match the domain : [\"is_meal\", \"=\", 1] .","title":"Operations"},{"location":"architecture-concepts/operations/#operations","text":"Operations are determined processes to obtain a result, using operators to do so. In eQual, there exists two types of operators:","title":"Operations"},{"location":"architecture-concepts/operations/#1-unary-operators","text":"<?php /** * Unary Operators a single operand (either a single value, or a field reference [array of values]) * @var array */ private static $unary_operators = [ 'ABS' , 'AVG' , 'COUNT' , 'DIFF' , 'MAX' , 'MIN' , 'SUM' ];","title":"1) unary operators"},{"location":"architecture-concepts/operations/#2-binary-operators","text":"<?php /** * Operators that take two operands (each operand can be an Operation, a single value, or a field reference [array of values]) * @var array */ private static $binary_operators = [ '+' , // addition '-' , // subtraction '*' , // multiplication '/' , // division '%' , // modulo '^' // exponentiation ]; Example In the charts views, if we want to display the SUM (unary operator) of a specific field : \"layout\" : { \"entity\" : \"lodging\\\\sale\\\\booking\\\\BookingLine\" , \"group_by\" : \"range\" , \"range_interval\" : \"month\" , \"range_from\" : \"date.this.year.first\" , \"range_to\" : \"date.this.year.last\" , \"datasets\" : [ { \"label\" : \"Repas CA TVAC\" , \"operation\" : [ \"SUM\" , \"object.total\" ], \"domain\" : [ \"is_meal\" , \"=\" , 1 ] }, { \"label\" : \"Repas CA HTVA\" , \"operation\" : [ \"SUM\" , \"object.price\" ], \"domain\" : [ \"is_meal\" , \"=\" , 1 ] } ] } In this example, we would have the SUM of the total field of all the BookingLine objects . NB: It also needs to match the domain : [\"is_meal\", \"=\", 1] .","title":"2) binary operators"},{"location":"architecture-concepts/orm/","text":"ORM \u00b6 eQual comes with an object-relational mapper (ORM) that greatly eases the interactions with the database by handling the data conversions, classes inheritance and objects relations. The ObjectManager service is dedicated to Object-Relational Mapping. It handles all tasks that relate to objects search and manipulations and offers an abstract layer for DBMS queries. The ORM can be used in order to : - create , update or delete one or more objects (based on the ID field) - retrieve a single entity or a list of entities (both based on the ID field) - retrieve a list of IDs of entities that match some criteria ObjectManager methods are for low-level manipulations (no data conversion nor validation, and no user permission check at this level). These are mostly used in methods of classes definition. Controllers mostly require high-level manipulations (including data conversion, validation and permission checks) and therefore use Collections returned by class autoloader. Object Definition \u00b6 Each object definition inherits from the Model Class that defines methods common to all objects. The 3 methods that should be present in all object classes are presented below (for a full list of the Model class available methods, see @): getName() getDescription() getColumns() Model fields are defined using the getColumns () method, which returns an associative array that maps the fields names with their definitions. <?php public static function getColumns () { return []; } ObjectManager methods \u00b6 Objects manipulations are made on selections of objects, described as an array of identifiers. All methods can either return an array (in case of success), or an integer (in case of error, the integer is an error code). read \u00b6 Fetches specified field values for the selected objects. Description \u00b6 <?php mixed read ( string $class [, int [] $ids = null , string [] $fields = null , string $lang = DEFAULT_LANG ] ) Parameters \u00b6 PARAMETER DESCRIPTION class Class of the objects we want to retrieve. ids List of identifiers of the objects we want to retrieve. fields Array holding the names of the fields we want to retrieve . lang Language under which return fields values (only relevant for multilang fields). Returned value \u00b6 Returns an associative array containing, for every object id, a sub array mapping each field to its value. Returns an integer (error code) if an error occurred. update \u00b6 Sets new values for one or more object instances. multilang fields While saving in a specific language, no test is done to check that specified fields are defined as multilang (it means that saving non-multilang fields in a non-default language will result in a loss of data). Description \u00b6 <?php mixed update ( string $object_class , int [] $ids [, array [] $values = null , string $lang = DEFAULT_LANG , boolean $create = false ] ) Parameters \u00b6 PARAMETER DESCRIPTION object_class Class of the objects we want to update. ids Ids of the objects to update. fields Array mapping fields names with their new values . lang Language to wich apply the changes (affects only multilang fields). session_id Identifier of the session holding user data (by default, the current session). Returned value \u00b6 Returns an array containing ids of newly created objects (if any). Returns an integer (error code) if an error occurred. delete \u00b6 Deletes an object permanently or puts it in the \"trash bin\" (i.e. setting the 'deleted' flag to 1). description \u00b6 <?php mixed remove ( string $class , array $ids [, boolean $permanent = false ] ) Parameters \u00b6 class : class of the objects to delete ids : ids of the objects to delete permanent : flag for marking deletion as soft-deletion (default) or hard-deletion. In the latter case, the record is removed from DB. Returned value \u00b6 Returns an associative array containing ids of the objects actually deleted. Returns an integer (error code) if an error occurred. search \u00b6 Search for objects matching the domain criteria. Description \u00b6 <?php mixed search ( string $class [, array $domain = null , string $order = 'id' , string $sort = 'asc' , string $start = '0' , string $limit = '0' , string $lang = DEFAULT_LANG ] ) Parameters \u00b6 PARAMETER DESCRIPTION class Class of the objects we want to look for. domain Search criteria that objects have to match. order Field on which the resulting list must be sorted . sort Sorting order. start Position in the global resulting list from which we want the ids. limit Amount of ids to return. lang Language under which search applies (only relevant for multilang fields). Returned value \u00b6 Returns an array of objects ids. Returns an integer (error code) if an error occurred. validate \u00b6 Checks whether the values of a given object fields are consistent with the related model definition. Description \u00b6 <?php mixed validate ( string $class , int [] $ids , array [] $values , boolean $check_unique = false , boolean $check_required = false ) Parameters \u00b6 PARAMETER DESCRIPTION class Class of the object we want to validate. values Associative array containing fields and their values. Returned value \u00b6 Returns an associative array containing invalid fields with their associated error_message_id (thus an empty array means no invalid fields). Returns an integer (error code) if an error occurred.","title":"ORM"},{"location":"architecture-concepts/orm/#orm","text":"eQual comes with an object-relational mapper (ORM) that greatly eases the interactions with the database by handling the data conversions, classes inheritance and objects relations. The ObjectManager service is dedicated to Object-Relational Mapping. It handles all tasks that relate to objects search and manipulations and offers an abstract layer for DBMS queries. The ORM can be used in order to : - create , update or delete one or more objects (based on the ID field) - retrieve a single entity or a list of entities (both based on the ID field) - retrieve a list of IDs of entities that match some criteria ObjectManager methods are for low-level manipulations (no data conversion nor validation, and no user permission check at this level). These are mostly used in methods of classes definition. Controllers mostly require high-level manipulations (including data conversion, validation and permission checks) and therefore use Collections returned by class autoloader.","title":"ORM"},{"location":"architecture-concepts/orm/#object-definition","text":"Each object definition inherits from the Model Class that defines methods common to all objects. The 3 methods that should be present in all object classes are presented below (for a full list of the Model class available methods, see @): getName() getDescription() getColumns() Model fields are defined using the getColumns () method, which returns an associative array that maps the fields names with their definitions. <?php public static function getColumns () { return []; }","title":"Object Definition"},{"location":"architecture-concepts/orm/#objectmanager-methods","text":"Objects manipulations are made on selections of objects, described as an array of identifiers. All methods can either return an array (in case of success), or an integer (in case of error, the integer is an error code).","title":"ObjectManager methods"},{"location":"architecture-concepts/orm/#read","text":"Fetches specified field values for the selected objects.","title":"read"},{"location":"architecture-concepts/orm/#description","text":"<?php mixed read ( string $class [, int [] $ids = null , string [] $fields = null , string $lang = DEFAULT_LANG ] )","title":"Description"},{"location":"architecture-concepts/orm/#parameters","text":"PARAMETER DESCRIPTION class Class of the objects we want to retrieve. ids List of identifiers of the objects we want to retrieve. fields Array holding the names of the fields we want to retrieve . lang Language under which return fields values (only relevant for multilang fields).","title":"Parameters"},{"location":"architecture-concepts/orm/#returned-value","text":"Returns an associative array containing, for every object id, a sub array mapping each field to its value. Returns an integer (error code) if an error occurred.","title":"Returned value"},{"location":"architecture-concepts/orm/#update","text":"Sets new values for one or more object instances. multilang fields While saving in a specific language, no test is done to check that specified fields are defined as multilang (it means that saving non-multilang fields in a non-default language will result in a loss of data).","title":"update"},{"location":"architecture-concepts/orm/#description_1","text":"<?php mixed update ( string $object_class , int [] $ids [, array [] $values = null , string $lang = DEFAULT_LANG , boolean $create = false ] )","title":"Description"},{"location":"architecture-concepts/orm/#parameters_1","text":"PARAMETER DESCRIPTION object_class Class of the objects we want to update. ids Ids of the objects to update. fields Array mapping fields names with their new values . lang Language to wich apply the changes (affects only multilang fields). session_id Identifier of the session holding user data (by default, the current session).","title":"Parameters"},{"location":"architecture-concepts/orm/#returned-value_1","text":"Returns an array containing ids of newly created objects (if any). Returns an integer (error code) if an error occurred.","title":"Returned value"},{"location":"architecture-concepts/orm/#delete","text":"Deletes an object permanently or puts it in the \"trash bin\" (i.e. setting the 'deleted' flag to 1).","title":"delete"},{"location":"architecture-concepts/orm/#description_2","text":"<?php mixed remove ( string $class , array $ids [, boolean $permanent = false ] )","title":"description"},{"location":"architecture-concepts/orm/#parameters_2","text":"class : class of the objects to delete ids : ids of the objects to delete permanent : flag for marking deletion as soft-deletion (default) or hard-deletion. In the latter case, the record is removed from DB.","title":"Parameters"},{"location":"architecture-concepts/orm/#returned-value_2","text":"Returns an associative array containing ids of the objects actually deleted. Returns an integer (error code) if an error occurred.","title":"Returned value"},{"location":"architecture-concepts/orm/#search","text":"Search for objects matching the domain criteria.","title":"search"},{"location":"architecture-concepts/orm/#description_3","text":"<?php mixed search ( string $class [, array $domain = null , string $order = 'id' , string $sort = 'asc' , string $start = '0' , string $limit = '0' , string $lang = DEFAULT_LANG ] )","title":"Description"},{"location":"architecture-concepts/orm/#parameters_3","text":"PARAMETER DESCRIPTION class Class of the objects we want to look for. domain Search criteria that objects have to match. order Field on which the resulting list must be sorted . sort Sorting order. start Position in the global resulting list from which we want the ids. limit Amount of ids to return. lang Language under which search applies (only relevant for multilang fields).","title":"Parameters"},{"location":"architecture-concepts/orm/#returned-value_3","text":"Returns an array of objects ids. Returns an integer (error code) if an error occurred.","title":"Returned value"},{"location":"architecture-concepts/orm/#validate","text":"Checks whether the values of a given object fields are consistent with the related model definition.","title":"validate"},{"location":"architecture-concepts/orm/#description_4","text":"<?php mixed validate ( string $class , int [] $ids , array [] $values , boolean $check_unique = false , boolean $check_required = false )","title":"Description"},{"location":"architecture-concepts/orm/#parameters_4","text":"PARAMETER DESCRIPTION class Class of the object we want to validate. values Associative array containing fields and their values.","title":"Parameters"},{"location":"architecture-concepts/orm/#returned-value_4","text":"Returns an associative array containing invalid fields with their associated error_message_id (thus an empty array means no invalid fields). Returns an integer (error code) if an error occurred.","title":"Returned value"},{"location":"architecture-concepts/services/","text":"Services \u00b6 Built-in services \u00b6 Here is the full list of eQual built-in services with their related classes : ID DESCRIPTION report equal\\error\\Reporter Intercepts, handles and filters error and exceptions messages and stores them into a log file. auth equal\\auth\\AuthenticationManager Manages the credentials & authentication tokens. access equal\\access\\AccessController Manages the access/permissions of User & Groups to entities & controllers. context equal\\php\\Context Manages the HTTP requests & responses. validate equal\\data\\DataValidator Checks the fields consistency of entities & controllers. adapt equal\\data\\DataAdapter Transforms the data to the needed type (example: string to date). orm equal\\orm\\ObjectManager Manages the objects (classes). route equal\\route\\Router Returns an existing route. spool equal\\email\\EmailSpooler Manages the emails. Orm service The 'orm' service may be accessed without DB, which is not the case, for example, of the 'auth' service which needs User objects. How services are instantiated \u00b6 The services are listed at eq.lib.php in a container responsible to instantiate them. <?php $container -> register ([ 'report' => 'equal\\error\\Reporter' , 'auth' => 'equal\\auth\\AuthenticationManager' , 'access' => 'equal\\access\\AccessController' , 'context' => 'equal\\php\\Context' , 'validate' => 'equal\\data\\DataValidator' , 'adapt' => 'equal\\data\\DataAdapter' , 'orm' => 'equal\\orm\\ObjectManager' , 'route' => 'equal\\route\\Router' , 'log' => 'equal\\log\\Logger' , 'spool' => 'equal\\email\\EmailSpooler' , 'cron' => 'equal\\cron\\Scheduler' , 'dispatch' => 'equal\\dispatch\\Dispatcher' ]); If a controller requires the use of a service, it needs to invoke it : <?php list ( $params , $providers ) = announce ([ 'description' => \"Attempts to log a user in.\" , 'params' => [ 'login' => [ 'description' => \"user name\" , 'type' => 'string' , 'required' => true ], 'password' => [ 'description' => \"user password\" , 'type' => 'string' , 'required' => true ] ], 'response' => [ 'content-type' => 'application/json' , 'charset' => 'utf-8' , 'accept-origin' => '*' ], 'providers' => [ 'context' , 'auth' , 'orm' ], // Services are invoked 'constants' => [ 'AUTH_ACCESS_TOKEN_VALIDITY' , 'AUTH_REFRESH_TOKEN_VALIDITY' , 'AUTH_TOKEN_HTTPS' ] ]); // Services are assigned to variables to be used in the script list ( $context , $om , $auth ) = [ $providers [ 'context' ], $providers [ 'orm' ], $providers [ 'auth' ] ]; Every service is given an arbitrary name that can be overwritten ( limited to the use of the controller ). Example : <?php [ ... ] // contextDefiner instead of context 'providers' => [ 'contextDefiner' => 'equal\\php\\Context' ] If the service is present in the global config.inc.php , it can also be overwritten inside the config.inc.php files of the packages. If a controller calls an other controller, the called controller won't access the services the calling controller has access to. There is no inheritance for services between controllers. For more info (custom services & service invocation), go to Dependency injection .","title":"Services"},{"location":"architecture-concepts/services/#services","text":"","title":"Services"},{"location":"architecture-concepts/services/#built-in-services","text":"Here is the full list of eQual built-in services with their related classes : ID DESCRIPTION report equal\\error\\Reporter Intercepts, handles and filters error and exceptions messages and stores them into a log file. auth equal\\auth\\AuthenticationManager Manages the credentials & authentication tokens. access equal\\access\\AccessController Manages the access/permissions of User & Groups to entities & controllers. context equal\\php\\Context Manages the HTTP requests & responses. validate equal\\data\\DataValidator Checks the fields consistency of entities & controllers. adapt equal\\data\\DataAdapter Transforms the data to the needed type (example: string to date). orm equal\\orm\\ObjectManager Manages the objects (classes). route equal\\route\\Router Returns an existing route. spool equal\\email\\EmailSpooler Manages the emails. Orm service The 'orm' service may be accessed without DB, which is not the case, for example, of the 'auth' service which needs User objects.","title":"Built-in services"},{"location":"architecture-concepts/services/#how-services-are-instantiated","text":"The services are listed at eq.lib.php in a container responsible to instantiate them. <?php $container -> register ([ 'report' => 'equal\\error\\Reporter' , 'auth' => 'equal\\auth\\AuthenticationManager' , 'access' => 'equal\\access\\AccessController' , 'context' => 'equal\\php\\Context' , 'validate' => 'equal\\data\\DataValidator' , 'adapt' => 'equal\\data\\DataAdapter' , 'orm' => 'equal\\orm\\ObjectManager' , 'route' => 'equal\\route\\Router' , 'log' => 'equal\\log\\Logger' , 'spool' => 'equal\\email\\EmailSpooler' , 'cron' => 'equal\\cron\\Scheduler' , 'dispatch' => 'equal\\dispatch\\Dispatcher' ]); If a controller requires the use of a service, it needs to invoke it : <?php list ( $params , $providers ) = announce ([ 'description' => \"Attempts to log a user in.\" , 'params' => [ 'login' => [ 'description' => \"user name\" , 'type' => 'string' , 'required' => true ], 'password' => [ 'description' => \"user password\" , 'type' => 'string' , 'required' => true ] ], 'response' => [ 'content-type' => 'application/json' , 'charset' => 'utf-8' , 'accept-origin' => '*' ], 'providers' => [ 'context' , 'auth' , 'orm' ], // Services are invoked 'constants' => [ 'AUTH_ACCESS_TOKEN_VALIDITY' , 'AUTH_REFRESH_TOKEN_VALIDITY' , 'AUTH_TOKEN_HTTPS' ] ]); // Services are assigned to variables to be used in the script list ( $context , $om , $auth ) = [ $providers [ 'context' ], $providers [ 'orm' ], $providers [ 'auth' ] ]; Every service is given an arbitrary name that can be overwritten ( limited to the use of the controller ). Example : <?php [ ... ] // contextDefiner instead of context 'providers' => [ 'contextDefiner' => 'equal\\php\\Context' ] If the service is present in the global config.inc.php , it can also be overwritten inside the config.inc.php files of the packages. If a controller calls an other controller, the called controller won't access the services the calling controller has access to. There is no inheritance for services between controllers. For more info (custom services & service invocation), go to Dependency injection .","title":"How services are instantiated"},{"location":"contact-and-support/contact/","text":"Contact \u00b6 eQual has been developed and maintained with passion since 2010. All contributors are welcome ! For contributing, signaling a bug or joining the project, please see our Contribution Guide . If you feel like it, do not hesitate to get in touch with Cedric . Follow the eQual project on GitHub to keep up with what we're working on !","title":"Contact"},{"location":"contact-and-support/contact/#contact","text":"eQual has been developed and maintained with passion since 2010. All contributors are welcome ! For contributing, signaling a bug or joining the project, please see our Contribution Guide . If you feel like it, do not hesitate to get in touch with Cedric . Follow the eQual project on GitHub to keep up with what we're working on !","title":"Contact"},{"location":"contact-and-support/support/","text":"Support \u00b6 Support is provided on a volunteer basis. If you have any specific question regarding eQual, please consider using Github or Stackoverflow . Also, eQual is the engine behind Symbiose , a set of Business application components intended for Agile businesses, maintained and supported by the Yesbabylon company . If you would like to consider using it for your business, feel free to get in touch through this contact form.","title":"Support"},{"location":"contact-and-support/support/#support","text":"Support is provided on a volunteer basis. If you have any specific question regarding eQual, please consider using Github or Stackoverflow . Also, eQual is the engine behind Symbiose , a set of Business application components intended for Agile businesses, maintained and supported by the Yesbabylon company . If you would like to consider using it for your business, feel free to get in touch through this contact form.","title":"Support"},{"location":"getting-started/configuration/","text":"Configuration \u00b6 eQual allows to define globally some values that are used across the different services as configuration properties. These properties are defined throuh config files. eQual supports cascading configuration : each package can have a config file of its own that defines specific properties or overwrites existing properties. Config files are optional, and the default values for mandatory properties are stored in the configuration schema (see below). The root custom config file must be placed under : ./config/ and is expected to be named config.json . Properties are exported as (global) constants. Services, controllers and classes are responsible of announcing which constants they expect (throug a getConstants() method). If one of the required constant is missing, an exception is raised. Config properties must always be called by using the constant() function. This is because, since they're not defined at the moment the parsing is done, using literal notation would result in warnings and wrong values assignments. schema \u00b6 A schema.json file is located under the ./config/ folder. That file holds a comprehensive description of role and usage for each constant. Some constants might be required by mandatory services. Those must therefore be defined immediately when the config file is read. Those properties are marked as 'instant'. When no value is given in config.json for such property: if a 'default' value or an 'environment' varname is given in schema, the constant is declared using the retrieved value, if not and if the property is marked as 'required' an Exception is raised, otherwise property is ignored and no constant is defined. As a convention, it is best to leave the default config file untouched, and create a copy of it, named config.inc.php for customizing the configuration of your installation. Below is the detail of these constants (that are mandatory and cannot be overriden) and their roles. About integer values Properties set as integer can also hold a string that supports the following shorthand notations (case-sensitive): memory notation (converted in bytes) KB (for KiloBytes) MB (for MegaBytes) GB (for GigaBytes) time notations (converted in seconds) s for seconds (default) m for minutes (=60s) h for hours (=60m) d for days (=24h) w for weeks (=7d) M for months (=4w) Y for years (=12m) General properties \u00b6 CONSTANT DEFAULT VALUE DESCRIPTION ROUTING_METHOD JSON Possible values are: 'ORM' and 'JSON' (router.json). ROUTING_CONFIG_DIR QN_BASEDIR.'/config/routing' Routing configuration directory. FILE_STORAGE_MODE FS Binary type storage mode (Possible values: 'DB' (database) and 'FS' (filesystem)). FILE_STORAGE_DIR QN_BASEDIR.'/bin' Binaries storage directory. DEFAULT_RIGHTS QN_R_CREATE | QN_R_READ | QN_R_DELETE | QN_R_WRITE If no ACL is defined (which is the case by default) for an object nor for its class, any user will be granted the permissions in this constant. ACCESS_CONTROL_LEVEL class By default, the control is done at the class level. It means that a user will be granted the same rights for every objects of a given class. DEFAULT_LANG en The language in which the content must be displayed by default (ISO 639-1). GUEST_USER_LANG en The language in which the content must be displayed by default (ISO 639-1) for the Guest User. DEFAULT_PACKAGE core Package we'll try to access if nothing is specified in the url (typically while accessing root folder). Email properties \u00b6 CONSTANT DEFAULT VALUE DESCRIPTION EMAIL_SMTP_HOST SSL0.PROVIDER.NET Email host. EMAIL_SMTP_PORT 587 Email port. EMAIL_SMTP_ACCOUNT_DISPLAYNAME Full Name Email display name. EMAIL_SMTP_ACCOUNT_USERNAME email.as.username@provider.com Email username. EMAIL_SMTP_ACCOUNT_PASSWORD password Email password. EMAIL_SMTP_ACCOUNT_EMAIL email.to.send.from@provider.com Email address the email is sent from. EMAIL_SMTP_ABUSE_EMAIL abuse@example.com Email address to handle abusive emails (spams). EMAIL_SPOOL_DIR QN_BASEDIR.'/spool' Email spooler directory. Database related properties \u00b6 CONSTANT DEFAULT VALUE DESCRIPTION DB_REPLICATION MS Database replication : * - 'NO' : no replication * - 'MS' ('master-slave'): 2 servers; write operations are performed on both servers, read operations are performed on the master only * - 'MM' ('multi-master'): any number of servers; write operations are performed on all servers, read operations can be performed on any server. DB_DBMS MYSQL Database management system. DB_CHARSET UTF8 Default Charset. DB_HOST getenv('EQ_DB_HOST')?getenv('EQ_DB_HOST'):'127.0.0.1') DB host. DB_PORT getenv('EQ_DB_PORT')?getenv('EQ_DB_PORT'):'3306') DB port. DB_USER getenv('EQ_DB_USER')?getenv('EQ_DB_USER'):'root') DB user. DB_PASSWORD getenv('EQ_DB_PASS')?getenv('EQ_DB_PASS'):'test') DB password. DB_NAME getenv('EQ_DB_NAME')?getenv('EQ_DB_NAME'):'equal') DB name. Other properies \u00b6 CONSTANT DEFAULT VALUE DESCRIPTION DEBUG_MODE QN_DEBUG_PHP | QN_DEBUG_ORM | QN_DEBUG_SQL | QN_DEBUG_APP Filter the kind of errors that are present in the console. UPLOAD_MAX_FILE_SIZE 64*1024*1024 maximum authorized size for file upload (in octet). LOGGING_ENABLED true Enable/Disable the logs (to keep track of object changes). DRAFT_VALIDITY 0 Draft validity in days. VERSIONING_ENABLED true Enable/Disable versions of object changes. AUTH_SECRET_KEY my_secret_key Random key generated during install process. AUTH_ACCESS_TOKEN_VALIDITY 3600*1 Validity duration of the access token, in seconds. AUTH_REFRESH_TOKEN_VALIDITY 3600*24*90 Set refresh token validity, in days here. AUTH_TOKEN_HTTPS false Limit sending of auth token to HTTPS. ROOT_APP_URL http://localhost Root URL of the application.","title":"Configuration"},{"location":"getting-started/configuration/#configuration","text":"eQual allows to define globally some values that are used across the different services as configuration properties. These properties are defined throuh config files. eQual supports cascading configuration : each package can have a config file of its own that defines specific properties or overwrites existing properties. Config files are optional, and the default values for mandatory properties are stored in the configuration schema (see below). The root custom config file must be placed under : ./config/ and is expected to be named config.json . Properties are exported as (global) constants. Services, controllers and classes are responsible of announcing which constants they expect (throug a getConstants() method). If one of the required constant is missing, an exception is raised. Config properties must always be called by using the constant() function. This is because, since they're not defined at the moment the parsing is done, using literal notation would result in warnings and wrong values assignments.","title":"Configuration"},{"location":"getting-started/configuration/#schema","text":"A schema.json file is located under the ./config/ folder. That file holds a comprehensive description of role and usage for each constant. Some constants might be required by mandatory services. Those must therefore be defined immediately when the config file is read. Those properties are marked as 'instant'. When no value is given in config.json for such property: if a 'default' value or an 'environment' varname is given in schema, the constant is declared using the retrieved value, if not and if the property is marked as 'required' an Exception is raised, otherwise property is ignored and no constant is defined. As a convention, it is best to leave the default config file untouched, and create a copy of it, named config.inc.php for customizing the configuration of your installation. Below is the detail of these constants (that are mandatory and cannot be overriden) and their roles. About integer values Properties set as integer can also hold a string that supports the following shorthand notations (case-sensitive): memory notation (converted in bytes) KB (for KiloBytes) MB (for MegaBytes) GB (for GigaBytes) time notations (converted in seconds) s for seconds (default) m for minutes (=60s) h for hours (=60m) d for days (=24h) w for weeks (=7d) M for months (=4w) Y for years (=12m)","title":"schema"},{"location":"getting-started/configuration/#general-properties","text":"CONSTANT DEFAULT VALUE DESCRIPTION ROUTING_METHOD JSON Possible values are: 'ORM' and 'JSON' (router.json). ROUTING_CONFIG_DIR QN_BASEDIR.'/config/routing' Routing configuration directory. FILE_STORAGE_MODE FS Binary type storage mode (Possible values: 'DB' (database) and 'FS' (filesystem)). FILE_STORAGE_DIR QN_BASEDIR.'/bin' Binaries storage directory. DEFAULT_RIGHTS QN_R_CREATE | QN_R_READ | QN_R_DELETE | QN_R_WRITE If no ACL is defined (which is the case by default) for an object nor for its class, any user will be granted the permissions in this constant. ACCESS_CONTROL_LEVEL class By default, the control is done at the class level. It means that a user will be granted the same rights for every objects of a given class. DEFAULT_LANG en The language in which the content must be displayed by default (ISO 639-1). GUEST_USER_LANG en The language in which the content must be displayed by default (ISO 639-1) for the Guest User. DEFAULT_PACKAGE core Package we'll try to access if nothing is specified in the url (typically while accessing root folder).","title":"General properties"},{"location":"getting-started/configuration/#email-properties","text":"CONSTANT DEFAULT VALUE DESCRIPTION EMAIL_SMTP_HOST SSL0.PROVIDER.NET Email host. EMAIL_SMTP_PORT 587 Email port. EMAIL_SMTP_ACCOUNT_DISPLAYNAME Full Name Email display name. EMAIL_SMTP_ACCOUNT_USERNAME email.as.username@provider.com Email username. EMAIL_SMTP_ACCOUNT_PASSWORD password Email password. EMAIL_SMTP_ACCOUNT_EMAIL email.to.send.from@provider.com Email address the email is sent from. EMAIL_SMTP_ABUSE_EMAIL abuse@example.com Email address to handle abusive emails (spams). EMAIL_SPOOL_DIR QN_BASEDIR.'/spool' Email spooler directory.","title":"Email properties"},{"location":"getting-started/configuration/#database-related-properties","text":"CONSTANT DEFAULT VALUE DESCRIPTION DB_REPLICATION MS Database replication : * - 'NO' : no replication * - 'MS' ('master-slave'): 2 servers; write operations are performed on both servers, read operations are performed on the master only * - 'MM' ('multi-master'): any number of servers; write operations are performed on all servers, read operations can be performed on any server. DB_DBMS MYSQL Database management system. DB_CHARSET UTF8 Default Charset. DB_HOST getenv('EQ_DB_HOST')?getenv('EQ_DB_HOST'):'127.0.0.1') DB host. DB_PORT getenv('EQ_DB_PORT')?getenv('EQ_DB_PORT'):'3306') DB port. DB_USER getenv('EQ_DB_USER')?getenv('EQ_DB_USER'):'root') DB user. DB_PASSWORD getenv('EQ_DB_PASS')?getenv('EQ_DB_PASS'):'test') DB password. DB_NAME getenv('EQ_DB_NAME')?getenv('EQ_DB_NAME'):'equal') DB name.","title":"Database related properties"},{"location":"getting-started/configuration/#other-properies","text":"CONSTANT DEFAULT VALUE DESCRIPTION DEBUG_MODE QN_DEBUG_PHP | QN_DEBUG_ORM | QN_DEBUG_SQL | QN_DEBUG_APP Filter the kind of errors that are present in the console. UPLOAD_MAX_FILE_SIZE 64*1024*1024 maximum authorized size for file upload (in octet). LOGGING_ENABLED true Enable/Disable the logs (to keep track of object changes). DRAFT_VALIDITY 0 Draft validity in days. VERSIONING_ENABLED true Enable/Disable versions of object changes. AUTH_SECRET_KEY my_secret_key Random key generated during install process. AUTH_ACCESS_TOKEN_VALIDITY 3600*1 Validity duration of the access token, in seconds. AUTH_REFRESH_TOKEN_VALIDITY 3600*24*90 Set refresh token validity, in days here. AUTH_TOKEN_HTTPS false Limit sending of auth token to HTTPS. ROOT_APP_URL http://localhost Root URL of the application.","title":"Other properies"},{"location":"getting-started/deployment/","text":"","title":"Deployment"},{"location":"getting-started/installation/","text":"Installation \u00b6 Using Docker \u00b6 1. Install Docker \u00b6 Windows \u00b6 install Windows HyperV install WSL $ wsl --install install WSL2 core update (can be found here ) install Docker Desktop for windows Linux \u00b6 See the official doc from Docker here Ubuntu $ sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin 2. Start the container \u00b6 Download the Docker Compose file from github ( wget ). And instantiate the stack by using the following command : Under Windows: $ docker compose up -d Under Linux: $ docker-compose up -d Remember to map the domain name with an IP address in your local hosts file: Windows : C:\\Windows\\System32\\drivers\\etc\\hosts Linux : /etc/hosts Example: 127.0.0.1 equal.local You can now either browse to the welcome screen : http://equal.local. or start a shell on the container : $ docker exec -ti equal.local /bin/bash Some editors use extensions that able you to use a Docker container as a full-featured development environment. Using VS Code \"VS Code\" has the extension Remote - Containers , where you may work as if everything were running locally on your machine, except now they are inside a container. Manual installation \u00b6 Requirements \u00b6 eQual requires the following dependencies: PHP 7.1+ with following extensions : mysqli (mandatory) + gd opcache zip tidy (optional) Apache 2+ or Nginx MySQL 5+ compatible DBMS (MySQL or MariaDB) Environment setup \u00b6 OS configuration \u00b6 Windows \u00b6 Under Windows, you can use any of the following tools for a ready-to-use WAMP environment : XAMPP 7.3 WAMP Server 3.2+ DevServer 17.x Retrieve the path of the PHP executable: where php This will output something like C:\\wamp64\\bin\\php\\php7.2.18\\php.exe Add the PHP binary to the PATH environment variable: SET PATH = %PATH% ; C: \\w amp64 \\b in \\p hp \\p hp7.2.18 Ubuntu \u00b6 Installing the LAMP stack under Ubuntu is straightforward: sudo apt update sudo apt install apache2 mysql-server php libapache2-mod-php Make sure that the mod-rewrite module is enabled: sudo a2enmod rewrite Restart Apache: sudo systemctl restart apache2 Retrieve the path of the PHP binary: which php This will output something like /usr/bin/php . Add the PHP binary to the PATH environment variable: export PATH = $PATH :/usr/bin/php RedHat / Fedora / Centos \u00b6 Install Mysql server, PHP and Apache: yum update yum install httpd php mysql-server php-mysql Getting eQual \u00b6 Download code as ZIP: wget https://github.com/cedricfrancoys/equal/archive/master.zip OR Clone with Git : git clone https://github.com/cedricfrancoys/equal.git Copy the files to your webserver HTML directory. Example : cp equal /var/www/html/ Virtual host configuration \u00b6 Within the documentation pages, we refer to the installation that runs on a local web server using equal.local as servername (accessible through http://equal.local). If this is the first time you install eQual, we suggest you use that domain name to make things easier. In the HTTP server config, create a virtual host that uses /public as DocumentRoot. Example for Apache2: <VirtualHost *:80> ServerName equal.local DocumentRoot \"c:/wamp64/www/equal/public\" <Directory \"c:/wamp64/www/equal/public/\"> Options +Indexes +Includes +FollowSymLinks +MultiViews AllowOverride All Require local </Directory> </VirtualHost> Remember to map the domain name with an IP address in your local hosts file: Windows : C:\\Windows\\System32\\drivers\\etc\\hosts Linux : /etc/hosts Example: 127.0.0.1 equal.local To make sure everything is setup properly, try to request the hello controller by browsing to http://equal.local/index.php?get=demo_hello. You should get the simple output \"hello universe\". If not, review carefully the previous steps of the installation. Configuration \u00b6 Config file \u00b6 eQual expects an optional root config file in the /config directory. To create and customize your config file, start by creating config.json : touch config/config.json Edit config.json to adapt the values according to your environment: { \"DB_DBMS\": \"MYSQL\", \"DB_HOST\": \"127.0.0.1\", \"DB_PORT\": \"3306\", \"DB_USER\": \"root\", \"DB_PASSWORD\": \"test\", \"DB_NAME\": \"equal\", \"DB_CHARSET\": \"UTF8\" } Database initialization \u00b6 You should now have a properly configured environment and be able to perform some operations calls. To make sure the DBMS can be access, you can use the following controller : $ ./equal.run --do = test_db-connectivity Upon success this controller exits with no message (exit 0), and the database is created. If an error occurs, a JSON message is returned with a short description about the issue. Example: { \"errors\" : { \"INVALID_CONFIG\" : \"Unable to establish connection to DBMS host (wrong hostname or port)\" } } The database can be created by using the core_init_db controller . PATH core\\actions\\init\\db.php URL ?do=init_db CLI $ ./equal.run --do=init_db DESCRIPTION Creates a database using the details provided in config file. This controllers calls db-connectivity and if connection can be established with the host, it requests the creation of the database, if it does not exist yet. Alternatively, you can create the database manually : Open MySQL session as root \u2013 type the password upon request (if none set omit -p) mysql -uroot -p Create eQual database create database mydb character set utf8; Package initialization \u00b6 In order to be able to manipulate entities, the related package needs to be initialized (each package contains the class definition of its own entities). This can be done by using the core_init_package controller. PATH core\\actions\\init\\package.php URL ?do=init_package&package=core CLI $ ./equal.run --do=init_package --package=core DESCRIPTION Initialise database for given package. If no package is given, initialize core package. Now, you should be able to fetch data by using the controllers from the core package. Example: PATH core\\data\\model\\collect.php URL ?get=model_collect&entity=core\\User CLI $ ./equal.run --get=model_collect --entity=core\\\\User DESCRIPTION Returns a list of entites according to given domain (filter), start offset, limit and order. API requests \u00b6 A list of routes related to default API is defined in /config/routing/api_default.json . Here below are some examples of HTTP calls and their responses (in JSON) that you can us to test your installation: Fetch the details of user[1] (admin). GET /user/1 [ { \"id\" : 1 , \"name\" : \"admin\" , \"state\" : \"instance\" , \"modified\" : \"2012-08-18T15:06:43+02:00\" } ] Fetch the full list of existing groups. GET /users [ { \"id\" : 1 , \"name\" : \"admin\" , \"state\" : \"instance\" , \"modified\" : \"2012-08-18T15:06:43+02:00\" }, { \"id\" : 2 , \"name\" : \"cedric@equal.run\" , \"state\" : \"instance\" , \"modified\" : \"2014-09-04T12:21:34+02:00\" } ] Fetch the full list of existing groups. GET l/groups [ { \"id\" : 1 , \"name\" : \"root\" , \"state\" : \"\" , \"modified\" : \"2012-05-30T20:45:20+02:00\" }, { \"id\" : 2 , \"name\" : \"default\" , \"state\" : \"\" , \"modified\" : \"2012-05-30T20:45:20+02:00\" } ] Create a new group. POST /group { \"entity\" : \"core\\\\Group\" , \"id\" : 3 } Update the 'name' property of the group[3]. PUT group/3?fields[name]=test [] Fetch the full list of existing groups. GET /groups [ { \"id\" : 1 , \"name\" : \"root\" , \"state\" : \"\" , \"modified\" : \"2012-05-30T20:45:20+02:00\" }, { \"id\" : 2 , \"name\" : \"default\" , \"state\" : \"instance\" , \"modified\" : \"2021-07-05T12:40:49+02:00\" }, { \"id\" : 3 , \"name\" : \"test\" , \"state\" : \"instance\" , \"modified\" : \"2021-07-05T12:42:30+02:00\" } ]","title":"Installation"},{"location":"getting-started/installation/#installation","text":"","title":"Installation"},{"location":"getting-started/installation/#using-docker","text":"","title":"Using Docker"},{"location":"getting-started/installation/#1-install-docker","text":"","title":"1. Install Docker"},{"location":"getting-started/installation/#windows","text":"install Windows HyperV install WSL $ wsl --install install WSL2 core update (can be found here ) install Docker Desktop for windows","title":"Windows"},{"location":"getting-started/installation/#linux","text":"See the official doc from Docker here Ubuntu $ sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin","title":"Linux"},{"location":"getting-started/installation/#2-start-the-container","text":"Download the Docker Compose file from github ( wget ). And instantiate the stack by using the following command : Under Windows: $ docker compose up -d Under Linux: $ docker-compose up -d Remember to map the domain name with an IP address in your local hosts file: Windows : C:\\Windows\\System32\\drivers\\etc\\hosts Linux : /etc/hosts Example: 127.0.0.1 equal.local You can now either browse to the welcome screen : http://equal.local. or start a shell on the container : $ docker exec -ti equal.local /bin/bash Some editors use extensions that able you to use a Docker container as a full-featured development environment. Using VS Code \"VS Code\" has the extension Remote - Containers , where you may work as if everything were running locally on your machine, except now they are inside a container.","title":"2. Start the container"},{"location":"getting-started/installation/#manual-installation","text":"","title":"Manual installation"},{"location":"getting-started/installation/#requirements","text":"eQual requires the following dependencies: PHP 7.1+ with following extensions : mysqli (mandatory) + gd opcache zip tidy (optional) Apache 2+ or Nginx MySQL 5+ compatible DBMS (MySQL or MariaDB)","title":"Requirements"},{"location":"getting-started/installation/#environment-setup","text":"","title":"Environment setup"},{"location":"getting-started/installation/#os-configuration","text":"","title":"OS configuration"},{"location":"getting-started/installation/#windows_1","text":"Under Windows, you can use any of the following tools for a ready-to-use WAMP environment : XAMPP 7.3 WAMP Server 3.2+ DevServer 17.x Retrieve the path of the PHP executable: where php This will output something like C:\\wamp64\\bin\\php\\php7.2.18\\php.exe Add the PHP binary to the PATH environment variable: SET PATH = %PATH% ; C: \\w amp64 \\b in \\p hp \\p hp7.2.18","title":"Windows"},{"location":"getting-started/installation/#ubuntu","text":"Installing the LAMP stack under Ubuntu is straightforward: sudo apt update sudo apt install apache2 mysql-server php libapache2-mod-php Make sure that the mod-rewrite module is enabled: sudo a2enmod rewrite Restart Apache: sudo systemctl restart apache2 Retrieve the path of the PHP binary: which php This will output something like /usr/bin/php . Add the PHP binary to the PATH environment variable: export PATH = $PATH :/usr/bin/php","title":"Ubuntu"},{"location":"getting-started/installation/#redhat-fedora-centos","text":"Install Mysql server, PHP and Apache: yum update yum install httpd php mysql-server php-mysql","title":"RedHat / Fedora / Centos"},{"location":"getting-started/installation/#getting-equal","text":"Download code as ZIP: wget https://github.com/cedricfrancoys/equal/archive/master.zip OR Clone with Git : git clone https://github.com/cedricfrancoys/equal.git Copy the files to your webserver HTML directory. Example : cp equal /var/www/html/","title":"Getting eQual"},{"location":"getting-started/installation/#virtual-host-configuration","text":"Within the documentation pages, we refer to the installation that runs on a local web server using equal.local as servername (accessible through http://equal.local). If this is the first time you install eQual, we suggest you use that domain name to make things easier. In the HTTP server config, create a virtual host that uses /public as DocumentRoot. Example for Apache2: <VirtualHost *:80> ServerName equal.local DocumentRoot \"c:/wamp64/www/equal/public\" <Directory \"c:/wamp64/www/equal/public/\"> Options +Indexes +Includes +FollowSymLinks +MultiViews AllowOverride All Require local </Directory> </VirtualHost> Remember to map the domain name with an IP address in your local hosts file: Windows : C:\\Windows\\System32\\drivers\\etc\\hosts Linux : /etc/hosts Example: 127.0.0.1 equal.local To make sure everything is setup properly, try to request the hello controller by browsing to http://equal.local/index.php?get=demo_hello. You should get the simple output \"hello universe\". If not, review carefully the previous steps of the installation.","title":"Virtual host configuration"},{"location":"getting-started/installation/#configuration","text":"","title":"Configuration"},{"location":"getting-started/installation/#config-file","text":"eQual expects an optional root config file in the /config directory. To create and customize your config file, start by creating config.json : touch config/config.json Edit config.json to adapt the values according to your environment: { \"DB_DBMS\": \"MYSQL\", \"DB_HOST\": \"127.0.0.1\", \"DB_PORT\": \"3306\", \"DB_USER\": \"root\", \"DB_PASSWORD\": \"test\", \"DB_NAME\": \"equal\", \"DB_CHARSET\": \"UTF8\" }","title":"Config file"},{"location":"getting-started/installation/#database-initialization","text":"You should now have a properly configured environment and be able to perform some operations calls. To make sure the DBMS can be access, you can use the following controller : $ ./equal.run --do = test_db-connectivity Upon success this controller exits with no message (exit 0), and the database is created. If an error occurs, a JSON message is returned with a short description about the issue. Example: { \"errors\" : { \"INVALID_CONFIG\" : \"Unable to establish connection to DBMS host (wrong hostname or port)\" } } The database can be created by using the core_init_db controller . PATH core\\actions\\init\\db.php URL ?do=init_db CLI $ ./equal.run --do=init_db DESCRIPTION Creates a database using the details provided in config file. This controllers calls db-connectivity and if connection can be established with the host, it requests the creation of the database, if it does not exist yet. Alternatively, you can create the database manually : Open MySQL session as root \u2013 type the password upon request (if none set omit -p) mysql -uroot -p Create eQual database create database mydb character set utf8;","title":"Database initialization"},{"location":"getting-started/installation/#package-initialization","text":"In order to be able to manipulate entities, the related package needs to be initialized (each package contains the class definition of its own entities). This can be done by using the core_init_package controller. PATH core\\actions\\init\\package.php URL ?do=init_package&package=core CLI $ ./equal.run --do=init_package --package=core DESCRIPTION Initialise database for given package. If no package is given, initialize core package. Now, you should be able to fetch data by using the controllers from the core package. Example: PATH core\\data\\model\\collect.php URL ?get=model_collect&entity=core\\User CLI $ ./equal.run --get=model_collect --entity=core\\\\User DESCRIPTION Returns a list of entites according to given domain (filter), start offset, limit and order.","title":"Package  initialization"},{"location":"getting-started/installation/#api-requests","text":"A list of routes related to default API is defined in /config/routing/api_default.json . Here below are some examples of HTTP calls and their responses (in JSON) that you can us to test your installation: Fetch the details of user[1] (admin). GET /user/1 [ { \"id\" : 1 , \"name\" : \"admin\" , \"state\" : \"instance\" , \"modified\" : \"2012-08-18T15:06:43+02:00\" } ] Fetch the full list of existing groups. GET /users [ { \"id\" : 1 , \"name\" : \"admin\" , \"state\" : \"instance\" , \"modified\" : \"2012-08-18T15:06:43+02:00\" }, { \"id\" : 2 , \"name\" : \"cedric@equal.run\" , \"state\" : \"instance\" , \"modified\" : \"2014-09-04T12:21:34+02:00\" } ] Fetch the full list of existing groups. GET l/groups [ { \"id\" : 1 , \"name\" : \"root\" , \"state\" : \"\" , \"modified\" : \"2012-05-30T20:45:20+02:00\" }, { \"id\" : 2 , \"name\" : \"default\" , \"state\" : \"\" , \"modified\" : \"2012-05-30T20:45:20+02:00\" } ] Create a new group. POST /group { \"entity\" : \"core\\\\Group\" , \"id\" : 3 } Update the 'name' property of the group[3]. PUT group/3?fields[name]=test [] Fetch the full list of existing groups. GET /groups [ { \"id\" : 1 , \"name\" : \"root\" , \"state\" : \"\" , \"modified\" : \"2012-05-30T20:45:20+02:00\" }, { \"id\" : 2 , \"name\" : \"default\" , \"state\" : \"instance\" , \"modified\" : \"2021-07-05T12:40:49+02:00\" }, { \"id\" : 3 , \"name\" : \"test\" , \"state\" : \"instance\" , \"modified\" : \"2021-07-05T12:42:30+02:00\" } ]","title":"API requests"},{"location":"getting-started/quick-start/","text":"Quick Start \u00b6 You've just installed eQual. And now what ? Init your environment \u00b6 First, let's configure it according to your environment. A default configuration file is already present and can be modified, but it is a good practice to leave it untouched, especially if you're using git or any other versioning system, so that the configuration details of your environment remain confidential (not part of the repository). $ cp config/default.inc.php config/config.inc.php Then edit config.inc.php and update the values of the DBMS access. Constants role is unambiguous : About DB creation You can choose any name for the database: if it does not exist yet, you'll be able to create it using the command line; In case creation fails, make sure the DBMS server is actually running on the specified host and port; You can now test your installation by calling the test_db-connectivity test tool : PATH core\\actions\\test\\db-connectivity.php URL ?do=test_db-connectivity CLI $ ./equal.run --do=test_db-connectivity DESCRIPTION Tests connectivity to the DBMS server (check if we're able to establish a TCP/IP connection). If no error message is returned (the command ends with a 0 exit code), you can create your database by calling the init_db tool : PATH core\\actions\\init\\db.php URL ?do=init_db CLI $ ./equal.run --do=init_db DESCRIPTION Creates a database using the details provided in config file. This controllers calls db-connectivity and if connection can be established with the host, it requests the creation of the database, if it does not exist yet. eQual holds a native core package that holds a few classes and operations. All packages depend on the ORM layer, which is responsible of storing the objects into the database. So, in order to start using a package that defines object classes, you have to initialize it. This can be done using the init_package tool : PATH core\\actions\\init\\package.php URL ?do=init_package&package=core CLI $ ./equal.run --do=init_package --package=core DESCRIPTION Initialise database for given package. If no package is given, initialize core package. Compile the apps ( apps folder ) of the package and copy them in the public folder. Create your first package \u00b6 This section covers the first steps to setup a backend service or API using eQual. 1. Create a new package \u00b6 In /packages , create a new folder . For this example, we'll name it \"mypackage\" . In /packages/mypackage , create 2 new folders named classes and data . Directory should look like this : /packages /mypackage /classes /data 2. Define some custom classes \u00b6 In /packages/mypackage/classes/ , add a new .class.php file for each class we want to use. In this example, we define the class Task for a todo-list app : /packages/mypackage/classes/Task.class.php <?php namespace mypackage ; use equal\\orm\\Model ; // this is a built-in object handler class Task extends Model { public static function getColumns () { return [ 'title' => [ 'type' => 'string' ], 'content' => [ 'type' => 'text' ] ]; } } Note: ID key generation is handled by eQual But, what if we want to establish a relation between two classes, like nesting the User of User.class.php as a parameter? That's where the types many2many , one2many , and many2one come in handy ( see Understanding DBMS relationships ). <?php // Task // ... return [ // ... 'user_id' => [ 'type' => 'many2one' , 'foreign_object' => 'mypackage\\User' ] ]; We also need to do the opposite in User.class.php : <?php // User // ... return [ // ... 'task_id' => [ 'type' => 'one2many' , 'foreign_object' => 'mypackage\\Task' ] ]; 3. Initialize the new package \u00b6 For this step, we use mySQL with a dedicated database (See Configuration ). First we initiate the core component ; this is required every time we want to use eQual in a new DB. Open your CLI at the root of eQual's folder and use this : $ ./equal.run --do = init_package --package = core Then we do the same for our package. It will automatically create one table per associated class . $ ./equal.run --do = init_package --package = mypackage Now the database should have the following tables: core_user core_group core_rel_group_user core_log core_permission core_translation core_version mypackage_task mypackage_user Troubleshooting \u00b6 If none of the above is working. Try this : PATH core\\actions\\test\\package-consistency.php URL ?do=test_package-consistency&package=core CLI $ ./equal.run --do=test_package-consistency --package=core DESCRIPTION Consistency checks between DB and class as well as syntax validation for classes (PHP), views and translation files (JSON). It will tell you if something is wrong or missing. You can ignore any error related to view or translation (they are optional but will display a warning nonetheless). You can run the same command with your package's name instead of \"core\", see if the problem lies in here. PATH core\\actions\\test\\package-consistency.php URL ?do=test_package-consistency&package=myPackage CLI $ ./equal.run --do=test_package-consistency --package=myPackage DESCRIPTION Consistency checks between DB and class as well as syntax validation for classes (PHP), views and translation files (JSON). 4. Grant CRUD permissions \u00b6 By default you don't have any rights to read, write or delete in the DB. This is for security reasons. If you want to bypass this you have 2 options : Use the CLI to grant the permissions Debug mode (for testing purpose) CLI commands \u00b6 When you make a CLI command, eQual automatically bypass all limitations. It makes it the only reliable way to give and retain rights within your project. The rights available are create , read , update , delete , manage . For instance, we'll continue with our todolist example and grant the permission to read for the group of objects Task : $ ./equal.run --do = group_grant --group = default --right = read --entity = mypackage \\T ask You can only grant one right at a time , it means we'll need to repeat this command for every permission we want to give (i.e. create, read, write, delete, manage). If you want to target all the classes of a package, you can specify with --entity=mypackage\\* . Debug mode \u00b6 Alternatively, you can grant all access through all the project. This should only be used for testing purpose. In the /config folder, open the config.inc.php file. If you don't have one, create one by copying it from default.inc.php . There is a parameter called \"DEFAULT_RIGHTS\" you can customize : <?php // [...] // replace this define ( 'DEFAULT_RIGHTS' , 0 ); // by this define ( 'DEFAULT_RIGHTS' , QN_R_CREATE | QN_R_READ | QN_R_DELETE | QN_R_WRITE ); // [...] Uncomment the commented part, comment the uncommented part, then save. Note: eQual uses binary masks for granting rights : 0 means no rights 1 is create 2 is read 4 is write/update 8 is delete 16 is manage 5. Change default view \u00b6 In /config , open config.inc.php or default.inc.php (unrecommended) and adapt this : define('default_package', 'mypackage'); In /packages/mypackage , create a config.inc.php file and add these lines : <?php namespace config ; define ( 'DEFAULT_APP' , 'landing' ); // it refers to packages/mypackage/apps/landing.php And we're done, eQual will now use the landing controller when requesting mypackage. To test it, navigate to: http://equal.local/?show=mypackage More learning ressources \u00b6 See Usage and Howtos","title":"Quick Start"},{"location":"getting-started/quick-start/#quick-start","text":"You've just installed eQual. And now what ?","title":"Quick Start"},{"location":"getting-started/quick-start/#init-your-environment","text":"First, let's configure it according to your environment. A default configuration file is already present and can be modified, but it is a good practice to leave it untouched, especially if you're using git or any other versioning system, so that the configuration details of your environment remain confidential (not part of the repository). $ cp config/default.inc.php config/config.inc.php Then edit config.inc.php and update the values of the DBMS access. Constants role is unambiguous : About DB creation You can choose any name for the database: if it does not exist yet, you'll be able to create it using the command line; In case creation fails, make sure the DBMS server is actually running on the specified host and port; You can now test your installation by calling the test_db-connectivity test tool : PATH core\\actions\\test\\db-connectivity.php URL ?do=test_db-connectivity CLI $ ./equal.run --do=test_db-connectivity DESCRIPTION Tests connectivity to the DBMS server (check if we're able to establish a TCP/IP connection). If no error message is returned (the command ends with a 0 exit code), you can create your database by calling the init_db tool : PATH core\\actions\\init\\db.php URL ?do=init_db CLI $ ./equal.run --do=init_db DESCRIPTION Creates a database using the details provided in config file. This controllers calls db-connectivity and if connection can be established with the host, it requests the creation of the database, if it does not exist yet. eQual holds a native core package that holds a few classes and operations. All packages depend on the ORM layer, which is responsible of storing the objects into the database. So, in order to start using a package that defines object classes, you have to initialize it. This can be done using the init_package tool : PATH core\\actions\\init\\package.php URL ?do=init_package&package=core CLI $ ./equal.run --do=init_package --package=core DESCRIPTION Initialise database for given package. If no package is given, initialize core package. Compile the apps ( apps folder ) of the package and copy them in the public folder.","title":"Init your environment"},{"location":"getting-started/quick-start/#create-your-first-package","text":"This section covers the first steps to setup a backend service or API using eQual.","title":"Create your first package"},{"location":"getting-started/quick-start/#1-create-a-new-package","text":"In /packages , create a new folder . For this example, we'll name it \"mypackage\" . In /packages/mypackage , create 2 new folders named classes and data . Directory should look like this : /packages /mypackage /classes /data","title":"1. Create a new package"},{"location":"getting-started/quick-start/#2-define-some-custom-classes","text":"In /packages/mypackage/classes/ , add a new .class.php file for each class we want to use. In this example, we define the class Task for a todo-list app : /packages/mypackage/classes/Task.class.php <?php namespace mypackage ; use equal\\orm\\Model ; // this is a built-in object handler class Task extends Model { public static function getColumns () { return [ 'title' => [ 'type' => 'string' ], 'content' => [ 'type' => 'text' ] ]; } } Note: ID key generation is handled by eQual But, what if we want to establish a relation between two classes, like nesting the User of User.class.php as a parameter? That's where the types many2many , one2many , and many2one come in handy ( see Understanding DBMS relationships ). <?php // Task // ... return [ // ... 'user_id' => [ 'type' => 'many2one' , 'foreign_object' => 'mypackage\\User' ] ]; We also need to do the opposite in User.class.php : <?php // User // ... return [ // ... 'task_id' => [ 'type' => 'one2many' , 'foreign_object' => 'mypackage\\Task' ] ];","title":"2. Define some custom classes"},{"location":"getting-started/quick-start/#3-initialize-the-new-package","text":"For this step, we use mySQL with a dedicated database (See Configuration ). First we initiate the core component ; this is required every time we want to use eQual in a new DB. Open your CLI at the root of eQual's folder and use this : $ ./equal.run --do = init_package --package = core Then we do the same for our package. It will automatically create one table per associated class . $ ./equal.run --do = init_package --package = mypackage Now the database should have the following tables: core_user core_group core_rel_group_user core_log core_permission core_translation core_version mypackage_task mypackage_user","title":"3. Initialize the new package"},{"location":"getting-started/quick-start/#troubleshooting","text":"If none of the above is working. Try this : PATH core\\actions\\test\\package-consistency.php URL ?do=test_package-consistency&package=core CLI $ ./equal.run --do=test_package-consistency --package=core DESCRIPTION Consistency checks between DB and class as well as syntax validation for classes (PHP), views and translation files (JSON). It will tell you if something is wrong or missing. You can ignore any error related to view or translation (they are optional but will display a warning nonetheless). You can run the same command with your package's name instead of \"core\", see if the problem lies in here. PATH core\\actions\\test\\package-consistency.php URL ?do=test_package-consistency&package=myPackage CLI $ ./equal.run --do=test_package-consistency --package=myPackage DESCRIPTION Consistency checks between DB and class as well as syntax validation for classes (PHP), views and translation files (JSON).","title":"Troubleshooting"},{"location":"getting-started/quick-start/#4-grant-crud-permissions","text":"By default you don't have any rights to read, write or delete in the DB. This is for security reasons. If you want to bypass this you have 2 options : Use the CLI to grant the permissions Debug mode (for testing purpose)","title":"4. Grant CRUD permissions"},{"location":"getting-started/quick-start/#cli-commands","text":"When you make a CLI command, eQual automatically bypass all limitations. It makes it the only reliable way to give and retain rights within your project. The rights available are create , read , update , delete , manage . For instance, we'll continue with our todolist example and grant the permission to read for the group of objects Task : $ ./equal.run --do = group_grant --group = default --right = read --entity = mypackage \\T ask You can only grant one right at a time , it means we'll need to repeat this command for every permission we want to give (i.e. create, read, write, delete, manage). If you want to target all the classes of a package, you can specify with --entity=mypackage\\* .","title":"CLI commands"},{"location":"getting-started/quick-start/#debug-mode","text":"Alternatively, you can grant all access through all the project. This should only be used for testing purpose. In the /config folder, open the config.inc.php file. If you don't have one, create one by copying it from default.inc.php . There is a parameter called \"DEFAULT_RIGHTS\" you can customize : <?php // [...] // replace this define ( 'DEFAULT_RIGHTS' , 0 ); // by this define ( 'DEFAULT_RIGHTS' , QN_R_CREATE | QN_R_READ | QN_R_DELETE | QN_R_WRITE ); // [...] Uncomment the commented part, comment the uncommented part, then save. Note: eQual uses binary masks for granting rights : 0 means no rights 1 is create 2 is read 4 is write/update 8 is delete 16 is manage","title":"Debug mode"},{"location":"getting-started/quick-start/#5-change-default-view","text":"In /config , open config.inc.php or default.inc.php (unrecommended) and adapt this : define('default_package', 'mypackage'); In /packages/mypackage , create a config.inc.php file and add these lines : <?php namespace config ; define ( 'DEFAULT_APP' , 'landing' ); // it refers to packages/mypackage/apps/landing.php And we're done, eQual will now use the landing controller when requesting mypackage. To test it, navigate to: http://equal.local/?show=mypackage","title":"5. Change default view"},{"location":"getting-started/quick-start/#more-learning-ressources","text":"See Usage and Howtos","title":"More learning ressources"},{"location":"howtos-and-examples/basic-controller/","text":"Controllers \u00b6 The controllers are usually seperated in three different directories: \"Data, Actions, Apps\" . In the folder Data, we will be Fetching the data, method GET . Example : /core/data/model/search.php . The controller \"Search\" => \"Returns a list of identifiers of a given entity, according to given domain (filter), start offset, limit and order.\" In the folder Actions, we will be modifying the data, method DO (Post, Put, Delete) . Example : /core/actions/model/create.php . The controller \"Create\" => \"Create a new object using given fields values.\" In Apps, we will be showing an APP/UI , with different types of content. Example : /core/apps/model/controllers.php . The controller \"Controllers\" => \"UI for browsing controllers and their definition amongst packages.\" Let's go a bit more into details... You can also check out rest-api for more info. DATA Controllers \u00b6 We will use the above example, to make it easier. Let's open /core/data/model/search.php . <?php list ( $params , $providers ) = announce ([ 'description' => 'Returns a list of identifiers of a given entity, according to given domain (filter), start offset, limit and order.' , 'response' => [ // defines the format of the server response 'content-type' => 'application/json' , 'charset' => 'UTF-8' , 'accept-origin' => '*' , 'cacheable' => false ], 'params' => [ // gives additional requirements and conditions 'entity' => [ 'description' => 'Full name (including namespace) of the class to look into (e.g. \\'core\\\\User\\').' , 'type' => 'string' , 'required' => true // Means that the entity Condition/Requirement is necessary for // the request to go through ], 'domain' => [ 'description' => 'Criterias that results have to match (serie of conjunctions)' , 'type' => 'array' , 'default' => [] ], 'order' => [ 'description' => 'Column to use for sorting results.' , 'type' => 'string' , 'default' => 'id' ], 'sort' => [ 'description' => 'The direction (i.e. \\'asc\\' or \\'desc\\').' , 'type' => 'string' , 'default' => 'asc' ], 'start' => [ 'description' => 'The row from which results have to start.' , 'type' => 'integer' , 'default' => 0 ], 'limit' => [ 'description' => 'The maximum number of results.' , 'type' => 'integer' , 'default' => - 1 ] ], 'response' => [ 'content-type' => 'application/json' , 'charset' => 'utf-8' , 'accept-origin' => '*' ], 'providers' => [ 'context' ] // helps us to access useful services such as context, orm, auth ]); list ( $context ) = [ $providers [ 'context' ] ]; if ( ! class_exists ( $params [ 'entity' ])) { throw new Exception ( \"unknown_entity\" , QN_ERROR_UNKNOWN_OBJECT ); } $collection = $params [ 'entity' ] :: search ( $params [ 'domain' ], [ 'sort' => [ $params [ 'order' ] => $params [ 'sort' ]] ]); $total = count ( $collection -> ids ()); $result = $collection -> shift ( $params [ 'start' ]) -> limit ( $params [ 'limit' ]) -> ids (); $context -> httpResponse () -> header ( 'X-Total-Count' , $total ) -> body ( $result ) -> send (); What it does : announce() will handle the values of our query : description tells what the controller does params gives additional requirements and conditions response defines the format of the server response providers helps us to access useful services such as context , orm , auth About Providers \u00b6 We use list($context) = [$providers['context']] to implement the services we want to use. In the above example ( search controller ) the $collection variable is where we receive the data from our query : $params['entity']::search([$params]) searchs for data associated with a specific Entity or Class and that matches the params given Example: If we use the entity User , we will do a research amongst all the Users from our database. If we don't use any requirements/conditions, we will have a list with all the users. Finally, $context is used to accomplish REST's purpose, displaying the data on our browser as JSON <?php $context -> httpResponse () // get the HTTP response being built -> body ( $result ) // populate the body with resulting result -> send (); // output the response (i.e. some plain text // @see https://www.w3.org/Protocols/rfc2616) Using GET in your browser \u00b6 We'll assume we already have an existing database containing a data sample of tasks, and have already done the following : $> php run.php --do = test_package-consistency --package = todolist // The test_package_consistency controller checks if the package has the right values, if there are errors, ... $> php run.php --do = init_package --package = todolist // The init_package controller should populate the database with the tables related to the specified package. Open your browser, and in the localhost page you defined for eQual, add this : ?get = core_model_search \"core\" (the name of the package) is not necessary here. We simplified it, inside the eq.lib.php script, because we use this package quite a lot. Summary : ?get=model_search would also work. The query result is: \"errors\" : { \"MISSING_PARAM\" : \"entity\" } Remember that the entity is required. We will add an entity to the search: PATH core\\data\\model\\search.php URL ?get=model_search&entity=core\\User CLI $ ./equal.run --get=model_search --entity=core\\\\User DESCRIPTION Returns a list of identifiers of a given entity, according to given domain (filter), start offset, limit and order. Equal-framework does the work of reading ?get=model_search as /core/classes/User.class.php . It will display a JSON formatted answer showing an array with all the User identifiers. As easy as that. You now have a REST response that you can use in any frontend project. Actions Controllers \u00b6 Let's open /core/actions/model/create.php . Controller : <?php list ( $params , $providers ) = announce ([ 'description' => \"Create a new object using given fields values.\" , 'response' => [ 'content-type' => 'application/json' , 'charset' => 'UTF-8' , 'accept-origin' => '*' ], 'params' => [ 'entity' => [ 'description' => 'Full name (including namespace) of the class to return (e.g. \\'core\\\\User\\').' , 'type' => 'string' , 'required' => true ], 'fields' => [ 'description' => 'Associative array mapping fields to their related values.' , 'type' => 'array' , 'default' => [] ], 'lang' => [ 'description ' => 'Specific language for multilang field.' , 'type' => 'string' , 'default' => DEFAULT_LANG ] ], 'providers' => [ 'context' , 'orm' , 'adapt' ] ]); list ( $context , $orm , $adapter ) = [ $providers [ 'context' ], $providers [ 'orm' ], $providers [ 'adapt' ]]; // fields and values have been received as a raw array : // adapt received values according to schema $entity = $orm -> getModel ( $params [ 'entity' ]); if ( ! $entity ) { throw new Exception ( \"unknown_entity\" , QN_ERROR_INVALID_PARAM ); } $schema = $entity -> getSchema (); foreach ( $params [ 'fields' ] as $field => $value ) { // drop empty and unknown fields if ( is_null ( $value ) || ! isset ( $schema [ $field ])) { unset ( $params [ 'fields' ][ $field ]); continue ; } $params [ 'fields' ][ $field ] = $adapter -> adapt ( $value , $schema [ $field ][ 'type' ]); } // fields for which no value has been given are set to default value (set in Model) $instance = $params [ 'entity' ] :: create ( $params [ 'fields' ], $params [ 'lang' ]) -> adapt ( 'txt' ) -> first (); $result = [ 'entity' => $params [ 'entity' ], 'id' => $instance [ 'id' ] ]; $context -> httpResponse () -> status ( 201 ) -> body ( $result ) -> send (); What it does : \u00b6 params defines the requirements we need, the field requirement allows us to give properties to the object we want to create. $params['entity'] is then used with the ::create() method to initiate a POST request and create a new object, following the $params given adapt('txt') turns the data into strings Finally, we use $context to send it and get a REST response Using DO in your browser \u00b6 If we type in the browser : ?do=model_create&entity=core\\User&fields[login]=vygern8@gmail.com &fields[password]=test3333 The login and the password are required from the User class ( 'core/classes/User.class.php' ) Equal-framework does the work of reading ?do=model_create as /core/actions/model/create.php Congrats, you created a new User ! APPS Controllers \u00b6 Let's open /core/apps/model/controllers.php . <?php list ( $params , $providers ) = announce ([ 'description' => 'UI for browsing controllers and their definition amongst packages' , 'params' => [ 'package' => [ 'type' => 'string' , 'required' => true ] ], 'response' => [ 'content-type' => 'text/html' , 'charset' => 'UTF-8' ], 'constants' => [], 'providers' => [ 'context' ] ]); + A LOT OF JS This controller adds html through javascript and gives it to the context , that will send it and get a response. Using SHOW in your browser \u00b6 If we type in the browser : ?show=model_controllers&package=core The Response : The response has the form of an APP/UI , where we can browse controllers and their definition amongst packages. It's very usefull to have a quick overview. You know all the basics of controllers, good luck !","title":"Basic Controller"},{"location":"howtos-and-examples/basic-controller/#controllers","text":"The controllers are usually seperated in three different directories: \"Data, Actions, Apps\" . In the folder Data, we will be Fetching the data, method GET . Example : /core/data/model/search.php . The controller \"Search\" => \"Returns a list of identifiers of a given entity, according to given domain (filter), start offset, limit and order.\" In the folder Actions, we will be modifying the data, method DO (Post, Put, Delete) . Example : /core/actions/model/create.php . The controller \"Create\" => \"Create a new object using given fields values.\" In Apps, we will be showing an APP/UI , with different types of content. Example : /core/apps/model/controllers.php . The controller \"Controllers\" => \"UI for browsing controllers and their definition amongst packages.\" Let's go a bit more into details... You can also check out rest-api for more info.","title":"Controllers"},{"location":"howtos-and-examples/basic-controller/#data-controllers","text":"We will use the above example, to make it easier. Let's open /core/data/model/search.php . <?php list ( $params , $providers ) = announce ([ 'description' => 'Returns a list of identifiers of a given entity, according to given domain (filter), start offset, limit and order.' , 'response' => [ // defines the format of the server response 'content-type' => 'application/json' , 'charset' => 'UTF-8' , 'accept-origin' => '*' , 'cacheable' => false ], 'params' => [ // gives additional requirements and conditions 'entity' => [ 'description' => 'Full name (including namespace) of the class to look into (e.g. \\'core\\\\User\\').' , 'type' => 'string' , 'required' => true // Means that the entity Condition/Requirement is necessary for // the request to go through ], 'domain' => [ 'description' => 'Criterias that results have to match (serie of conjunctions)' , 'type' => 'array' , 'default' => [] ], 'order' => [ 'description' => 'Column to use for sorting results.' , 'type' => 'string' , 'default' => 'id' ], 'sort' => [ 'description' => 'The direction (i.e. \\'asc\\' or \\'desc\\').' , 'type' => 'string' , 'default' => 'asc' ], 'start' => [ 'description' => 'The row from which results have to start.' , 'type' => 'integer' , 'default' => 0 ], 'limit' => [ 'description' => 'The maximum number of results.' , 'type' => 'integer' , 'default' => - 1 ] ], 'response' => [ 'content-type' => 'application/json' , 'charset' => 'utf-8' , 'accept-origin' => '*' ], 'providers' => [ 'context' ] // helps us to access useful services such as context, orm, auth ]); list ( $context ) = [ $providers [ 'context' ] ]; if ( ! class_exists ( $params [ 'entity' ])) { throw new Exception ( \"unknown_entity\" , QN_ERROR_UNKNOWN_OBJECT ); } $collection = $params [ 'entity' ] :: search ( $params [ 'domain' ], [ 'sort' => [ $params [ 'order' ] => $params [ 'sort' ]] ]); $total = count ( $collection -> ids ()); $result = $collection -> shift ( $params [ 'start' ]) -> limit ( $params [ 'limit' ]) -> ids (); $context -> httpResponse () -> header ( 'X-Total-Count' , $total ) -> body ( $result ) -> send (); What it does : announce() will handle the values of our query : description tells what the controller does params gives additional requirements and conditions response defines the format of the server response providers helps us to access useful services such as context , orm , auth","title":"DATA Controllers"},{"location":"howtos-and-examples/basic-controller/#about-providers","text":"We use list($context) = [$providers['context']] to implement the services we want to use. In the above example ( search controller ) the $collection variable is where we receive the data from our query : $params['entity']::search([$params]) searchs for data associated with a specific Entity or Class and that matches the params given Example: If we use the entity User , we will do a research amongst all the Users from our database. If we don't use any requirements/conditions, we will have a list with all the users. Finally, $context is used to accomplish REST's purpose, displaying the data on our browser as JSON <?php $context -> httpResponse () // get the HTTP response being built -> body ( $result ) // populate the body with resulting result -> send (); // output the response (i.e. some plain text // @see https://www.w3.org/Protocols/rfc2616)","title":"About Providers"},{"location":"howtos-and-examples/basic-controller/#using-get-in-your-browser","text":"We'll assume we already have an existing database containing a data sample of tasks, and have already done the following : $> php run.php --do = test_package-consistency --package = todolist // The test_package_consistency controller checks if the package has the right values, if there are errors, ... $> php run.php --do = init_package --package = todolist // The init_package controller should populate the database with the tables related to the specified package. Open your browser, and in the localhost page you defined for eQual, add this : ?get = core_model_search \"core\" (the name of the package) is not necessary here. We simplified it, inside the eq.lib.php script, because we use this package quite a lot. Summary : ?get=model_search would also work. The query result is: \"errors\" : { \"MISSING_PARAM\" : \"entity\" } Remember that the entity is required. We will add an entity to the search: PATH core\\data\\model\\search.php URL ?get=model_search&entity=core\\User CLI $ ./equal.run --get=model_search --entity=core\\\\User DESCRIPTION Returns a list of identifiers of a given entity, according to given domain (filter), start offset, limit and order. Equal-framework does the work of reading ?get=model_search as /core/classes/User.class.php . It will display a JSON formatted answer showing an array with all the User identifiers. As easy as that. You now have a REST response that you can use in any frontend project.","title":"Using GET in your browser"},{"location":"howtos-and-examples/basic-controller/#actions-controllers","text":"Let's open /core/actions/model/create.php . Controller : <?php list ( $params , $providers ) = announce ([ 'description' => \"Create a new object using given fields values.\" , 'response' => [ 'content-type' => 'application/json' , 'charset' => 'UTF-8' , 'accept-origin' => '*' ], 'params' => [ 'entity' => [ 'description' => 'Full name (including namespace) of the class to return (e.g. \\'core\\\\User\\').' , 'type' => 'string' , 'required' => true ], 'fields' => [ 'description' => 'Associative array mapping fields to their related values.' , 'type' => 'array' , 'default' => [] ], 'lang' => [ 'description ' => 'Specific language for multilang field.' , 'type' => 'string' , 'default' => DEFAULT_LANG ] ], 'providers' => [ 'context' , 'orm' , 'adapt' ] ]); list ( $context , $orm , $adapter ) = [ $providers [ 'context' ], $providers [ 'orm' ], $providers [ 'adapt' ]]; // fields and values have been received as a raw array : // adapt received values according to schema $entity = $orm -> getModel ( $params [ 'entity' ]); if ( ! $entity ) { throw new Exception ( \"unknown_entity\" , QN_ERROR_INVALID_PARAM ); } $schema = $entity -> getSchema (); foreach ( $params [ 'fields' ] as $field => $value ) { // drop empty and unknown fields if ( is_null ( $value ) || ! isset ( $schema [ $field ])) { unset ( $params [ 'fields' ][ $field ]); continue ; } $params [ 'fields' ][ $field ] = $adapter -> adapt ( $value , $schema [ $field ][ 'type' ]); } // fields for which no value has been given are set to default value (set in Model) $instance = $params [ 'entity' ] :: create ( $params [ 'fields' ], $params [ 'lang' ]) -> adapt ( 'txt' ) -> first (); $result = [ 'entity' => $params [ 'entity' ], 'id' => $instance [ 'id' ] ]; $context -> httpResponse () -> status ( 201 ) -> body ( $result ) -> send ();","title":"Actions Controllers"},{"location":"howtos-and-examples/basic-controller/#what-it-does","text":"params defines the requirements we need, the field requirement allows us to give properties to the object we want to create. $params['entity'] is then used with the ::create() method to initiate a POST request and create a new object, following the $params given adapt('txt') turns the data into strings Finally, we use $context to send it and get a REST response","title":"What it does :"},{"location":"howtos-and-examples/basic-controller/#using-do-in-your-browser","text":"If we type in the browser : ?do=model_create&entity=core\\User&fields[login]=vygern8@gmail.com &fields[password]=test3333 The login and the password are required from the User class ( 'core/classes/User.class.php' ) Equal-framework does the work of reading ?do=model_create as /core/actions/model/create.php Congrats, you created a new User !","title":"Using DO in your browser"},{"location":"howtos-and-examples/basic-controller/#apps-controllers","text":"Let's open /core/apps/model/controllers.php . <?php list ( $params , $providers ) = announce ([ 'description' => 'UI for browsing controllers and their definition amongst packages' , 'params' => [ 'package' => [ 'type' => 'string' , 'required' => true ] ], 'response' => [ 'content-type' => 'text/html' , 'charset' => 'UTF-8' ], 'constants' => [], 'providers' => [ 'context' ] ]); + A LOT OF JS This controller adds html through javascript and gives it to the context , that will send it and get a response.","title":"APPS Controllers"},{"location":"howtos-and-examples/basic-controller/#using-show-in-your-browser","text":"If we type in the browser : ?show=model_controllers&package=core The Response : The response has the form of an APP/UI , where we can browse controllers and their definition amongst packages. It's very usefull to have a quick overview. You know all the basics of controllers, good luck !","title":"Using SHOW in your browser"},{"location":"howtos-and-examples/basic-webapp/","text":"A basic WebApp \u00b6 Learning by example how to create a web application with eQual. This tutorial details the required steps for creating a webapp from scratch using eQual. As sample webapp, we are going to build a basic blog. Install equal \u00b6 For installation notes, see Installation in the \"Getting started\" section. 1. Create a new package \u00b6 (Estimated time : 1 minute) This part is quite easy: in the packages folder, we create a new folder named \"blog\". In addition, inside this new folder, let's create the following subfolders (as they are mandatory): \"classes\" and \"views\". Tree structure is now: / /packages /blog /classes /views 2. Write some classes \u00b6 (Estimated time : 3 minutes) Now, we need to create a new kind of object. Let's call it \"post\". Each post consists of a title and some text (content). So,in the folder packages/blog/classes , we add a new file named Post.class.php . <?php namespace blog ; class Post extends \\core\\Object { public static function getColumns () { return [ 'title' => array ( 'type' => 'string' ), 'content' => array ( 'type' => 'text' ) ]; } } In addition, we want to be able to retrieve the name of the author of the post. The special field creator gives us the id of the user ( core\\User ) who created the post, but we would like to be able to display author's name without having to perform additional requests. In order to do so, we add an author field, defined like this: <?php 'author' => array ( 'type' => 'function' , 'result_type' => 'string' , 'store' => true , 'function' => 'blog\\Post::getAuthor' ) As well as the method allowing to retrieve the name of the given user id: <?php public static function getAuthor ( $om , $uid , $oid , $lang ) { $author = '' ; $res = $om -> browse ( $uid , 'blog\\Post' , array ( $oid ), array ( 'creator' ), $lang ); if ( is_array ( $res )) { $user_id = $res [ $oid ][ 'creator' ]; $res = $om -> browse ( $uid , 'core\\User' , array ( $user_id ), array ( 'firstname' , 'lastname' ), $lang ); } if ( is_array ( $res )) $author = $res [ $user_id ][ 'firstname' ] . ' ' . $res [ $user_id ][ 'lastname' ]; return $author ; } Finally, our file looks like this: <?php namespace blog ; class Post extends \\core\\Object { public static function getColumns () { return array ( 'title' => array ( 'type' => 'string' ), 'content' => array ( 'type' => 'text' ), 'author' => array ( 'type' => 'function' , 'result_type' => 'string' , 'store' => true , 'function' => 'blog\\Post::getAuthor' ) ); } public static function getAuthor ( $om , $uid , $oid , $lang ) { $author = '' ; $res = $om -> browse ( $uid , 'blog\\Post' , array ( $oid ), array ( 'creator' ), $lang ); if ( is_array ( $res )) { $user_id = $res [ $oid ][ 'creator' ]; $res = $om -> browse ( $uid , 'core\\User' , array ( $user_id ), array ( 'firstname' , 'lastname' ), $lang ); } if ( is_array ( $res )) $author = $res [ $user_id ][ 'firstname' ] . ' ' . $res [ $user_id ][ 'lastname' ]; return $author ; } } Tree structure is now: / /packages /blog /classes Post.class.php /views 3. Create related DB tables \u00b6 (Estimated time : 2 minutes) Open your internet browser and go to the core_utils application. For instance, http:`localhost/equal/index.php?show=core_utils. If you are getting confused, read the HTTP native section. Now, among the packages list, select the newly created blog package, then choose the sql-schema plugin and click 'ok'. In the right panel, you should see the following SQL code : CREATE TABLE IF NOT EXISTS ` blog_post ` ( ` id ` int ( 11 ) NOT NULL AUTO_INCREMENT , ` created ` datetime DEFAULT NULL , ` modified ` datetime DEFAULT NULL , ` creator ` int ( 11 ) NOT NULL DEFAULT '0' , ` modifier ` int ( 11 ) NOT NULL DEFAULT '0' , ` published ` tinyint ( 4 ) NOT NULL DEFAULT '0' , ` deleted ` tinyint ( 4 ) NOT NULL DEFAULT '0' , ` title ` varchar ( 255 ), ` content ` mediumtext , ` author ` mediumtext DEFAULT NULL , PRIMARY KEY ( ` id ` ) ) DEFAULT CHARSET = utf8 ; You may now copy/paste this code in order to create a new table with your favorite SQL GUI manager (phpMyAdmin, workbench, ...) 4. Create views \u00b6 (Estimated time : 1 minute) In the packages/blog/views , create two new files: 1. Post.form.default.html \u00b6 < form action = \"core_objects_update\" > < div > < span width = \"100%\" > < label for = \"title\" ></ label >< var id = \"title\" required = \"true\" ></ var > </ span > < div > < fieldset title = \"details\" > < div > < section name = \"content\" > < var id = \"content\" ></ var > </ section > </ div > </ fieldset > </ div > </ div > </ form > 2. Post.list.default.html \u00b6 < ul > < li id = \"title\" width = \"55%\" ></ li > < li id = \"author\" width = \"25%\" ></ li > < li id = \"created\" width = \"20%\" ></ li > </ ul > Tree structure is now: / /packages /blog /classes Post.class.php /views Post.form.default.html Post.list.default.html 5. Create some sample objects \u00b6 (Estimated time : 1 minute) Open your internet browser and go to the core_manage application. ''For instance: http:`equal.local/index.php?show=core_manage'' Among packages list, select the blog package, then click on the Post class. On the right panel, click on the 'create new' button. Choose a title and a content for this new post For instance: Title : About this blog Content: Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Morbi vel erat non mauris convallis vehicula. Nulla et sapien. Integer tortor tellus, aliquam faucibus, convallis id, congue eu, quam. Mauris ullamcorper felis vitae erat. Proin feugiat, augue non elementum posuere, metus purus iaculis lectus, et tristique ligula justo vitae magna. 6. Create an application \u00b6 (Estimated time : 2 minutes) 1. Template \u00b6 To display some nice html, we need a template. Let's adapt one from a WP template designer. Let's pick one from diovo.com : http:`www.diovo.com/links/voidy/ We create a new folder packages/blog/html/css and copy img folder and style.css into it. In packages/blog/html we put the adapted template below. Note that we added two var tags in order to display the template dynamically (based on the post_id parameter from the URL): and <!DOCTYPE html> < html > < head > < meta http-equiv = \"content-type\" content = \"text/html; charset=UTF-8\" > < meta charset = \"UTF-8\" > < title > my blog </ title > < link media = \"all\" rel = \"stylesheet\" type = \"text/css\" href = \"packages/blog/html/css/style.css\" /> </ head > < body > < div id = \"body\" > < div id = \"header\" > < div id = \"logo\" > < div id = \"h1\" >< a href = \"#\" > Yet another easy blog </ a ></ div > < div id = \"h2\" style = \"font-style: italic;\" > powered by equal </ div > </ div > < div id = \"header-icons\" ></ div > < div id = \"menu\" > < div class = \"menu-bottom\" > < ul >< li class = \"page_item\" >< a href = \"#\" > contact </ a ></ li ></ ul > < div class = \"spacer\" style = \"clear: both;\" ></ div > </ div > </ div > </ div > < div id = \"main\" > < div id = \"content\" > < div class = \"post type-post format-standard\" > < var id = \"content\" ></ var > </ div > </ div > < div id = \"sidebar1\" class = \"sidecol\" > < ul > < li > < p style = \"font-style: italic; font-family: Georgia,serif;\" > This blog is run by a hand-made webapp developed in minutes thanks to equal. </ p > </ li > < li class = \"widget recent\" > < h2 class = \"widgettitle\" > Latest articles </ h2 > < ul >< var id = \"recent_posts\" ></ var ></ ul > </ li > </ ul > </ div > < div style = \"clear:both\" ></ div > </ div > < div id = \"footer\" > < p > < a title = \"equal\" href = \"http:`equal.cedricfrancoys.be/\" > Powered by equal </ a > &nbsp;&nbsp;&nbsp; | &nbsp;&nbsp;&nbsp; < a title = \"Diovo\" href = \"http:`www.diovo.com/links/voidy/\" > Theme by Niyaz </ a > </ p > </ div > </ div > </ body > </ html > 2. Script \u00b6 Finally, let's create a folder packages/blog/apps inside wich we put a file named display.php containing the code below. <?php // the dispatcher (index.php) is in charge of setting the context and should include the equal library defined ( '__equal_LIB' ) or die ( __FILE__ . ' cannot be executed directly.' ); // we'll need to format some dates load_class ( 'utils/DateFormatter' ); // get the value of the post_id parameter (set it to 1 if not present), and put it in the $params array $params = get_params ( array ( 'post_id' => 1 )); /* * A small html parser that replaces 'var' tags with their associated content. * * @param string $template the full html code of a page, containing var tags to be replaced by content * @param function $decorator the function to use in order to return html code matching a var tag */ function decorate_template ( $template , $decorator ) { $previous_pos = 0 ; $html = '' ; // use regular expression to locate all 'var' tags in the template preg_match_all ( \"/<var([^>]*)>.*<\\/var>/iU\" , $template , $matches , PREG_OFFSET_CAPTURE ); // replace 'var' tags with their associated content for ( $i = 0 , $j = count ( $matches [ 1 ]); $i < $j ; ++ $i ) { // 1) get tag attributes $attributes = array (); $args = explode ( ' ' , ltrim ( $matches [ 1 ][ $i ][ 0 ])); foreach ( $args as $arg ) { if ( ! strlen ( $arg )) continue ; list ( $attribute , $value ) = explode ( '=' , $arg ); $attributes [ $attribute ] = str_replace ( '\"' , '' , $value ); } // 2) get content pointed by var tag, replace tag with content and build resulting html $pos = $matches [ 0 ][ $i ][ 1 ]; $len = strlen ( $matches [ 0 ][ $i ][ 0 ]); $html .= substr ( $template , $previous_pos , ( $pos - $previous_pos )) . $decorator ( $attributes ); $previous_pos = $pos + $len ; } // add trailer $html .= substr ( $template , $previous_pos ); return $html ; } /** * Returns html part specified by $attributes (from a 'var' tag) and associated with current post id * (here come the calls to equal API) * * @param array $attributes */ $get_html = function ( $attributes ) { global $params ; $html = '' ; switch ( $attributes [ 'id' ]) { case 'content' : if ( is_int ( $post_values = & browse ( 'blog\\Post' , array ( $params [ 'post_id' ]), array ( 'id' , 'created' , 'title' , 'content' )))) break ; $title = $post_values [ $params [ 'post_id' ]][ 'title' ]; $content = $post_values [ $params [ 'post_id' ]][ 'content' ]; $dateFormatter = new DateFormatter (); $dateFormatter -> setDate ( $post_values [ $params [ 'post_id' ]][ 'created' ], DATE_TIME_SQL ); $date = ucfirst ( strftime ( \"%A %d %B %Y\" , $dateFormatter -> getTimestamp ())); $html = \" <h2 class= \\\" title \\\" > $title </h2> <div class= \\\" meta \\\" ><p> $date </p></div> <div class= \\\" entry \\\" > $content </div> \" ; break ; case 'recent_posts' : $ids = search ( 'blog\\Post' , array ( array ( array ())), 'created' , 'desc' , 0 , 5 ); $recent_values = & browse ( 'blog\\Post' , $ids , array ( 'id' , 'title' )); foreach ( $recent_values as $values ) { $title = $values [ 'title' ]; $id = $values [ 'id' ]; $html .= \"<li><a href= \\\" index.php?show=blog_display&post_id= { $id } \\\" > $title </a></li>\" ; } break ; } return $html ; }; ` if we got the post_id and if the template file can be found , read the template and decorate it with current post values if ( ! is_null ( $params [ 'post_id' ]) && file_exists ( 'packages/blog/html/template.html' )) print ( decorate_template ( file_get_contents ( 'packages/blog/html/template.html' ), $get_html )); Tree structure is now : / /packages /blog /apps display.php /classes Post.class.php /html /css /img style.css template.html /views Post.form.default.html Post.list.default.html To access your newly created blog, open your browser and request the blog_display application. URL example : http://equal.local/equal/?show=blog_display Remember that post_id will be set to 1 by default. To display another blog entry, you'll have to specify the related post_id in the URL. Another URL example could be : http://equal.local/equal/?show=blog_display&post_id=2","title":"Basic WebApp"},{"location":"howtos-and-examples/basic-webapp/#a-basic-webapp","text":"Learning by example how to create a web application with eQual. This tutorial details the required steps for creating a webapp from scratch using eQual. As sample webapp, we are going to build a basic blog.","title":"A basic WebApp"},{"location":"howtos-and-examples/basic-webapp/#install-equal","text":"For installation notes, see Installation in the \"Getting started\" section.","title":"Install equal"},{"location":"howtos-and-examples/basic-webapp/#1-create-a-new-package","text":"(Estimated time : 1 minute) This part is quite easy: in the packages folder, we create a new folder named \"blog\". In addition, inside this new folder, let's create the following subfolders (as they are mandatory): \"classes\" and \"views\". Tree structure is now: / /packages /blog /classes /views","title":"1. Create a new package"},{"location":"howtos-and-examples/basic-webapp/#2-write-some-classes","text":"(Estimated time : 3 minutes) Now, we need to create a new kind of object. Let's call it \"post\". Each post consists of a title and some text (content). So,in the folder packages/blog/classes , we add a new file named Post.class.php . <?php namespace blog ; class Post extends \\core\\Object { public static function getColumns () { return [ 'title' => array ( 'type' => 'string' ), 'content' => array ( 'type' => 'text' ) ]; } } In addition, we want to be able to retrieve the name of the author of the post. The special field creator gives us the id of the user ( core\\User ) who created the post, but we would like to be able to display author's name without having to perform additional requests. In order to do so, we add an author field, defined like this: <?php 'author' => array ( 'type' => 'function' , 'result_type' => 'string' , 'store' => true , 'function' => 'blog\\Post::getAuthor' ) As well as the method allowing to retrieve the name of the given user id: <?php public static function getAuthor ( $om , $uid , $oid , $lang ) { $author = '' ; $res = $om -> browse ( $uid , 'blog\\Post' , array ( $oid ), array ( 'creator' ), $lang ); if ( is_array ( $res )) { $user_id = $res [ $oid ][ 'creator' ]; $res = $om -> browse ( $uid , 'core\\User' , array ( $user_id ), array ( 'firstname' , 'lastname' ), $lang ); } if ( is_array ( $res )) $author = $res [ $user_id ][ 'firstname' ] . ' ' . $res [ $user_id ][ 'lastname' ]; return $author ; } Finally, our file looks like this: <?php namespace blog ; class Post extends \\core\\Object { public static function getColumns () { return array ( 'title' => array ( 'type' => 'string' ), 'content' => array ( 'type' => 'text' ), 'author' => array ( 'type' => 'function' , 'result_type' => 'string' , 'store' => true , 'function' => 'blog\\Post::getAuthor' ) ); } public static function getAuthor ( $om , $uid , $oid , $lang ) { $author = '' ; $res = $om -> browse ( $uid , 'blog\\Post' , array ( $oid ), array ( 'creator' ), $lang ); if ( is_array ( $res )) { $user_id = $res [ $oid ][ 'creator' ]; $res = $om -> browse ( $uid , 'core\\User' , array ( $user_id ), array ( 'firstname' , 'lastname' ), $lang ); } if ( is_array ( $res )) $author = $res [ $user_id ][ 'firstname' ] . ' ' . $res [ $user_id ][ 'lastname' ]; return $author ; } } Tree structure is now: / /packages /blog /classes Post.class.php /views","title":"2. Write some classes"},{"location":"howtos-and-examples/basic-webapp/#3-create-related-db-tables","text":"(Estimated time : 2 minutes) Open your internet browser and go to the core_utils application. For instance, http:`localhost/equal/index.php?show=core_utils. If you are getting confused, read the HTTP native section. Now, among the packages list, select the newly created blog package, then choose the sql-schema plugin and click 'ok'. In the right panel, you should see the following SQL code : CREATE TABLE IF NOT EXISTS ` blog_post ` ( ` id ` int ( 11 ) NOT NULL AUTO_INCREMENT , ` created ` datetime DEFAULT NULL , ` modified ` datetime DEFAULT NULL , ` creator ` int ( 11 ) NOT NULL DEFAULT '0' , ` modifier ` int ( 11 ) NOT NULL DEFAULT '0' , ` published ` tinyint ( 4 ) NOT NULL DEFAULT '0' , ` deleted ` tinyint ( 4 ) NOT NULL DEFAULT '0' , ` title ` varchar ( 255 ), ` content ` mediumtext , ` author ` mediumtext DEFAULT NULL , PRIMARY KEY ( ` id ` ) ) DEFAULT CHARSET = utf8 ; You may now copy/paste this code in order to create a new table with your favorite SQL GUI manager (phpMyAdmin, workbench, ...)","title":"3. Create related DB tables"},{"location":"howtos-and-examples/basic-webapp/#4-create-views","text":"(Estimated time : 1 minute) In the packages/blog/views , create two new files:","title":"4. Create views"},{"location":"howtos-and-examples/basic-webapp/#1-postformdefaulthtml","text":"< form action = \"core_objects_update\" > < div > < span width = \"100%\" > < label for = \"title\" ></ label >< var id = \"title\" required = \"true\" ></ var > </ span > < div > < fieldset title = \"details\" > < div > < section name = \"content\" > < var id = \"content\" ></ var > </ section > </ div > </ fieldset > </ div > </ div > </ form >","title":"1. Post.form.default.html"},{"location":"howtos-and-examples/basic-webapp/#2-postlistdefaulthtml","text":"< ul > < li id = \"title\" width = \"55%\" ></ li > < li id = \"author\" width = \"25%\" ></ li > < li id = \"created\" width = \"20%\" ></ li > </ ul > Tree structure is now: / /packages /blog /classes Post.class.php /views Post.form.default.html Post.list.default.html","title":"2. Post.list.default.html"},{"location":"howtos-and-examples/basic-webapp/#5-create-some-sample-objects","text":"(Estimated time : 1 minute) Open your internet browser and go to the core_manage application. ''For instance: http:`equal.local/index.php?show=core_manage'' Among packages list, select the blog package, then click on the Post class. On the right panel, click on the 'create new' button. Choose a title and a content for this new post For instance: Title : About this blog Content: Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Morbi vel erat non mauris convallis vehicula. Nulla et sapien. Integer tortor tellus, aliquam faucibus, convallis id, congue eu, quam. Mauris ullamcorper felis vitae erat. Proin feugiat, augue non elementum posuere, metus purus iaculis lectus, et tristique ligula justo vitae magna.","title":"5. Create some sample objects"},{"location":"howtos-and-examples/basic-webapp/#6-create-an-application","text":"(Estimated time : 2 minutes)","title":"6. Create an application"},{"location":"howtos-and-examples/basic-webapp/#1-template","text":"To display some nice html, we need a template. Let's adapt one from a WP template designer. Let's pick one from diovo.com : http:`www.diovo.com/links/voidy/ We create a new folder packages/blog/html/css and copy img folder and style.css into it. In packages/blog/html we put the adapted template below. Note that we added two var tags in order to display the template dynamically (based on the post_id parameter from the URL): and <!DOCTYPE html> < html > < head > < meta http-equiv = \"content-type\" content = \"text/html; charset=UTF-8\" > < meta charset = \"UTF-8\" > < title > my blog </ title > < link media = \"all\" rel = \"stylesheet\" type = \"text/css\" href = \"packages/blog/html/css/style.css\" /> </ head > < body > < div id = \"body\" > < div id = \"header\" > < div id = \"logo\" > < div id = \"h1\" >< a href = \"#\" > Yet another easy blog </ a ></ div > < div id = \"h2\" style = \"font-style: italic;\" > powered by equal </ div > </ div > < div id = \"header-icons\" ></ div > < div id = \"menu\" > < div class = \"menu-bottom\" > < ul >< li class = \"page_item\" >< a href = \"#\" > contact </ a ></ li ></ ul > < div class = \"spacer\" style = \"clear: both;\" ></ div > </ div > </ div > </ div > < div id = \"main\" > < div id = \"content\" > < div class = \"post type-post format-standard\" > < var id = \"content\" ></ var > </ div > </ div > < div id = \"sidebar1\" class = \"sidecol\" > < ul > < li > < p style = \"font-style: italic; font-family: Georgia,serif;\" > This blog is run by a hand-made webapp developed in minutes thanks to equal. </ p > </ li > < li class = \"widget recent\" > < h2 class = \"widgettitle\" > Latest articles </ h2 > < ul >< var id = \"recent_posts\" ></ var ></ ul > </ li > </ ul > </ div > < div style = \"clear:both\" ></ div > </ div > < div id = \"footer\" > < p > < a title = \"equal\" href = \"http:`equal.cedricfrancoys.be/\" > Powered by equal </ a > &nbsp;&nbsp;&nbsp; | &nbsp;&nbsp;&nbsp; < a title = \"Diovo\" href = \"http:`www.diovo.com/links/voidy/\" > Theme by Niyaz </ a > </ p > </ div > </ div > </ body > </ html >","title":"1. Template"},{"location":"howtos-and-examples/basic-webapp/#2-script","text":"Finally, let's create a folder packages/blog/apps inside wich we put a file named display.php containing the code below. <?php // the dispatcher (index.php) is in charge of setting the context and should include the equal library defined ( '__equal_LIB' ) or die ( __FILE__ . ' cannot be executed directly.' ); // we'll need to format some dates load_class ( 'utils/DateFormatter' ); // get the value of the post_id parameter (set it to 1 if not present), and put it in the $params array $params = get_params ( array ( 'post_id' => 1 )); /* * A small html parser that replaces 'var' tags with their associated content. * * @param string $template the full html code of a page, containing var tags to be replaced by content * @param function $decorator the function to use in order to return html code matching a var tag */ function decorate_template ( $template , $decorator ) { $previous_pos = 0 ; $html = '' ; // use regular expression to locate all 'var' tags in the template preg_match_all ( \"/<var([^>]*)>.*<\\/var>/iU\" , $template , $matches , PREG_OFFSET_CAPTURE ); // replace 'var' tags with their associated content for ( $i = 0 , $j = count ( $matches [ 1 ]); $i < $j ; ++ $i ) { // 1) get tag attributes $attributes = array (); $args = explode ( ' ' , ltrim ( $matches [ 1 ][ $i ][ 0 ])); foreach ( $args as $arg ) { if ( ! strlen ( $arg )) continue ; list ( $attribute , $value ) = explode ( '=' , $arg ); $attributes [ $attribute ] = str_replace ( '\"' , '' , $value ); } // 2) get content pointed by var tag, replace tag with content and build resulting html $pos = $matches [ 0 ][ $i ][ 1 ]; $len = strlen ( $matches [ 0 ][ $i ][ 0 ]); $html .= substr ( $template , $previous_pos , ( $pos - $previous_pos )) . $decorator ( $attributes ); $previous_pos = $pos + $len ; } // add trailer $html .= substr ( $template , $previous_pos ); return $html ; } /** * Returns html part specified by $attributes (from a 'var' tag) and associated with current post id * (here come the calls to equal API) * * @param array $attributes */ $get_html = function ( $attributes ) { global $params ; $html = '' ; switch ( $attributes [ 'id' ]) { case 'content' : if ( is_int ( $post_values = & browse ( 'blog\\Post' , array ( $params [ 'post_id' ]), array ( 'id' , 'created' , 'title' , 'content' )))) break ; $title = $post_values [ $params [ 'post_id' ]][ 'title' ]; $content = $post_values [ $params [ 'post_id' ]][ 'content' ]; $dateFormatter = new DateFormatter (); $dateFormatter -> setDate ( $post_values [ $params [ 'post_id' ]][ 'created' ], DATE_TIME_SQL ); $date = ucfirst ( strftime ( \"%A %d %B %Y\" , $dateFormatter -> getTimestamp ())); $html = \" <h2 class= \\\" title \\\" > $title </h2> <div class= \\\" meta \\\" ><p> $date </p></div> <div class= \\\" entry \\\" > $content </div> \" ; break ; case 'recent_posts' : $ids = search ( 'blog\\Post' , array ( array ( array ())), 'created' , 'desc' , 0 , 5 ); $recent_values = & browse ( 'blog\\Post' , $ids , array ( 'id' , 'title' )); foreach ( $recent_values as $values ) { $title = $values [ 'title' ]; $id = $values [ 'id' ]; $html .= \"<li><a href= \\\" index.php?show=blog_display&post_id= { $id } \\\" > $title </a></li>\" ; } break ; } return $html ; }; ` if we got the post_id and if the template file can be found , read the template and decorate it with current post values if ( ! is_null ( $params [ 'post_id' ]) && file_exists ( 'packages/blog/html/template.html' )) print ( decorate_template ( file_get_contents ( 'packages/blog/html/template.html' ), $get_html )); Tree structure is now : / /packages /blog /apps display.php /classes Post.class.php /html /css /img style.css template.html /views Post.form.default.html Post.list.default.html To access your newly created blog, open your browser and request the blog_display application. URL example : http://equal.local/equal/?show=blog_display Remember that post_id will be set to 1 by default. To display another blog entry, you'll have to specify the related post_id in the URL. Another URL example could be : http://equal.local/equal/?show=blog_display&post_id=2","title":"2. Script"},{"location":"howtos-and-examples/generic-cheat-sheet/","text":"Generic cheat-sheet \u00b6 This section presents common questions along with some relevant examples. eQual Apps \u00b6 Console \u00b6 http://equal.local/console.php Workbench \u00b6 http://equal.local/workbench CLI commands \u00b6 Should be located at the root of eQual (folder containing file run.php ) Grant DB rights \u00b6 Available rights: create read update delete manage You can grant one right for one entity at a time: ./equal.run --do = group_grant --group = default --right = update --entity = \"core\\User\" Test package consistency \u00b6 This controller runs some consistency checks and works with any package: PATH core\\actions\\test\\package-consistency.php URL ?do=test_package-consistency&package=core CLI $ ./equal.run --do=test_package-consistency --package=core --level=warn DESCRIPTION Consistency checks between DB and class as well as syntax validation for classes (PHP), views and translation files (JSON). The level property has 3 options : 'error' (ex: missing property 'entity' in file: \"packages\\/lodging\\/views\\/sale\\booking\\InvoiceLine.form.default.json\" ) 'warn' (ex: WARN - I18 - Unknown field 'object_class' referenced in file \"packages\\/core\\/i18n\\/en\\/alert\\MessageModel.json\" * (error & warn). Initiate eQual core in DB \u00b6 PATH core\\actions\\init\\package.php URL ?do=init_package&package=core CLI $ ./equal.run --do=init_package --package=core DESCRIPTION Initialise database for given package. If no package is given, initialize core package. (this step is mandatory for every new installation) Initiate your package in DB \u00b6 PATH core\\actions\\init\\package.php URL ?do=init_package&package=myPackage CLI $ ./equal.run --do=init_package --package=myPackage DESCRIPTION Initialise database for given package. If no package is given, initialize core package. Initiate your package with initial data in DB \u00b6 PATH core\\actions\\init\\package.php URL ?do=init_package&package=myPackage&import=true CLI $ ./equal.run --do=init_package --package=myPackage --import=true DESCRIPTION Initialise database for given package. If no package is given, initialize core package. Run package test unit \u00b6 PATH core\\actions\\test\\package.php URL ?do=test_package&package=core CLI $ ./equal.run --do=test_package --package=core DESCRIPTION The controller checks the presence of test units for a given package and runs them, if any. (page : 'Testing' ). Invoking Controllers \u00b6 Data provider \u00b6 PATH /packages/mypackage/data/my-controller.php URL ?get=mypackage_my-controller CLI $ ./equal.run --get=model_collect --entity=\"mypackage\\MyClass\" PHP run('get', 'mypackage_MyClass') Collect is the name of the controller, and model the directory to which it belongs. Action handler \u00b6 PATH /packages/mypackage/actions/subdir/my-action.php URL ?do=mypackage_subdir_my-action](http://equal.local?do=mypackage_subdir_my-action CLI $ ./equal.run --do=model_update --entity=mypackage\\MyObject --fields=[ids]=1 --fields=[name]=example PHP run('do', 'mypackage_myobject_action', [/* parameters */]) Howtos \u00b6 How to create a new object? \u00b6 <?php use core\\User ; User :: create ([ 'firstname' => 'Bart' ]); // which is equivalent to User :: create () -> update ([ 'firstname' => 'Bart' ]); Note: When creating an object, by default, the state fields is assigned to 'instance', unless another value is given as parameter (ex. state=draft) How to check if a given object does exist? \u00b6 <?php // count the number of items returned by the search method if ( count ( search ( $object_class , array ( array ( array ( 'id' , '=' , $object_id )))))) { ... } How to browse all objects of a given class? \u00b6 <?php // note: ensure the specified class does actually exist $res = browse ( $object_class , search ( $object_class )); How to add a clause to every condition? \u00b6 <?php // example: add the (deleted = 1) clause to every condition for ( $i = 0 , $j = count ( $domain ); $i < $j ; ++ $i ) $domain [ $i ] = array_merge ( $domain [ $i ], array ( array ( 'deleted' , '=' , '1' ))); How to obtain output (json/html) from another script ? \u00b6 <?php // There are 2 possibilities : // either use a HTTP request load_class ( 'utils/HttpRequest' ); $request = new HttpRequest ( FClib :: get_url ( true , false ) . '?get=core_objects_list&object_class=School%5CTeacher&rp=20&page=1&sortname =id&sortorder=asc&domain%5B0%5D%5B0%5D%5B%5D=courses_ids&domain%5B0%5D%5B 0%5D%5B%5D=contains&domain%5B0%5D%5B0%5D%5B2%5D%5B%5D=1&fields%5B%5D=id& fields%5B%5D=firstname&fields%5B%5D=lastname' ); $json_data = $request -> get (); // or use PHP output buffering (to prevent scope collision, remember to // embed such code into a function) function get_include_contents ( $filename ) { ob_start (); include ( $filename ); // assuming parameters required by the script // being called are present in the current URL return ob_get_clean (); } $result = get_include_contents ( 'packages/core/data/objects/list.php' ); How to sort the result of the browse method (without calling search method)? \u00b6 <?php // $order is an array containing fields names on which we want the result // set sorted // $result is an array returned by a call to the browse method foreach ( $order as $ofield ) { uasort ( $result , function ( $a , $b ) use ( $ofield ){ if ( $a [ $ofield ] == $b [ $ofield ]) return 0 ; return ( $a [ $ofield ] < $b [ $ofield ]) ? - 1 : 1 ; }); } How to request fields from all sub-objects at once? \u00b6 <?php $pages_values = $orm -> read ( 'icway\\Page' , $pages_ids , array ( 'url_resolver_id' ), $lang ); $url_ids = array_map ( function ( $a ){ return $a [ 'url_resolver_id' ];}, $pages_values ); $url_values = $orm -> read ( 'core\\UrlResolver' , $url_ids , [ 'human_readable_url' ]);","title":"Generic Cheat Sheet"},{"location":"howtos-and-examples/generic-cheat-sheet/#generic-cheat-sheet","text":"This section presents common questions along with some relevant examples.","title":"Generic cheat-sheet"},{"location":"howtos-and-examples/generic-cheat-sheet/#equal-apps","text":"","title":"eQual Apps"},{"location":"howtos-and-examples/generic-cheat-sheet/#console","text":"http://equal.local/console.php","title":"Console"},{"location":"howtos-and-examples/generic-cheat-sheet/#workbench","text":"http://equal.local/workbench","title":"Workbench"},{"location":"howtos-and-examples/generic-cheat-sheet/#cli-commands","text":"Should be located at the root of eQual (folder containing file run.php )","title":"CLI commands"},{"location":"howtos-and-examples/generic-cheat-sheet/#grant-db-rights","text":"Available rights: create read update delete manage You can grant one right for one entity at a time: ./equal.run --do = group_grant --group = default --right = update --entity = \"core\\User\"","title":"Grant DB rights"},{"location":"howtos-and-examples/generic-cheat-sheet/#test-package-consistency","text":"This controller runs some consistency checks and works with any package: PATH core\\actions\\test\\package-consistency.php URL ?do=test_package-consistency&package=core CLI $ ./equal.run --do=test_package-consistency --package=core --level=warn DESCRIPTION Consistency checks between DB and class as well as syntax validation for classes (PHP), views and translation files (JSON). The level property has 3 options : 'error' (ex: missing property 'entity' in file: \"packages\\/lodging\\/views\\/sale\\booking\\InvoiceLine.form.default.json\" ) 'warn' (ex: WARN - I18 - Unknown field 'object_class' referenced in file \"packages\\/core\\/i18n\\/en\\/alert\\MessageModel.json\" * (error & warn).","title":"Test package consistency"},{"location":"howtos-and-examples/generic-cheat-sheet/#initiate-equal-core-in-db","text":"PATH core\\actions\\init\\package.php URL ?do=init_package&package=core CLI $ ./equal.run --do=init_package --package=core DESCRIPTION Initialise database for given package. If no package is given, initialize core package. (this step is mandatory for every new installation)","title":"Initiate eQual core in DB"},{"location":"howtos-and-examples/generic-cheat-sheet/#initiate-your-package-in-db","text":"PATH core\\actions\\init\\package.php URL ?do=init_package&package=myPackage CLI $ ./equal.run --do=init_package --package=myPackage DESCRIPTION Initialise database for given package. If no package is given, initialize core package.","title":"Initiate your package in DB"},{"location":"howtos-and-examples/generic-cheat-sheet/#initiate-your-package-with-initial-data-in-db","text":"PATH core\\actions\\init\\package.php URL ?do=init_package&package=myPackage&import=true CLI $ ./equal.run --do=init_package --package=myPackage --import=true DESCRIPTION Initialise database for given package. If no package is given, initialize core package.","title":"Initiate your package with initial data in DB"},{"location":"howtos-and-examples/generic-cheat-sheet/#run-package-test-unit","text":"PATH core\\actions\\test\\package.php URL ?do=test_package&package=core CLI $ ./equal.run --do=test_package --package=core DESCRIPTION The controller checks the presence of test units for a given package and runs them, if any. (page : 'Testing' ).","title":"Run package test unit"},{"location":"howtos-and-examples/generic-cheat-sheet/#invoking-controllers","text":"","title":"Invoking Controllers"},{"location":"howtos-and-examples/generic-cheat-sheet/#data-provider","text":"PATH /packages/mypackage/data/my-controller.php URL ?get=mypackage_my-controller CLI $ ./equal.run --get=model_collect --entity=\"mypackage\\MyClass\" PHP run('get', 'mypackage_MyClass') Collect is the name of the controller, and model the directory to which it belongs.","title":"Data provider"},{"location":"howtos-and-examples/generic-cheat-sheet/#action-handler","text":"PATH /packages/mypackage/actions/subdir/my-action.php URL ?do=mypackage_subdir_my-action](http://equal.local?do=mypackage_subdir_my-action CLI $ ./equal.run --do=model_update --entity=mypackage\\MyObject --fields=[ids]=1 --fields=[name]=example PHP run('do', 'mypackage_myobject_action', [/* parameters */])","title":"Action handler"},{"location":"howtos-and-examples/generic-cheat-sheet/#howtos","text":"","title":"Howtos"},{"location":"howtos-and-examples/generic-cheat-sheet/#how-to-create-a-new-object","text":"<?php use core\\User ; User :: create ([ 'firstname' => 'Bart' ]); // which is equivalent to User :: create () -> update ([ 'firstname' => 'Bart' ]); Note: When creating an object, by default, the state fields is assigned to 'instance', unless another value is given as parameter (ex. state=draft)","title":"How to create a new object?"},{"location":"howtos-and-examples/generic-cheat-sheet/#how-to-check-if-a-given-object-does-exist","text":"<?php // count the number of items returned by the search method if ( count ( search ( $object_class , array ( array ( array ( 'id' , '=' , $object_id )))))) { ... }","title":"How to check if a given object does exist?"},{"location":"howtos-and-examples/generic-cheat-sheet/#how-to-browse-all-objects-of-a-given-class","text":"<?php // note: ensure the specified class does actually exist $res = browse ( $object_class , search ( $object_class ));","title":"How to browse all objects of a given class?"},{"location":"howtos-and-examples/generic-cheat-sheet/#how-to-add-a-clause-to-every-condition","text":"<?php // example: add the (deleted = 1) clause to every condition for ( $i = 0 , $j = count ( $domain ); $i < $j ; ++ $i ) $domain [ $i ] = array_merge ( $domain [ $i ], array ( array ( 'deleted' , '=' , '1' )));","title":"How to add a clause to every condition?"},{"location":"howtos-and-examples/generic-cheat-sheet/#how-to-obtain-output-jsonhtml-from-another-script","text":"<?php // There are 2 possibilities : // either use a HTTP request load_class ( 'utils/HttpRequest' ); $request = new HttpRequest ( FClib :: get_url ( true , false ) . '?get=core_objects_list&object_class=School%5CTeacher&rp=20&page=1&sortname =id&sortorder=asc&domain%5B0%5D%5B0%5D%5B%5D=courses_ids&domain%5B0%5D%5B 0%5D%5B%5D=contains&domain%5B0%5D%5B0%5D%5B2%5D%5B%5D=1&fields%5B%5D=id& fields%5B%5D=firstname&fields%5B%5D=lastname' ); $json_data = $request -> get (); // or use PHP output buffering (to prevent scope collision, remember to // embed such code into a function) function get_include_contents ( $filename ) { ob_start (); include ( $filename ); // assuming parameters required by the script // being called are present in the current URL return ob_get_clean (); } $result = get_include_contents ( 'packages/core/data/objects/list.php' );","title":"How to obtain output (json/html) from another script ?"},{"location":"howtos-and-examples/generic-cheat-sheet/#how-to-sort-the-result-of-the-browse-method-without-calling-search-method","text":"<?php // $order is an array containing fields names on which we want the result // set sorted // $result is an array returned by a call to the browse method foreach ( $order as $ofield ) { uasort ( $result , function ( $a , $b ) use ( $ofield ){ if ( $a [ $ofield ] == $b [ $ofield ]) return 0 ; return ( $a [ $ofield ] < $b [ $ofield ]) ? - 1 : 1 ; }); }","title":"How to sort the result of the browse method (without calling search method)?"},{"location":"howtos-and-examples/generic-cheat-sheet/#how-to-request-fields-from-all-sub-objects-at-once","text":"<?php $pages_values = $orm -> read ( 'icway\\Page' , $pages_ids , array ( 'url_resolver_id' ), $lang ); $url_ids = array_map ( function ( $a ){ return $a [ 'url_resolver_id' ];}, $pages_values ); $url_values = $orm -> read ( 'core\\UrlResolver' , $url_ids , [ 'human_readable_url' ]);","title":"How to request fields from all sub-objects at once?"},{"location":"howtos-and-examples/rest-api/","text":"Creating a ReST API \u00b6 This section covers how to make a ReST API from scratch and consume it in any App (Web or Mobile). If you're not familiar with ReST concepts, see this great explanation . Prerequisites \u00b6 First, you'll need a working setup of equal-framework on your localhost. See Getting started > Quick start (skip point 3. Defining classes ) If you look at the Directory structure , you'll get a good idea of what comes with every project. In this one, we'll use actions , classes , and data . Each of those folders correspond to a specific role : /actions = method DO (post, put/patch, delete, ...) /data = method GET (fetching data from server) /classes = class definition & DB architecture Go ahead and create them in your package directory (ex: /public/packages/todolist/ ) Defining classes \u00b6 Inside folder /classes create a new PHP file for each class you want to declare. To continue with our previous todolist-app example, we'll create two classes: Task and User. /classes/Task.class.php \u00b6 <?php namespace todolist ; use equal\\orm\\Model ; class Task extends Model { public static function getColumns () { return [ 'title' => [ 'type' => 'string' ], 'content' => [ 'type' => 'string' ], 'deadline' => [ 'type' => 'datetime' ], 'user_id' => [ 'type' => 'many2one' , 'foreign_object' => 'todolist\\User' ] ]; } } /classes/User.class.php \u00b6 <?php namespace todolist ; class User extends \\core\\User { public static function getColumns () { return [ 'name' => [ 'type' => 'string' ], 'tasks_ids' => [ 'type' => 'one2many' , 'foreign_object' => 'todolist\\Task' , 'foreign_field' => 'user_id' ] ]; } } We're done! A few things to consider : In order to work, your parameters have to match with your front-end Objects'IDs aren't needed here, they're automatically generated by eQual As you can see we're using a DBMS relationship , linking user_id with tasks_ids . This is also handled by the framework, all you have to know is the definition syntax (see Basics > Objects parameters ) Defining GET \u00b6 Open /data and create a new file for each GET method you want to use. In the following example, we're asking our database to retrieve all tasks : /data/tasks.php \u00b6 <?php use todolist\\Task ; list ( $params , $providers ) = announce ([ 'description' => 'Retrieve the list of existing tasks' , 'params' => [], 'response' => [ 'content-type' => 'application/json' , 'charset' => 'utf-8' , 'accept-origin' => [ '*' ] ], 'providers' => [ 'context' ] ]); list ( $context ) = [ $providers [ 'context' ] ]; $list = Task :: search ([]) -> read ([ 'id' , 'title' , 'content' , 'deadline' , 'user_id' => [ 'id' , 'name' ]]) -> adapt ( 'txt' ) -> get ( true ); $context -> httpResponse () -> body ( $list ) -> send (); What it does : \u00b6 announce() will handle the values of our query : description params gives additional requirements and conditions response defines the format of the server response providers helps us to access useful services such as context , orm , auth We use list($context) = [$providers['context']] to implement the services we want to use Then $list is where we receive the data from our query : Task::search([]) searchs for data associated with Task Function defined inside the Collection class ->read([]) tells which parameters we want to retrieve from Task ->adapt('txt') turns the data into strings ->get(true) Finally, $context is used to accomplish REST's purpose, displaying the data on our browser as JSON <?php $context -> httpResponse () // get the HTTP response being built -> body ( $list ) // populate the body with resulting list -> send (); // output the response (i.e. some plain // text @see https://www.w3.org/Protocols/rfc2616) Using GET in your browser \u00b6 We'll assume we already have an existing database containing a data sample of tasks, and have already done the following : $> php run.php --do = test_package-consistency --package = todolist $> php run.php --do = init_package --package = todolist Open your browser, and in the localhost page you defined for eQual To the address bar, add this : ?get=todolist_tasks tasks refers to our tasks.php located in /data It will display a JSON formatted answer showing an array of tasks As easy as that. You now have a REST response that you can use in any frontend project Defining DO \u00b6 in /actions folder, create a sub-folder for each previously defined class, as follow : /public /packages /todolist /actions /task /user ... Go in the folder associated with the class you want to manipulate, and create a new file for each DO action you want to achieve (for more clarity, rename each file after their intended roles). Now let's define the CREATE function of our API: /actions/task/create.php \u00b6 <?php use todolist\\Task ; use todolist\\User ; list ( $params , $providers ) = announce ([ 'params' => [ 'title' => [ 'type' => 'string' , 'required' => true ], 'content' => [ 'type' => 'string' , 'required' => true ], 'deadline' => [ 'type' => 'datetime' , 'default' => date ( \"Y-m-d H:i:s\" ) ], 'user_id' => [ 'type' => 'integer' , 'required' => true ] ], 'response' => [ 'content-type' => 'application/json' , 'charset' => 'utf-8' , 'accept-origin' => [ 'http://localhost:4200' , '*' ] ], 'providers' => [ 'context' ] ]); list ( $context ) = [ $providers [ 'context' ]]; $user = User :: id ( $params [ 'user_id' ]) -> read ([ 'id' ]) -> first (); if ( is_null ( $user )) { throw new Exception ( 'user_not_found' , QN_ERROR_UNKNOWN_OBJECT ); } $task = Task :: create ( $params ) -> read ([ 'id' , 'title' , 'content' , 'deadline' , 'user_id' => [ 'id' , 'name' ]]) -> adapt ( 'txt' ) -> first (); $context -> httpResponse () -> status ( 201 ) -> body ( $task ) -> send (); What it does : \u00b6 params defines the properties of our class Task (title, content, deadline, user_id). Some of them are declared with a required field which will make them mandatory (or not if \"false\", which is the default behavior) $user is used to retrieve the ID of a single user, based on the field user_id $task is then used with the ::create() method to initiate a POST request Finally, we use $context to send it and get a REST response Using DO in your browser \u00b6 DO : CREATE http://equal.local/index.php?do=todolist_task_create&title=my+task &content=lorem+ipsum&user_id=1 eQual resolves the operation ?do=todolist_task_create to the script /todolist/actions/task/create.php After CREATE, let's implement PUT and DELETE. We'll do that with no further explanation as you should now be familiar with how it works /actions/task/update.php \u00b6 <?php use todolist\\Task ; use todolist\\User ; list ( $params , $providers ) = announce ([ 'params' => [ 'id' => [ 'type' => 'integer' , 'required' => true ], 'title' => [ 'type' => 'string' , 'required' => true ], 'content' => [ 'type' => 'string' , 'required' => true ], 'deadline' => [ 'type' => 'datetime' , 'default' => date ( \"Y-m-d H:i:s\" ) ], 'user_id' => [ 'type' => 'integer' , 'required' => true ] ], 'response' => [ 'content-type' => 'application/json' , 'charset' => 'utf-8' , 'accept-origin' => [ 'http://localhost:4200' , '*' ] ], 'providers' => [ 'context' ] ]); list ( $context ) = [ $providers [ 'context' ]]; $user = User :: id ( $params [ 'user_id' ]) -> read ([ 'id' ]) -> first (); if ( is_null ( $user )) { throw new Exception ( 'user_not_found' , QN_ERROR_UNKNOWN_OBJECT ); } $task = Task :: ids ( $params [ 'id' ]) -> update ( $params ) -> read ([ 'id' , 'title' , 'content' , 'deadline' , 'user_id' => [ 'id' , 'name' ]]) -> adapt ( 'txt' ) -> first (); $context -> httpResponse () -> status ( 201 ) -> body ( $task ) -> send (); In practice : DO : PUT/PATCH http://equal.local/index.php?do=todolist_task_update&id=1 id refers to the task we update Additional parameters can be used, like title, content, dealine and user_id /actions/task/delete.php \u00b6 <?php use todolist\\Task ; use todolist\\User ; list ( $params , $providers ) = announce ([ 'params' => [ 'id' => [ 'type' => 'integer' , 'required' => true ] ], 'response' => [ 'content-type' => 'application/json' , 'charset' => 'utf-8' , 'accept-origin' => [ 'http://localhost:4200' , '*' ] ], 'providers' => [ 'context' ] ]); list ( $context ) = [ $providers [ 'context' ]]; Task :: ids ( $params [ 'id' ]) -> delete ( true ); $context -> httpResponse () -> status ( 204 ) -> send (); In practice : DO : DELETE http://equal-framework/index.php?do=todolist_task_delete&id=1 id= refers to the task we delete Mapping the ReST API routes \u00b6 Back to the root folder of equal installation, create a file: /config/routing/20-api_todolist.json Replace everything with this : { \"/tasks\" : { \"GET\" : { \"description\" : \"get all tasks\" , \"operation\" : \"?get=todolist_tasks\" } }, \"/task\" : { \"POST\" : { \"description\" : \"get all tasks\" , \"operation\" : \"?do=todolist_task_create\" } }, \"/task/:id\" : { \"PUT\" : { \"description\" : \"update a task\" , \"operation\" : \"?do=todolist_task_update\" }, \"DELETE\" : { \"description\" : \"delete a task\" , \"operation\" : \"?do=todolist_task_delete\" } } } What it does is pretty self-explanatory. The /:id is a way for us to target and retrieve a single task when needed. From now on, route http://equal.local/tasks is equivalent to calling http://equal.local/?get=todolist_tasks .","title":"ReST API"},{"location":"howtos-and-examples/rest-api/#creating-a-rest-api","text":"This section covers how to make a ReST API from scratch and consume it in any App (Web or Mobile). If you're not familiar with ReST concepts, see this great explanation .","title":"Creating a ReST API"},{"location":"howtos-and-examples/rest-api/#prerequisites","text":"First, you'll need a working setup of equal-framework on your localhost. See Getting started > Quick start (skip point 3. Defining classes ) If you look at the Directory structure , you'll get a good idea of what comes with every project. In this one, we'll use actions , classes , and data . Each of those folders correspond to a specific role : /actions = method DO (post, put/patch, delete, ...) /data = method GET (fetching data from server) /classes = class definition & DB architecture Go ahead and create them in your package directory (ex: /public/packages/todolist/ )","title":"Prerequisites"},{"location":"howtos-and-examples/rest-api/#defining-classes","text":"Inside folder /classes create a new PHP file for each class you want to declare. To continue with our previous todolist-app example, we'll create two classes: Task and User.","title":"Defining classes"},{"location":"howtos-and-examples/rest-api/#classestaskclassphp","text":"<?php namespace todolist ; use equal\\orm\\Model ; class Task extends Model { public static function getColumns () { return [ 'title' => [ 'type' => 'string' ], 'content' => [ 'type' => 'string' ], 'deadline' => [ 'type' => 'datetime' ], 'user_id' => [ 'type' => 'many2one' , 'foreign_object' => 'todolist\\User' ] ]; } }","title":"/classes/Task.class.php"},{"location":"howtos-and-examples/rest-api/#classesuserclassphp","text":"<?php namespace todolist ; class User extends \\core\\User { public static function getColumns () { return [ 'name' => [ 'type' => 'string' ], 'tasks_ids' => [ 'type' => 'one2many' , 'foreign_object' => 'todolist\\Task' , 'foreign_field' => 'user_id' ] ]; } } We're done! A few things to consider : In order to work, your parameters have to match with your front-end Objects'IDs aren't needed here, they're automatically generated by eQual As you can see we're using a DBMS relationship , linking user_id with tasks_ids . This is also handled by the framework, all you have to know is the definition syntax (see Basics > Objects parameters )","title":"/classes/User.class.php"},{"location":"howtos-and-examples/rest-api/#defining-get","text":"Open /data and create a new file for each GET method you want to use. In the following example, we're asking our database to retrieve all tasks :","title":"Defining GET"},{"location":"howtos-and-examples/rest-api/#datatasksphp","text":"<?php use todolist\\Task ; list ( $params , $providers ) = announce ([ 'description' => 'Retrieve the list of existing tasks' , 'params' => [], 'response' => [ 'content-type' => 'application/json' , 'charset' => 'utf-8' , 'accept-origin' => [ '*' ] ], 'providers' => [ 'context' ] ]); list ( $context ) = [ $providers [ 'context' ] ]; $list = Task :: search ([]) -> read ([ 'id' , 'title' , 'content' , 'deadline' , 'user_id' => [ 'id' , 'name' ]]) -> adapt ( 'txt' ) -> get ( true ); $context -> httpResponse () -> body ( $list ) -> send ();","title":"/data/tasks.php"},{"location":"howtos-and-examples/rest-api/#what-it-does","text":"announce() will handle the values of our query : description params gives additional requirements and conditions response defines the format of the server response providers helps us to access useful services such as context , orm , auth We use list($context) = [$providers['context']] to implement the services we want to use Then $list is where we receive the data from our query : Task::search([]) searchs for data associated with Task Function defined inside the Collection class ->read([]) tells which parameters we want to retrieve from Task ->adapt('txt') turns the data into strings ->get(true) Finally, $context is used to accomplish REST's purpose, displaying the data on our browser as JSON <?php $context -> httpResponse () // get the HTTP response being built -> body ( $list ) // populate the body with resulting list -> send (); // output the response (i.e. some plain // text @see https://www.w3.org/Protocols/rfc2616)","title":"What it does :"},{"location":"howtos-and-examples/rest-api/#using-get-in-your-browser","text":"We'll assume we already have an existing database containing a data sample of tasks, and have already done the following : $> php run.php --do = test_package-consistency --package = todolist $> php run.php --do = init_package --package = todolist Open your browser, and in the localhost page you defined for eQual To the address bar, add this : ?get=todolist_tasks tasks refers to our tasks.php located in /data It will display a JSON formatted answer showing an array of tasks As easy as that. You now have a REST response that you can use in any frontend project","title":"Using GET in your browser"},{"location":"howtos-and-examples/rest-api/#defining-do","text":"in /actions folder, create a sub-folder for each previously defined class, as follow : /public /packages /todolist /actions /task /user ... Go in the folder associated with the class you want to manipulate, and create a new file for each DO action you want to achieve (for more clarity, rename each file after their intended roles). Now let's define the CREATE function of our API:","title":"Defining DO"},{"location":"howtos-and-examples/rest-api/#actionstaskcreatephp","text":"<?php use todolist\\Task ; use todolist\\User ; list ( $params , $providers ) = announce ([ 'params' => [ 'title' => [ 'type' => 'string' , 'required' => true ], 'content' => [ 'type' => 'string' , 'required' => true ], 'deadline' => [ 'type' => 'datetime' , 'default' => date ( \"Y-m-d H:i:s\" ) ], 'user_id' => [ 'type' => 'integer' , 'required' => true ] ], 'response' => [ 'content-type' => 'application/json' , 'charset' => 'utf-8' , 'accept-origin' => [ 'http://localhost:4200' , '*' ] ], 'providers' => [ 'context' ] ]); list ( $context ) = [ $providers [ 'context' ]]; $user = User :: id ( $params [ 'user_id' ]) -> read ([ 'id' ]) -> first (); if ( is_null ( $user )) { throw new Exception ( 'user_not_found' , QN_ERROR_UNKNOWN_OBJECT ); } $task = Task :: create ( $params ) -> read ([ 'id' , 'title' , 'content' , 'deadline' , 'user_id' => [ 'id' , 'name' ]]) -> adapt ( 'txt' ) -> first (); $context -> httpResponse () -> status ( 201 ) -> body ( $task ) -> send ();","title":"/actions/task/create.php"},{"location":"howtos-and-examples/rest-api/#what-it-does_1","text":"params defines the properties of our class Task (title, content, deadline, user_id). Some of them are declared with a required field which will make them mandatory (or not if \"false\", which is the default behavior) $user is used to retrieve the ID of a single user, based on the field user_id $task is then used with the ::create() method to initiate a POST request Finally, we use $context to send it and get a REST response","title":"What it does :"},{"location":"howtos-and-examples/rest-api/#using-do-in-your-browser","text":"DO : CREATE http://equal.local/index.php?do=todolist_task_create&title=my+task &content=lorem+ipsum&user_id=1 eQual resolves the operation ?do=todolist_task_create to the script /todolist/actions/task/create.php After CREATE, let's implement PUT and DELETE. We'll do that with no further explanation as you should now be familiar with how it works","title":"Using DO in your browser"},{"location":"howtos-and-examples/rest-api/#actionstaskupdatephp","text":"<?php use todolist\\Task ; use todolist\\User ; list ( $params , $providers ) = announce ([ 'params' => [ 'id' => [ 'type' => 'integer' , 'required' => true ], 'title' => [ 'type' => 'string' , 'required' => true ], 'content' => [ 'type' => 'string' , 'required' => true ], 'deadline' => [ 'type' => 'datetime' , 'default' => date ( \"Y-m-d H:i:s\" ) ], 'user_id' => [ 'type' => 'integer' , 'required' => true ] ], 'response' => [ 'content-type' => 'application/json' , 'charset' => 'utf-8' , 'accept-origin' => [ 'http://localhost:4200' , '*' ] ], 'providers' => [ 'context' ] ]); list ( $context ) = [ $providers [ 'context' ]]; $user = User :: id ( $params [ 'user_id' ]) -> read ([ 'id' ]) -> first (); if ( is_null ( $user )) { throw new Exception ( 'user_not_found' , QN_ERROR_UNKNOWN_OBJECT ); } $task = Task :: ids ( $params [ 'id' ]) -> update ( $params ) -> read ([ 'id' , 'title' , 'content' , 'deadline' , 'user_id' => [ 'id' , 'name' ]]) -> adapt ( 'txt' ) -> first (); $context -> httpResponse () -> status ( 201 ) -> body ( $task ) -> send (); In practice : DO : PUT/PATCH http://equal.local/index.php?do=todolist_task_update&id=1 id refers to the task we update Additional parameters can be used, like title, content, dealine and user_id","title":"/actions/task/update.php"},{"location":"howtos-and-examples/rest-api/#actionstaskdeletephp","text":"<?php use todolist\\Task ; use todolist\\User ; list ( $params , $providers ) = announce ([ 'params' => [ 'id' => [ 'type' => 'integer' , 'required' => true ] ], 'response' => [ 'content-type' => 'application/json' , 'charset' => 'utf-8' , 'accept-origin' => [ 'http://localhost:4200' , '*' ] ], 'providers' => [ 'context' ] ]); list ( $context ) = [ $providers [ 'context' ]]; Task :: ids ( $params [ 'id' ]) -> delete ( true ); $context -> httpResponse () -> status ( 204 ) -> send (); In practice : DO : DELETE http://equal-framework/index.php?do=todolist_task_delete&id=1 id= refers to the task we delete","title":"/actions/task/delete.php"},{"location":"howtos-and-examples/rest-api/#mapping-the-rest-api-routes","text":"Back to the root folder of equal installation, create a file: /config/routing/20-api_todolist.json Replace everything with this : { \"/tasks\" : { \"GET\" : { \"description\" : \"get all tasks\" , \"operation\" : \"?get=todolist_tasks\" } }, \"/task\" : { \"POST\" : { \"description\" : \"get all tasks\" , \"operation\" : \"?do=todolist_task_create\" } }, \"/task/:id\" : { \"PUT\" : { \"description\" : \"update a task\" , \"operation\" : \"?do=todolist_task_update\" }, \"DELETE\" : { \"description\" : \"delete a task\" , \"operation\" : \"?do=todolist_task_delete\" } } } What it does is pretty self-explanatory. The /:id is a way for us to target and retrieve a single task when needed. From now on, route http://equal.local/tasks is equivalent to calling http://equal.local/?get=todolist_tasks .","title":"Mapping the ReST API routes"},{"location":"usage/built-in-tools/","text":"Built-in utilities and stand-alone scripts \u00b6 Some tools are included in the core package to ease management and development of packages. Utility scripts allow to achieve tasks that are not handled by the ORM. These act like some sort of plugins, written in PHP and located in the folder: packages/core/data and packages/core/actions . This page lists an inventory of available scripts, grouped by category. Calling the scripts Calls shown in examples must be made at the root folder of eQual installation (where the run.php script is located). Installation & Config utilities \u00b6 db-connectivity \u00b6 PATH core\\actions\\test\\db-connectivity.php URL ?do=test_db-connectivity CLI $ ./equal.run --do=test_db-connectivity DESCRIPTION Tests connectivity to the DBMS server (check if we're able to establish a TCP/IP connection). db-access \u00b6 PATH core\\actions\\test\\db-access.php URL ?do=test_db-access CLI $ ./equal.run --do=test_db-access DESCRIPTION Tests access to the database specified in the config file. This controller uses db-connectivity before trying to access the database. fs-consistency \u00b6 PATH core\\actions\\test\\fs-consistency.php URL ?do=test_fs-consistency CLI $ ./equal.run --do=test_fs-consistency DESCRIPTION Checks current installation directories integrity. The controller checks if all mandatory directories are present, and if their permissions allow the apache process to read/write as required. init_db \u00b6 PATH core\\actions\\init\\db.php URL ?do=init_db CLI $ ./equal.run --do=init_db DESCRIPTION Creates a database using the details provided in config file. This controllers calls db-connectivity and if connection can be established with the host, it requests the creation of the database, if it does not exist yet. Package utilities \u00b6 init_package \u00b6 PATH core\\actions\\init\\package.php URL ?do=init_package&package=core CLI $ ./equal.run --do=init_package --package=core DESCRIPTION Initialize database for given package. If no package is given, initialize core package. Compile the apps ( apps folder ) of the package and copy them in the public folder. package-consistency \u00b6 PATH core\\actions\\test\\package-consistency.php URL ?do=test_package-consistency&package=core CLI $ ./equal.run --do=test_package-consistency --package=core --level=warn DESCRIPTION Performs consistency checks between DB and class as well as syntax validation for classes (PHP), views and translation files (JSON). The level property has 3 options : 'error' (ex: missing property 'entity' in file: \"packages\\/lodging\\/views\\/sale\\booking\\InvoiceLine.form.default.json\" ); 'warn' (ex: WARN - I18 - Unknown field 'object_class' referenced in file \"packages\\/core\\/i18n\\/en\\/alert\\MessageModel.json\") ; * (error & warn). test_package \u00b6 PATH core\\actions\\test\\package.php URL ?do=test_package&package=core CLI $ ./equal.run --do=test_package --package=core DESCRIPTION This controller checks the presence of test units for a given package and runs them, if any. (page : 'Testing' ). Data manipulation utilities \u00b6 Models meta data \u00b6 model_schema \u00b6 PATH core\\data\\model\\schema.php URL ?get=model_schema&entity=core\\User CLI $ ./equal.run --get=model_schema --entity=core\\\\User DESCRIPTION Returns the schema of given class (model) in JSON. model_view \u00b6 PATH core\\data\\model\\view.php URL ?get=model_view&entity=core\\User&view_id=list.default CLI $ ./equal.run --get=model_view --entity=core\\\\User --view_id=list.default DESCRIPTION Returns the JSON view related to an entity (class model), given a view ID. Manipulate data \u00b6 model_create \u00b6 PATH core\\actions\\model\\create.php URL ?do=model_create&entity=core\\Group&fields[name]=Admin CLI $ ./equal.run --do=model_create --entity=core\\\\Group --fields[name]=Admin DESCRIPTION Create a new object using given fields values. model_update \u00b6 PATH core\\actions\\model\\update.php URL ?do=model_update&entity=core\\Group&id=45&fields[name]=Worker CLI $ ./equal.run --get=model_view --entity=core\\\\User --id=45 --fields[name]=Worker DESCRIPTION Update (fully or partially) the given object. model_delete \u00b6 PATH core\\actions\\model\\delete.php URL ?do=model_delete&entity=core\\Group&id=48 CLI $ ./equal.run --get=model_delete --entity=core\\\\Group --id=48 DESCRIPTION Deletes the given object(s). model_search \u00b6 PATH core\\data\\model\\search.php URL ?get=model_search&entity=core\\Group&domain=[name,=,Admin] CLI $ ./equal.run --get=model_search --entity=core\\\\Group --domain=[name,=,Admin] DESCRIPTION Returns a list of identifiers of a given entity, according to given domain (filter), start offset, limit and order. model_read \u00b6 PATH core\\data\\model\\read.php URL ?get=model_read&entity=core\\Group&fields=[created,description]&ids=[1,2] CLI $ ./equal.run --get=model_read --entity=core\\\\Group --fields=[created,description] --ids=[1,2] DESCRIPTION Returns values map of the specified fields for object matching given class and identifier. model_collect \u00b6 PATH core\\data\\model\\collect.php URL ?get=model_collect&entity=core\\Group&fields=[created,description]&domain=[id,=,1] CLI $ ./equal.run --get=model_collect --entity=core\\\\Group --fields=[created,description] --domain=[id,=,1] DESCRIPTION Returns a list of entities according to given domain (filter), start offset, limit and order. Rights management utilities \u00b6 To determine Groups and Users permissions, we use a list of rights : create , read , update , delete , manage They are also defined inside the eq.lib.php file with a value attached : <?php /** * Users & Groups permissions masks (value attached to the mask) * #memo - we use powers of 2 for permission mask so that the addition of numbers never leads to a colliding values */ define ( 'QN_R_CREATE' , 1 ); define ( 'QN_R_READ' , 2 ); define ( 'QN_R_WRITE' , 4 ); define ( 'QN_R_DELETE' , 8 ); define ( 'QN_R_MANAGE' , 16 ); Use : Those values are used, for example, inside Permission.class.php on the rights field, to determine which rights from the list are selected. <?php 'rights' => [ 'type' => 'integer' , 'onupdate' => 'onupdateRights' , 'description' => \"Rights binary mask (1: CREATE, 2: READ, 4: WRITE, 8 DELETE, 16: MANAGE)\" ], Those permissions are used as properties by User.class.php & Group.class.php to determine the rights available. Users \u00b6 user_grant \u00b6 PATH core\\actions\\user\\grant.php URL ?do=user_grant&right=create&user=cedric@equal.run CLI $ ./equal.run --do=user_grant --right=create --user=cedric@equal.run --entity=core\\\\Task DESCRIPTION Grant additional privilege to given user. Only one right can be granted at a time to one user over one entity. user_revoke \u00b6 PATH core\\actions\\user\\revoke.php URL ?do=user_revoke&right=create&user=cedric@equal.run&entity=core\\Task CLI $ ./equal.run --do=user_revoke --right=create --user=cedric@equal.run --entity=core\\\\Task DESCRIPTION Revoke privilege from a given user. Only one right can be revoked at a time to one user over one entity. Groups \u00b6 group_grant \u00b6 PATH core\\actions\\group\\grant.php URL ?do=group_grant&right=create&group=users&entity=core\\Task CLI $ ./equal.run --do=group_grant --right=create --group=users --entity=core\\\\Task DESCRIPTION Grant additional privilege to given group. Only one right can be granted at a time to one group over one entity. group_revoke \u00b6 PATH core\\actions\\group\\revoke.php URL ?do=group_revoke&right=create&group=users&entity=core\\Task CLI $ ./equal.run --do=group_revoke --right=create --group=users --entity=core\\\\Task DESCRIPTION Revoke privilege from a given group. Only one right can be revoked at a time to one group over one entity.","title":"Built-in tools"},{"location":"usage/built-in-tools/#built-in-utilities-and-stand-alone-scripts","text":"Some tools are included in the core package to ease management and development of packages. Utility scripts allow to achieve tasks that are not handled by the ORM. These act like some sort of plugins, written in PHP and located in the folder: packages/core/data and packages/core/actions . This page lists an inventory of available scripts, grouped by category. Calling the scripts Calls shown in examples must be made at the root folder of eQual installation (where the run.php script is located).","title":"Built-in utilities and stand-alone scripts"},{"location":"usage/built-in-tools/#installation-config-utilities","text":"","title":"Installation &amp; Config utilities"},{"location":"usage/built-in-tools/#db-connectivity","text":"PATH core\\actions\\test\\db-connectivity.php URL ?do=test_db-connectivity CLI $ ./equal.run --do=test_db-connectivity DESCRIPTION Tests connectivity to the DBMS server (check if we're able to establish a TCP/IP connection).","title":"db-connectivity"},{"location":"usage/built-in-tools/#db-access","text":"PATH core\\actions\\test\\db-access.php URL ?do=test_db-access CLI $ ./equal.run --do=test_db-access DESCRIPTION Tests access to the database specified in the config file. This controller uses db-connectivity before trying to access the database.","title":"db-access"},{"location":"usage/built-in-tools/#fs-consistency","text":"PATH core\\actions\\test\\fs-consistency.php URL ?do=test_fs-consistency CLI $ ./equal.run --do=test_fs-consistency DESCRIPTION Checks current installation directories integrity. The controller checks if all mandatory directories are present, and if their permissions allow the apache process to read/write as required.","title":"fs-consistency"},{"location":"usage/built-in-tools/#init_db","text":"PATH core\\actions\\init\\db.php URL ?do=init_db CLI $ ./equal.run --do=init_db DESCRIPTION Creates a database using the details provided in config file. This controllers calls db-connectivity and if connection can be established with the host, it requests the creation of the database, if it does not exist yet.","title":"init_db"},{"location":"usage/built-in-tools/#package-utilities","text":"","title":"Package utilities"},{"location":"usage/built-in-tools/#init_package","text":"PATH core\\actions\\init\\package.php URL ?do=init_package&package=core CLI $ ./equal.run --do=init_package --package=core DESCRIPTION Initialize database for given package. If no package is given, initialize core package. Compile the apps ( apps folder ) of the package and copy them in the public folder.","title":"init_package"},{"location":"usage/built-in-tools/#package-consistency","text":"PATH core\\actions\\test\\package-consistency.php URL ?do=test_package-consistency&package=core CLI $ ./equal.run --do=test_package-consistency --package=core --level=warn DESCRIPTION Performs consistency checks between DB and class as well as syntax validation for classes (PHP), views and translation files (JSON). The level property has 3 options : 'error' (ex: missing property 'entity' in file: \"packages\\/lodging\\/views\\/sale\\booking\\InvoiceLine.form.default.json\" ); 'warn' (ex: WARN - I18 - Unknown field 'object_class' referenced in file \"packages\\/core\\/i18n\\/en\\/alert\\MessageModel.json\") ; * (error & warn).","title":"package-consistency"},{"location":"usage/built-in-tools/#test_package","text":"PATH core\\actions\\test\\package.php URL ?do=test_package&package=core CLI $ ./equal.run --do=test_package --package=core DESCRIPTION This controller checks the presence of test units for a given package and runs them, if any. (page : 'Testing' ).","title":"test_package"},{"location":"usage/built-in-tools/#data-manipulation-utilities","text":"","title":"Data manipulation utilities"},{"location":"usage/built-in-tools/#models-meta-data","text":"","title":"Models meta data"},{"location":"usage/built-in-tools/#model_schema","text":"PATH core\\data\\model\\schema.php URL ?get=model_schema&entity=core\\User CLI $ ./equal.run --get=model_schema --entity=core\\\\User DESCRIPTION Returns the schema of given class (model) in JSON.","title":"model_schema"},{"location":"usage/built-in-tools/#model_view","text":"PATH core\\data\\model\\view.php URL ?get=model_view&entity=core\\User&view_id=list.default CLI $ ./equal.run --get=model_view --entity=core\\\\User --view_id=list.default DESCRIPTION Returns the JSON view related to an entity (class model), given a view ID.","title":"model_view"},{"location":"usage/built-in-tools/#manipulate-data","text":"","title":"Manipulate data"},{"location":"usage/built-in-tools/#model_create","text":"PATH core\\actions\\model\\create.php URL ?do=model_create&entity=core\\Group&fields[name]=Admin CLI $ ./equal.run --do=model_create --entity=core\\\\Group --fields[name]=Admin DESCRIPTION Create a new object using given fields values.","title":"model_create"},{"location":"usage/built-in-tools/#model_update","text":"PATH core\\actions\\model\\update.php URL ?do=model_update&entity=core\\Group&id=45&fields[name]=Worker CLI $ ./equal.run --get=model_view --entity=core\\\\User --id=45 --fields[name]=Worker DESCRIPTION Update (fully or partially) the given object.","title":"model_update"},{"location":"usage/built-in-tools/#model_delete","text":"PATH core\\actions\\model\\delete.php URL ?do=model_delete&entity=core\\Group&id=48 CLI $ ./equal.run --get=model_delete --entity=core\\\\Group --id=48 DESCRIPTION Deletes the given object(s).","title":"model_delete"},{"location":"usage/built-in-tools/#model_search","text":"PATH core\\data\\model\\search.php URL ?get=model_search&entity=core\\Group&domain=[name,=,Admin] CLI $ ./equal.run --get=model_search --entity=core\\\\Group --domain=[name,=,Admin] DESCRIPTION Returns a list of identifiers of a given entity, according to given domain (filter), start offset, limit and order.","title":"model_search"},{"location":"usage/built-in-tools/#model_read","text":"PATH core\\data\\model\\read.php URL ?get=model_read&entity=core\\Group&fields=[created,description]&ids=[1,2] CLI $ ./equal.run --get=model_read --entity=core\\\\Group --fields=[created,description] --ids=[1,2] DESCRIPTION Returns values map of the specified fields for object matching given class and identifier.","title":"model_read"},{"location":"usage/built-in-tools/#model_collect","text":"PATH core\\data\\model\\collect.php URL ?get=model_collect&entity=core\\Group&fields=[created,description]&domain=[id,=,1] CLI $ ./equal.run --get=model_collect --entity=core\\\\Group --fields=[created,description] --domain=[id,=,1] DESCRIPTION Returns a list of entities according to given domain (filter), start offset, limit and order.","title":"model_collect"},{"location":"usage/built-in-tools/#rights-management-utilities","text":"To determine Groups and Users permissions, we use a list of rights : create , read , update , delete , manage They are also defined inside the eq.lib.php file with a value attached : <?php /** * Users & Groups permissions masks (value attached to the mask) * #memo - we use powers of 2 for permission mask so that the addition of numbers never leads to a colliding values */ define ( 'QN_R_CREATE' , 1 ); define ( 'QN_R_READ' , 2 ); define ( 'QN_R_WRITE' , 4 ); define ( 'QN_R_DELETE' , 8 ); define ( 'QN_R_MANAGE' , 16 ); Use : Those values are used, for example, inside Permission.class.php on the rights field, to determine which rights from the list are selected. <?php 'rights' => [ 'type' => 'integer' , 'onupdate' => 'onupdateRights' , 'description' => \"Rights binary mask (1: CREATE, 2: READ, 4: WRITE, 8 DELETE, 16: MANAGE)\" ], Those permissions are used as properties by User.class.php & Group.class.php to determine the rights available.","title":"Rights management utilities"},{"location":"usage/built-in-tools/#users","text":"","title":"Users"},{"location":"usage/built-in-tools/#user_grant","text":"PATH core\\actions\\user\\grant.php URL ?do=user_grant&right=create&user=cedric@equal.run CLI $ ./equal.run --do=user_grant --right=create --user=cedric@equal.run --entity=core\\\\Task DESCRIPTION Grant additional privilege to given user. Only one right can be granted at a time to one user over one entity.","title":"user_grant"},{"location":"usage/built-in-tools/#user_revoke","text":"PATH core\\actions\\user\\revoke.php URL ?do=user_revoke&right=create&user=cedric@equal.run&entity=core\\Task CLI $ ./equal.run --do=user_revoke --right=create --user=cedric@equal.run --entity=core\\\\Task DESCRIPTION Revoke privilege from a given user. Only one right can be revoked at a time to one user over one entity.","title":"user_revoke"},{"location":"usage/built-in-tools/#groups","text":"","title":"Groups"},{"location":"usage/built-in-tools/#group_grant","text":"PATH core\\actions\\group\\grant.php URL ?do=group_grant&right=create&group=users&entity=core\\Task CLI $ ./equal.run --do=group_grant --right=create --group=users --entity=core\\\\Task DESCRIPTION Grant additional privilege to given group. Only one right can be granted at a time to one group over one entity.","title":"group_grant"},{"location":"usage/built-in-tools/#group_revoke","text":"PATH core\\actions\\group\\revoke.php URL ?do=group_revoke&right=create&group=users&entity=core\\Task CLI $ ./equal.run --do=group_revoke --right=create --group=users --entity=core\\\\Task DESCRIPTION Revoke privilege from a given group. Only one right can be revoked at a time to one group over one entity.","title":"group_revoke"},{"location":"usage/controllers/","text":"Introduction \u00b6 Controllers allow to attach an URI to any action involving data manipulation or to a data providers. They can also act as data funnels and dispatchers. Controllers are re-usable and can be interdependent. eQual controllers are stored inside the actions , data & apps folders. They are separated because they can achieve different kinds of operation/action's. FOLDER OPERATION actions \"DO\" operations (POST, PUT, PATCH, DELETE). data \"GET\" operations (GET). apps \"SHOW\" operations (for apps with UI generated by the back-end). Announcement \u00b6 description what it does expected parameters and related characteristics constraints, default value, optional or mandatory; type; name; description dependency injection services required by the script response format : content-type and content-disposition (charset) CORS : accept-origin (Access-Control-Allow-Origin) description \u00b6 Describes what the controller does. params \u00b6 Array containing values used by the controller, which may be required. constants \u00b6 List of strings, representing constant names, used by the system. They are present globally inside the config/config.inc.php file, but also can be overwritten (with the namespace config ) inside packages with a config.inc.php file. Every overwritten constant is limited to the package it belongs to. If they are used by a controller, they must be listed by it. If there is an error, displays Error 500 . Example : 'constants' => ['AUTH_ACCESS_TOKEN_VALIDITY', 'AUTH_REFRESH_TOKEN_VALIDITY', 'AUTH_TOKEN_HTTPS'] The constants are checked by the announce() function inside eq.lib.php . access \u00b6 The access property allows to quickly define rights management: making sure the user performing a request has the required permissions. PROPERTY DESCRIPTION visibility The level of \"visibility\" of the ('public', 'protected' or 'private'). groups An array holding the list of groups the view is restricted to. Examples : <?php 'access' => [ 'visibility' => 'public' // anyone can access the controller (anonymous users) ] <?php 'access' => [ 'visibility' => 'protected' , 'users' => [ ROOT_USER_ID ], // list of granted users ids ] <?php 'access' => [ 'visibility' => 'protected' , 'groups' => [ 'sales.bookings.users' ], // list of granted groups names ] response \u00b6 The response property provides info about the format of the returned data (if any). It also allows to restrict the accepted origins of the requests (using CORS). At the moment the origin is unlimited, it is possible to create an array with the URL allowed to access the API. <?php 'response' => [ 'content-type' => 'application/json' , 'charset' => 'utf-8' , 'accept-origin' => '*' ], providers \u00b6 List of the different providers/services needed by the controller. Example: <?php 'providers' => [ 'context' , 'orm' , 'auth' ] //'orm'= ObjectManager & 'auth'=AuthentificationManager","title":"Controllers"},{"location":"usage/controllers/#introduction","text":"Controllers allow to attach an URI to any action involving data manipulation or to a data providers. They can also act as data funnels and dispatchers. Controllers are re-usable and can be interdependent. eQual controllers are stored inside the actions , data & apps folders. They are separated because they can achieve different kinds of operation/action's. FOLDER OPERATION actions \"DO\" operations (POST, PUT, PATCH, DELETE). data \"GET\" operations (GET). apps \"SHOW\" operations (for apps with UI generated by the back-end).","title":"Introduction"},{"location":"usage/controllers/#announcement","text":"description what it does expected parameters and related characteristics constraints, default value, optional or mandatory; type; name; description dependency injection services required by the script response format : content-type and content-disposition (charset) CORS : accept-origin (Access-Control-Allow-Origin)","title":"Announcement"},{"location":"usage/controllers/#description","text":"Describes what the controller does.","title":"description"},{"location":"usage/controllers/#params","text":"Array containing values used by the controller, which may be required.","title":"params"},{"location":"usage/controllers/#constants","text":"List of strings, representing constant names, used by the system. They are present globally inside the config/config.inc.php file, but also can be overwritten (with the namespace config ) inside packages with a config.inc.php file. Every overwritten constant is limited to the package it belongs to. If they are used by a controller, they must be listed by it. If there is an error, displays Error 500 . Example : 'constants' => ['AUTH_ACCESS_TOKEN_VALIDITY', 'AUTH_REFRESH_TOKEN_VALIDITY', 'AUTH_TOKEN_HTTPS'] The constants are checked by the announce() function inside eq.lib.php .","title":"constants"},{"location":"usage/controllers/#access","text":"The access property allows to quickly define rights management: making sure the user performing a request has the required permissions. PROPERTY DESCRIPTION visibility The level of \"visibility\" of the ('public', 'protected' or 'private'). groups An array holding the list of groups the view is restricted to. Examples : <?php 'access' => [ 'visibility' => 'public' // anyone can access the controller (anonymous users) ] <?php 'access' => [ 'visibility' => 'protected' , 'users' => [ ROOT_USER_ID ], // list of granted users ids ] <?php 'access' => [ 'visibility' => 'protected' , 'groups' => [ 'sales.bookings.users' ], // list of granted groups names ]","title":"access"},{"location":"usage/controllers/#response","text":"The response property provides info about the format of the returned data (if any). It also allows to restrict the accepted origins of the requests (using CORS). At the moment the origin is unlimited, it is possible to create an array with the URL allowed to access the API. <?php 'response' => [ 'content-type' => 'application/json' , 'charset' => 'utf-8' , 'accept-origin' => '*' ],","title":"response"},{"location":"usage/controllers/#providers","text":"List of the different providers/services needed by the controller. Example: <?php 'providers' => [ 'context' , 'orm' , 'auth' ] //'orm'= ObjectManager & 'auth'=AuthentificationManager","title":"providers"},{"location":"usage/crud/","text":"Manipulating entities \u00b6 To get an overview on CREATE, READ, UPDATE, DELETE commands, see Building a REST API . The following examples show the minimal syntax required to operate CRUD manipulations: multilang fields For fields whose value varies from one language to another (multilang), an additional $lang parameter is used. See i18n for more information. CRUD operations \u00b6 CRUD operations are part of the ORM foundations and are handled by the ObjectManager service. All methods return either an integer or an array (when relevant). By convention, in case of error, a negative integer is returned. Supported errors codes \u00b6 error codes All codes are prefixed with QN_ERROR_ (not show in the table to avoid redundancy). So, for instance, UNKNOWN will appear as QN_ERROR_UNKNOWN in code. NAME VALUE DESCRIPTION UNKNOWN -1 Something went wrong in an unexpected way. MISSING_PARAM -2 One or more mandatory parameters are missing. INVALID_PARAM -4 One or more parameters have invalid or incompatible value. SQL -8 An error occurred while building SQL query or processing it. UNKNOWN_OBJECT -16 The request targets an unknown resource (class, object, view, ...). NOT_ALLOWED -32 Action violates some rule (including UPLOAD_MAX_FILE_SIZE for binary fields) or user don't have required permissions. LOCKED_OBJECT -64 Object is currently locked by another process. CONFLICT_OBJECT -128 Version conflict. INVALID_USER -256 Authentication failure. UNKNOWN_SERVICE -512 Server error : missing service. INVALID_CONFIG -1024 Server error : faulty configuration. Create \u00b6 <?php /** * Creates a new instance of given class and, if given, assigns values to targeted fields. * * @param string $entity Class of the object to create. * @param array $fields Associative array mapping each field to its assigned value. * @param string $lang Language in which to store multilang fields. * @param boolean $use_draft If set to false, disables the re-use of outdated drafts. * @return integer Identfier of the newly created object or, in case of error, the code of the error that was raised. */ function create ( $entity , $fields , $lang = null , $use_draft = true ) Read \u00b6 <?php /** * Reads a collection of objects from a given class, based on a list of identfiers. * * @param string $class Class of the objects to retrieve. * @param mixed $ids Identifier(s) of the object(s) to retrieve (accepted types: array, integer, string). * @param mixed $fields Name(s) of the field(s) to retrieve (accepted types: array, string). * @param string $lang Language under which return fields values (only relevant for multilang fields). * @return int|array Resulting associative array mapping ids with objects, or error identifier. */ function read ( $entity , $ids , $fields , $lang = null ) Update \u00b6 <?php /** * Updates specified fields of seleced objects and stores changes into database. * * @param string $class Class of the objects to write. * @param mixed $ids Identifier(s) of the object(s) to update (accepted types: array, integer, numeric string). * @param mixed $fields Array mapping fields names with the value (PHP) to which they must be set. * @param string $lang Language under which fields have to be stored (only relevant for multilang fields). * @return int|array Returns an array of updated ids, or an error identifier in case an error occured. */ function update ( $class , $ids , $fields , $lang = null ) Delete \u00b6 <?php /** * Deletes an object permanently or put it in the \"trash bin\" (i.e. setting the 'deleted' flag to 1). * * @param string $class Class of the object to delete. * @param array $ids Array of ids of the objects to delete. * @param boolean $permanent Flag for soft deleted (marked as deleted) or hard deletion (removed from DB). * * @return integer|array Returns a list of ids of deleted objects, or an error identifier in case an error occured. */ function delete ( $entity , $ids , $permanent = false ) Querying entities \u00b6 In addition to classic CRUD operations, eQual comes with a search() method dedicated to querying entities. Search method \u00b6 <?php /** * Searches for the objects that comply with the domain (series of criteria). * * @param string $class Class of the objects to search for. * @param array $domain Domain (disjunction of conjunctions) defining the criteria the objects have to match. * @param array $sort Associative array mapping fields and orders on which result have to be sorted. * @param integer $start The offset at which to start the segment of the list of matching objects. * @param string $limit The maximum number of results/identifiers to return. * * @return integer|array Returns an array of matching objects ids. */ function search ( $class , $domain = null , $sort = [ 'id' => 'asc' ], $start = '0' , $limit = '0' , $lang = null ) { Example : <?php use core\\User ; User :: search ([ 'firstname' , 'ilike' , '%sam%' ]) -> from ( 0 ) -> limit ( 5 ) -> get (); Collections \u00b6 eQual also implements Collections through Collection objects that are instantiated using entities (model). Collections give the ability to apply chained actions on multiple objects at a time while checking the permission of the current user (returned by the Authentication service). Example : <?php use core\\User ; User :: search ([ 'firstname' , 'ilike' , '%sam%' ]) -> from ( 0 ) -> limit ( 5 ) -> get (); Retrieving a collection is through API calls is available using the standard controller core_model_collect . The purpose of that operation is to perform a search() and a read() in a single call. Querying sub-objects \u00b6 # a) dot notation $ ./equal.run \\ --get=model_collect \\ --entity=core\\\\User \\ --fields=[id,name,groups_ids.name,groups_ids.description] # b) array notation $ ./equal.run \\ --get=model_collect \\ --entity=core\\\\User \\ --fields=\"{id,name,groups_ids:{name,description}}\"","title":"CRUD"},{"location":"usage/crud/#manipulating-entities","text":"To get an overview on CREATE, READ, UPDATE, DELETE commands, see Building a REST API . The following examples show the minimal syntax required to operate CRUD manipulations: multilang fields For fields whose value varies from one language to another (multilang), an additional $lang parameter is used. See i18n for more information.","title":"Manipulating entities"},{"location":"usage/crud/#crud-operations","text":"CRUD operations are part of the ORM foundations and are handled by the ObjectManager service. All methods return either an integer or an array (when relevant). By convention, in case of error, a negative integer is returned.","title":"CRUD operations"},{"location":"usage/crud/#supported-errors-codes","text":"error codes All codes are prefixed with QN_ERROR_ (not show in the table to avoid redundancy). So, for instance, UNKNOWN will appear as QN_ERROR_UNKNOWN in code. NAME VALUE DESCRIPTION UNKNOWN -1 Something went wrong in an unexpected way. MISSING_PARAM -2 One or more mandatory parameters are missing. INVALID_PARAM -4 One or more parameters have invalid or incompatible value. SQL -8 An error occurred while building SQL query or processing it. UNKNOWN_OBJECT -16 The request targets an unknown resource (class, object, view, ...). NOT_ALLOWED -32 Action violates some rule (including UPLOAD_MAX_FILE_SIZE for binary fields) or user don't have required permissions. LOCKED_OBJECT -64 Object is currently locked by another process. CONFLICT_OBJECT -128 Version conflict. INVALID_USER -256 Authentication failure. UNKNOWN_SERVICE -512 Server error : missing service. INVALID_CONFIG -1024 Server error : faulty configuration.","title":"Supported errors codes"},{"location":"usage/crud/#create","text":"<?php /** * Creates a new instance of given class and, if given, assigns values to targeted fields. * * @param string $entity Class of the object to create. * @param array $fields Associative array mapping each field to its assigned value. * @param string $lang Language in which to store multilang fields. * @param boolean $use_draft If set to false, disables the re-use of outdated drafts. * @return integer Identfier of the newly created object or, in case of error, the code of the error that was raised. */ function create ( $entity , $fields , $lang = null , $use_draft = true )","title":"Create"},{"location":"usage/crud/#read","text":"<?php /** * Reads a collection of objects from a given class, based on a list of identfiers. * * @param string $class Class of the objects to retrieve. * @param mixed $ids Identifier(s) of the object(s) to retrieve (accepted types: array, integer, string). * @param mixed $fields Name(s) of the field(s) to retrieve (accepted types: array, string). * @param string $lang Language under which return fields values (only relevant for multilang fields). * @return int|array Resulting associative array mapping ids with objects, or error identifier. */ function read ( $entity , $ids , $fields , $lang = null )","title":"Read"},{"location":"usage/crud/#update","text":"<?php /** * Updates specified fields of seleced objects and stores changes into database. * * @param string $class Class of the objects to write. * @param mixed $ids Identifier(s) of the object(s) to update (accepted types: array, integer, numeric string). * @param mixed $fields Array mapping fields names with the value (PHP) to which they must be set. * @param string $lang Language under which fields have to be stored (only relevant for multilang fields). * @return int|array Returns an array of updated ids, or an error identifier in case an error occured. */ function update ( $class , $ids , $fields , $lang = null )","title":"Update"},{"location":"usage/crud/#delete","text":"<?php /** * Deletes an object permanently or put it in the \"trash bin\" (i.e. setting the 'deleted' flag to 1). * * @param string $class Class of the object to delete. * @param array $ids Array of ids of the objects to delete. * @param boolean $permanent Flag for soft deleted (marked as deleted) or hard deletion (removed from DB). * * @return integer|array Returns a list of ids of deleted objects, or an error identifier in case an error occured. */ function delete ( $entity , $ids , $permanent = false )","title":"Delete"},{"location":"usage/crud/#querying-entities","text":"In addition to classic CRUD operations, eQual comes with a search() method dedicated to querying entities.","title":"Querying entities"},{"location":"usage/crud/#search-method","text":"<?php /** * Searches for the objects that comply with the domain (series of criteria). * * @param string $class Class of the objects to search for. * @param array $domain Domain (disjunction of conjunctions) defining the criteria the objects have to match. * @param array $sort Associative array mapping fields and orders on which result have to be sorted. * @param integer $start The offset at which to start the segment of the list of matching objects. * @param string $limit The maximum number of results/identifiers to return. * * @return integer|array Returns an array of matching objects ids. */ function search ( $class , $domain = null , $sort = [ 'id' => 'asc' ], $start = '0' , $limit = '0' , $lang = null ) { Example : <?php use core\\User ; User :: search ([ 'firstname' , 'ilike' , '%sam%' ]) -> from ( 0 ) -> limit ( 5 ) -> get ();","title":"Search method"},{"location":"usage/crud/#collections","text":"eQual also implements Collections through Collection objects that are instantiated using entities (model). Collections give the ability to apply chained actions on multiple objects at a time while checking the permission of the current user (returned by the Authentication service). Example : <?php use core\\User ; User :: search ([ 'firstname' , 'ilike' , '%sam%' ]) -> from ( 0 ) -> limit ( 5 ) -> get (); Retrieving a collection is through API calls is available using the standard controller core_model_collect . The purpose of that operation is to perform a search() and a read() in a single call.","title":"Collections"},{"location":"usage/crud/#querying-sub-objects","text":"# a) dot notation $ ./equal.run \\ --get=model_collect \\ --entity=core\\\\User \\ --fields=[id,name,groups_ids.name,groups_ids.description] # b) array notation $ ./equal.run \\ --get=model_collect \\ --entity=core\\\\User \\ --fields=\"{id,name,groups_ids:{name,description}}\"","title":"Querying sub-objects"},{"location":"usage/debugging/","text":"Debugging \u00b6 Console \u00b6 To help you with human-readable data, eQual comes with its own UI debug console (which simply reads the qn_error.log located in the /log directory). Note: eq_error.log provides information for each occurring event, so don't forget to delete that file from time to time if you don't want to end up with a huge logs. Especially if you're running a lot of tests. To access it from the browser: http://equal.local/console.php There you can find informations about your error, here is an example : 01 -05-2022 14 :44:43+0.41235100 Warning **@** [ ` C: \\w amp64 \\w ww \\e qual \\l ib \\ equal \\o rm \\C ollection.class.php:335 ` ] **in** ` equal \\o rm \\D omain::toString () ` : Undefined offset: 1 An other example , if I did the request : http://equal.local/?get=model_collect The built-in responses, usually already give some informations about the error : \"errors\" : { \"MISSING_PARAM\" : \"entity\" } Each Controller tells explicitly which parameters are required . Now, if I check inside the console, it would tell me the same : 01 -06-2022 12 :10:17+0.31526700 Warning @ [ C: \\w amp64 \\w ww \\e qual \\r un.php:185 ] in { main }() : QN_DEBUG_ORM::MISSING_PARAM - entity An entity is missing , if I do add one : http://equal.local/?get=model_collect&entity=core\\User I will get a JSON-object with all the users. Debug mode \u00b6 It is possible to filter the kind of errors that are present in the console, by setting the DEBUG_MODE parameter in your config.inc.php file define('DEBUG_MODE', QN_DEBUG_PHP | QN_DEBUG_ORM | QN_DEBUG_SQL | QN_DEBUG_APP); The DEBUG_MODE constant expects a binary mask with the following values : VALUE MEANING QN_DEBUG_PHP The layer is PHP code, the lowest one. ex : trigger_error() QN_DEBUG_SQL The layer is SQL errors. QN_DEBUG_ORM The layer is eQual's ObjectManager . The validation method also handles orm errors. QN_DEBUG_APP The application layer is handled by eQual's controllers (data & actions folders).","title":"Debugging"},{"location":"usage/debugging/#debugging","text":"","title":"Debugging"},{"location":"usage/debugging/#console","text":"To help you with human-readable data, eQual comes with its own UI debug console (which simply reads the qn_error.log located in the /log directory). Note: eq_error.log provides information for each occurring event, so don't forget to delete that file from time to time if you don't want to end up with a huge logs. Especially if you're running a lot of tests. To access it from the browser: http://equal.local/console.php There you can find informations about your error, here is an example : 01 -05-2022 14 :44:43+0.41235100 Warning **@** [ ` C: \\w amp64 \\w ww \\e qual \\l ib \\ equal \\o rm \\C ollection.class.php:335 ` ] **in** ` equal \\o rm \\D omain::toString () ` : Undefined offset: 1 An other example , if I did the request : http://equal.local/?get=model_collect The built-in responses, usually already give some informations about the error : \"errors\" : { \"MISSING_PARAM\" : \"entity\" } Each Controller tells explicitly which parameters are required . Now, if I check inside the console, it would tell me the same : 01 -06-2022 12 :10:17+0.31526700 Warning @ [ C: \\w amp64 \\w ww \\e qual \\r un.php:185 ] in { main }() : QN_DEBUG_ORM::MISSING_PARAM - entity An entity is missing , if I do add one : http://equal.local/?get=model_collect&entity=core\\User I will get a JSON-object with all the users.","title":"Console"},{"location":"usage/debugging/#debug-mode","text":"It is possible to filter the kind of errors that are present in the console, by setting the DEBUG_MODE parameter in your config.inc.php file define('DEBUG_MODE', QN_DEBUG_PHP | QN_DEBUG_ORM | QN_DEBUG_SQL | QN_DEBUG_APP); The DEBUG_MODE constant expects a binary mask with the following values : VALUE MEANING QN_DEBUG_PHP The layer is PHP code, the lowest one. ex : trigger_error() QN_DEBUG_SQL The layer is SQL errors. QN_DEBUG_ORM The layer is eQual's ObjectManager . The validation method also handles orm errors. QN_DEBUG_APP The application layer is handled by eQual's controllers (data & actions folders).","title":"Debug mode"},{"location":"usage/directory-structure/","text":"\u00b6 Directory structure \u00b6 To understand the framework, here is what you need to know about its folders Root directory structure \u00b6 / \u251c\u2500\u2500 bin \u251c\u2500\u2500 lib \u251c\u2500\u2500 packages \u251c\u2500\u2500 public \u2502 \u251c\u2500\u2500 .htaccess \u2502 \u2514\u2500\u2500 index.php \u251c\u2500\u2500 spool \u251c\u2500\u2500 eq.lib.php \u2514\u2500\u2500 run.php FILE DESCRIPTION .htaccess Apache configuration file used to prevent directory listing and handling url rewriting eq.lib.php Boostrap library. Defines constants and global utilities index.php This script is also referred to as the dispatcher : its task is to include required libraries and to set the context. This is the main entry point. run.php Server script for client-server mode lib Folder containing eQual library (mostly classes and services definitions) packages Folder containing installed packages (classes definition, translations, views, actions, \u2026) public Root public folder for the web server bin Folder containing values of binary fields see BINARY_STORAGE_DIR spool Dedicated to email sending The root folder is also the place where to place a composer.json file and the subsequent /vendor directory. public \u00b6 FILE DESCRIPTION .htaccess Apache configuration file used to prevent directory listing and handling url rewriting index.php This script is also referred to as the dispatcher : its task is to include required libraries and to set the context. This is the main entry point. console.php This is the only alternate entry point. assets static content, javascripts, stylesheets, images, config, translation assets/env eQual Configuration file. assets/i18n Translation files. The entry point of every project, you'll find index.php as well as the packages you will use config \u00b6 \u200b default.inc.php , to configure your database and other parameters \u200b config-example.inc.php , rename it as config.inc.php to use custom configuration lib \u00b6 \u200b Libraries and services used as external resources run.php \u00b6 \u200b Defines the DO, GET and SHOW behaviors for our queries, either by CLI, HTTP or PHP Packages \u00b6 An application is divided in several parts, stored in a package folder located under the /packages directory. Each package might contain the following folders (underlined folders are mandatory). Each package is defined as follows : package_name \u251c\u2500\u2500 classes \u2502 \u2514\u2500\u2500 */*.class.php \u251c\u2500\u2500 actions \u2502 \u2514\u2500\u2500 */*.php \u251c\u2500\u2500 apps \u2502 \u2514\u2500\u2500 */*.php \u251c\u2500\u2500 data \u2502 \u2514\u2500\u2500 */*.php \u251c\u2500\u2500 tests \u2502 \u2514\u2500\u2500 */*.php \u251c\u2500\u2500 init \u2502 \u2514\u2500\u2500 *.json \u251c\u2500\u2500 views \u2502 \u251c\u2500\u2500 \u2502 \u2514\u2500\u2500 *.json \u251c\u2500\u2500 i18n \u2502 \u2514\u2500\u2500 * \u2502 \u2514\u2500\u2500 *.json \u251c\u2500\u2500 manifest.json \u251c\u2500\u2500 config.inc.php \u2514\u2500\u2500 readme.md FOLDER ROLE URI KEY EXAMPLES classes model core\\User.class.php , core\\Group.class.php , core\\Permission.class.php actions action handler (controller) do core_manage, core_utils apps applications related to the package auth, apps data data provider get core_objects_browse, core_user_lang test test units do default.php init initialize the package with data ( requires : import=true ) or routes do core_Group.json views templates User.form.default.json , User.list.default.json i18n translations User.json assets static html static content, javascripts, stylesheets, images manifest.json \u00b6 The manifest is a file containing informations about the package and its apps: \u251c\u2500\u2500 name* -> PACKAGE \u251c\u2500\u2500 depends_on \u251c\u2500\u2500 apps -> APPS \u2514\u2500\u2500 \u251c\u2500\u2500 name** \u251c\u2500\u2500 description \u251c\u2500\u2500 url \u251c\u2500\u2500 icon \u251c\u2500\u2500 color \u251c\u2500\u2500 access \u2514\u2500\u2500 \u251c\u2500\u2500 groups Package PROPERTY ROLE EXAMPLES name* name of the package \"core\", \"finance\" depends_on packages that need to be instanciated preventively [\"core\", \"finance\"] apps applications related to the package auth, apps Apps PROPERTY ROLE EXAMPLES name** name of the application APPS_APP_SETTINGS description description of the application url url of the application /auth icon (optional) material icons representing the application settings color (optional) color attributed to the application #FF9741 access/groups groups giving access to the application setting.default.user","title":"Directory Structure"},{"location":"usage/directory-structure/#directory-structure","text":"To understand the framework, here is what you need to know about its folders","title":"Directory structure"},{"location":"usage/directory-structure/#root-directory-structure","text":"/ \u251c\u2500\u2500 bin \u251c\u2500\u2500 lib \u251c\u2500\u2500 packages \u251c\u2500\u2500 public \u2502 \u251c\u2500\u2500 .htaccess \u2502 \u2514\u2500\u2500 index.php \u251c\u2500\u2500 spool \u251c\u2500\u2500 eq.lib.php \u2514\u2500\u2500 run.php FILE DESCRIPTION .htaccess Apache configuration file used to prevent directory listing and handling url rewriting eq.lib.php Boostrap library. Defines constants and global utilities index.php This script is also referred to as the dispatcher : its task is to include required libraries and to set the context. This is the main entry point. run.php Server script for client-server mode lib Folder containing eQual library (mostly classes and services definitions) packages Folder containing installed packages (classes definition, translations, views, actions, \u2026) public Root public folder for the web server bin Folder containing values of binary fields see BINARY_STORAGE_DIR spool Dedicated to email sending The root folder is also the place where to place a composer.json file and the subsequent /vendor directory.","title":"Root directory structure"},{"location":"usage/directory-structure/#public","text":"FILE DESCRIPTION .htaccess Apache configuration file used to prevent directory listing and handling url rewriting index.php This script is also referred to as the dispatcher : its task is to include required libraries and to set the context. This is the main entry point. console.php This is the only alternate entry point. assets static content, javascripts, stylesheets, images, config, translation assets/env eQual Configuration file. assets/i18n Translation files. The entry point of every project, you'll find index.php as well as the packages you will use","title":"public"},{"location":"usage/directory-structure/#config","text":"\u200b default.inc.php , to configure your database and other parameters \u200b config-example.inc.php , rename it as config.inc.php to use custom configuration","title":"config"},{"location":"usage/directory-structure/#lib","text":"\u200b Libraries and services used as external resources","title":"lib"},{"location":"usage/directory-structure/#runphp","text":"\u200b Defines the DO, GET and SHOW behaviors for our queries, either by CLI, HTTP or PHP","title":"run.php"},{"location":"usage/directory-structure/#packages","text":"An application is divided in several parts, stored in a package folder located under the /packages directory. Each package might contain the following folders (underlined folders are mandatory). Each package is defined as follows : package_name \u251c\u2500\u2500 classes \u2502 \u2514\u2500\u2500 */*.class.php \u251c\u2500\u2500 actions \u2502 \u2514\u2500\u2500 */*.php \u251c\u2500\u2500 apps \u2502 \u2514\u2500\u2500 */*.php \u251c\u2500\u2500 data \u2502 \u2514\u2500\u2500 */*.php \u251c\u2500\u2500 tests \u2502 \u2514\u2500\u2500 */*.php \u251c\u2500\u2500 init \u2502 \u2514\u2500\u2500 *.json \u251c\u2500\u2500 views \u2502 \u251c\u2500\u2500 \u2502 \u2514\u2500\u2500 *.json \u251c\u2500\u2500 i18n \u2502 \u2514\u2500\u2500 * \u2502 \u2514\u2500\u2500 *.json \u251c\u2500\u2500 manifest.json \u251c\u2500\u2500 config.inc.php \u2514\u2500\u2500 readme.md FOLDER ROLE URI KEY EXAMPLES classes model core\\User.class.php , core\\Group.class.php , core\\Permission.class.php actions action handler (controller) do core_manage, core_utils apps applications related to the package auth, apps data data provider get core_objects_browse, core_user_lang test test units do default.php init initialize the package with data ( requires : import=true ) or routes do core_Group.json views templates User.form.default.json , User.list.default.json i18n translations User.json assets static html static content, javascripts, stylesheets, images","title":"Packages"},{"location":"usage/directory-structure/#manifestjson","text":"The manifest is a file containing informations about the package and its apps: \u251c\u2500\u2500 name* -> PACKAGE \u251c\u2500\u2500 depends_on \u251c\u2500\u2500 apps -> APPS \u2514\u2500\u2500 \u251c\u2500\u2500 name** \u251c\u2500\u2500 description \u251c\u2500\u2500 url \u251c\u2500\u2500 icon \u251c\u2500\u2500 color \u251c\u2500\u2500 access \u2514\u2500\u2500 \u251c\u2500\u2500 groups Package PROPERTY ROLE EXAMPLES name* name of the package \"core\", \"finance\" depends_on packages that need to be instanciated preventively [\"core\", \"finance\"] apps applications related to the package auth, apps Apps PROPERTY ROLE EXAMPLES name** name of the application APPS_APP_SETTINGS description description of the application url url of the application /auth icon (optional) material icons representing the application settings color (optional) color attributed to the application #FF9741 access/groups groups giving access to the application setting.default.user","title":"manifest.json"},{"location":"usage/error-handling/","text":"Exception Hanling \u00b6 Exception and Throwable \u00b6 Since PHP 7, all Exceptions and Errors are handled as Throwable objects. eQual natively handles most errors as exceptions. While it remains possible to use try/catch blocks, any \"throwable\" that is not explicitly unhandled will by handled by eQual. Every raised error/exception is either handled in contollers, or catched by the run() method and is eventually turned into a HTTP error code. The error codes are defined inside the eq.lib.php file. CONSTANT VALUE HTTP DESCRIPTION QN_ERROR_UNKNOWN -1 500 Something went wrong (that requires to check the logs). Equivalent to HTTP 'Internal Server Error'. QN_ERROR_MISSING_PARAM -2 400 One or more mandatory parameters are missing. Equivalent to HTTP 'Bad Request'. QN_ERROR_INVALID_PARAM -4 400 One or more parameters have invalid or incompatible value. Equivalent to HTTP 'Bad Request'. QN_ERROR_SQL -8 456 There was an error while building SQL query or processing it (check that object class matches DB schema). Equivalent to HTTP 'Unrecoverable Error'. QN_ERROR_UNKNOWN_OBJECT -16 404 The request Unknown resource (class, object, view, ...). Equivalent to HTTP 'Not Found'. QN_ERROR_NOT_ALLOWED -32 403 Action violates some rule (including UPLOAD_MAX_FILE_SIZE for binary fields) or user don't have required permissions. Equivalent to HTTP 'Forbidden'. QN_ERROR_LOCKED_OBJECT -64 423 Object cannot be updated because it is locked by another user. Equivalent to HTTP 'Locked'. QN_ERROR_CONFLICT_OBJECT -128 409 Version conflict (object has been changed in between). Equivalent to HTTP 'Conflict'. QN_ERROR_INVALID_USER -256 401 Authentication failure (invalid user or token). Equivalent to HTTP 'Unauthorized'. QN_ERROR_UNKNOWN_SERVICE -512 503 Server error : missing service. Equivalent to HTTP 'Service Unavailable'. QN_ERROR_INVALID_CONFIG -1024 500 Server error : faulty configuration. Equivalent to HTTP 'Internal Server Error'.","title":"Error Handling"},{"location":"usage/error-handling/#exception-hanling","text":"","title":"Exception Hanling"},{"location":"usage/error-handling/#exception-and-throwable","text":"Since PHP 7, all Exceptions and Errors are handled as Throwable objects. eQual natively handles most errors as exceptions. While it remains possible to use try/catch blocks, any \"throwable\" that is not explicitly unhandled will by handled by eQual. Every raised error/exception is either handled in contollers, or catched by the run() method and is eventually turned into a HTTP error code. The error codes are defined inside the eq.lib.php file. CONSTANT VALUE HTTP DESCRIPTION QN_ERROR_UNKNOWN -1 500 Something went wrong (that requires to check the logs). Equivalent to HTTP 'Internal Server Error'. QN_ERROR_MISSING_PARAM -2 400 One or more mandatory parameters are missing. Equivalent to HTTP 'Bad Request'. QN_ERROR_INVALID_PARAM -4 400 One or more parameters have invalid or incompatible value. Equivalent to HTTP 'Bad Request'. QN_ERROR_SQL -8 456 There was an error while building SQL query or processing it (check that object class matches DB schema). Equivalent to HTTP 'Unrecoverable Error'. QN_ERROR_UNKNOWN_OBJECT -16 404 The request Unknown resource (class, object, view, ...). Equivalent to HTTP 'Not Found'. QN_ERROR_NOT_ALLOWED -32 403 Action violates some rule (including UPLOAD_MAX_FILE_SIZE for binary fields) or user don't have required permissions. Equivalent to HTTP 'Forbidden'. QN_ERROR_LOCKED_OBJECT -64 423 Object cannot be updated because it is locked by another user. Equivalent to HTTP 'Locked'. QN_ERROR_CONFLICT_OBJECT -128 409 Version conflict (object has been changed in between). Equivalent to HTTP 'Conflict'. QN_ERROR_INVALID_USER -256 401 Authentication failure (invalid user or token). Equivalent to HTTP 'Unauthorized'. QN_ERROR_UNKNOWN_SERVICE -512 503 Server error : missing service. Equivalent to HTTP 'Service Unavailable'. QN_ERROR_INVALID_CONFIG -1024 500 Server error : faulty configuration. Equivalent to HTTP 'Internal Server Error'.","title":"Exception and Throwable"},{"location":"usage/i18n/","text":"Translations \u00b6 Two distinct mechanisms are involved in i18n (internationalisation): translation of the values when depending on the language used for storing the Model; translation of the fields labels when objects are rendered within a View; As naming convention , language identification uses the ISO codes for language and country, separated by a dash. The country code being optional. Each code is two letters long, lower case for language and uppercase for country. Syntax: {ISO639-1 lang}[-{ISO-3166-1 country}] Examples : fr : standard french fr-CA : french Canadian zh-CN : simplified chinese Model - Translation of fields values \u00b6 Any non-relational field can be translated (see Fields types). The ORM uses a dedicated Model core\\Translation to store the terms translations. When a field is marked as multilang , the values of its translations can be retrieved with a SQL query. 'Translation' object fields: <?php /*[...]*/ class Translation extends Model { public static function getColumns () { return [ 'language' => [ 'type' => 'string' , 'usage' => 'language/iso-639:2' ], 'object_class' => [ 'type' => 'string' ], 'object_field' => [ 'type' => 'string' ], 'object_id' => [ 'type' => 'integer' ], 'value' => [ 'type' => 'binary' ] ]; } } For the value field, the SQL MEDIUMBLOB type is used (overhead of 3 bytes, max size of 16,7 Mo). Indeed, the size of the 'value' column may vary greatly from one type to another (the binary type may represent a document, a picture, a video, \u2026). And, most of the time, fields that must be translated are texts (string, short_text or text). In any case, a 3 characters overhead is acceptable (and set a 16 Mo limit should not be a problem). Note : as the only condition for the SQL type is to be compatible with the associated eQual type, in order for a binary field to be translated (for instance a PDF doc available in different languages), the size of the PDF should remain smaller than the SQL MEDIUMBLOB type (16 MB with MySQL). Using multilang in CRUD \u00b6 i18n is applied on a field basis. To mark a field for i18n support and allow to store several translations for it, the multilang property must be set to true in the related class definition file. Example : <?php 'field' => [ 'type' => 'string' , 'multilang' => true ] To understand how it works, let's compare with a normal http UPDATE controller (which is also valid for CREATE) : <?php // [...] MyClass :: ids ( $id ) -> update ( $fields ) -> read ([ 'field1' , 'field2' ]) -> first (); Now let's use the multilang field by adding a parameter in our request : <?php // [...] $lang = 'fr' ; MyClass :: ids ( $id ) -> update ( $fields , $lang ) -> read ([ 'field1' , 'field2' ], $lang ) -> first (); Using the $lang parameter ( DEFAULT_LANG by default) indicates the ORM which value to return for fields set as multilang . Note: you don't need to specify language for a DELETE request since the whole object gets deleted And it's the same process for a GET request, for instance : <?php // [...] $lang = 'en' ; MyClass :: search () -> read ([ 'field1' , 'field2' ], $lang ) -> get ( true ); Now there is a special case you're very likely to encounter : CREATE an object with multiple translations at once. Here is how you should proceed : <?php // [...] $lang1 = 'fr' ; $lang2 = 'en' ; MyClass :: create ( $fields , $lang1 ) -> read ([ 'field1' , 'field2' ]) -> first (); MyClass :: ids ( $id ) -> update ( $fields , $lang2 ); What it does, is updating your initial object with the secondary language If you want to add more than 2 languages, you can repeat that last line for as many languages needed. Like so : <?php // [...] MyClass :: ids ( $id ) -> update ( $fields , $lang2 ); // $lang2 = 'en' MyClass :: ids ( $id ) -> update ( $fields , $lang3 ); // $lang3 = 'es' View - Translation of the terms related to a class \u00b6 Each package can have an optional folder named i18n . If such folder exists, it must contain a subfolder for each language used by the backend (according to naming convention and as defined in the configuration). Inside those folders, translations are stored in .json files which prefixes are identical to the class they refer to (ex. : User.json ). Those translation files use UTF-8 encoding and JSON format, and contain the translation of all terms that might be translated (attributes label , description , selection , and help ). The translation file has the name and the plural of the name of the class, as well as a description for it. The model section which consist of a map of all the field names that are present in the class, to which is associated a list of attributes with their related translations. Possible attributes are : label attribute is the name of the field that we want the user to see and it must start with a capital letter. description attribute is considered an additional information or a small brief for the field, to assist users in understanding the use of it. This attribute should start with a capital letter and end with either \".\", \"?\" or \"!\". selection attribute is usually added for the \"type\" field of the class, which allows the translation of the available options of the field. help attribute is going to be used as a more detailed explanation about the view's fields, in case the user didn't properly understand the description . For the moment, this attribute is going to be an empty string, but should be added to all the fields. The view section that translates all the section names of the tabs or the groups, if present in the form view. Since some classes may have multiple types of views, like \"Partner.form.default.json\" and \"Partner.form.payer.json\" , the view section will contain the name of the type (in this case \"form.default\" and \"form.payer\" ). Inside each object a name , description and layout containing the \"id\" of the view's sections and assigning a label to it, will be displayed as shown below. \"view\" : { \"form.default\" : { \"name\" : \"Partenaires\" , \"description\" : \"Formulaire de base pour afficher les partenaires\" , \"layout\" : {} }, \"list.default\" : { \"name\" : \"Partneraires\" , \"description\" : \"Liste de base des partenaires pr\u00e9-existants\" , \"layout\" : {} }, \"form.payer\" : { \"name\" : \"Client\" , \"description\" : \"Formulaire de base pour les clients pr\u00e9-existants\" , \"layout\" : {} }, \"list.customer\" : { \"name\" : \"Clients\" , \"description\" : \"Liste de base des clients pr\u00e9-existants\" , \"layout\" : {} }, \"list.contact\" : { \"name\" : \"Contacts\" , \"description\" : \"List des contacts pr\u00e9-existants\" , \"layout\" : {} } } In this example, multiple view type exists but all the layouts are empty because none of them were divided into sections. A none empty layout, which means that the view is actually divided into sections or tabs will look like the following example, where \"section.identity_info\", \"section.identity_main_address\", \"section.identity_addresses\", and \"section.identity_description\" are the sections ids and the labels are the name we want to be shown on the user side. Usually \"list.default\" type have an empty layout because it is a table, so it will not be divided into sections. \"view\" : { \"form.default\" : { \"name\" : \"Identit\u00e9\" , \"description\" : \"Formulaire de base pour afficher des groupes\" , \"layout\" : { \"section.identity_info\" : { \"label\" : \"Informations g\u00e9n\u00e9rales\" }, \"section.identity_main_address\" : { \"label\" : \"Adresse principale\" }, \"section.identity_addresses\" : { \"label\" : \"Autres adresses\" }, \"section.identity_description\" : { \"label\" : \"Description\" } } }, \"list.default\" : { \"name\" : \"Liste d'identit\u00e9s\" , \"description\" : \"Liste de base d'identit\u00e9s pr\u00e9-existantes\" , \"layout\" : {} } } The error section is used for translating the form validation (Usually added for the Login/Sign Up form). In every i18n (translation) folder in each package, the user has the ability to create a Markdown (.md) file to better explain what the view does and how it works. For example, to explain more about Booking list view, we can create a \"Booking.list.default.md\" file inside the i18n folder where this view is present and write down more explanation about it. We can write that this view represents all the booking history related to a center of the logged user, and that they should be displayed in descending order which means that the most recent posts are the ones shown first. Example of french (fr) translation using \u00b6 Example of french (fr) translation using i18n { \"name\" : \"R\u00e8gle de Tva\" , \"plural\" : \"R\u00e8gles de Tva\" , \"description\" : \"Les r\u00e8gles comptables permettent de pr\u00e9ciser sur quel compte une op\u00e9ration doit \u00eatre imput\u00e9e.\" , \"model\" : { \"name\" :{ \"label\" : \"Nom\" , \"description\" : \"Nom de la r\u00e8gle comptable.\" , \"help\" : \"\" }, \"description\" :{ \"label\" : \"Description\" , \"description\" : \"Br\u00e8ve description de la r\u00e8gle pour servir de m\u00e9mo.\" , \"help\" : \"\" }, \"type\" :{ \"label\" : \"Type\" , \"description\" : \"Type d'op\u00e9ration auquel cette r\u00e8gle se rapporte.\" , \"selection\" : { \"purchase\" : \"achat\" , \"sale\" : \"vente\" }, \"help\" : \"\" }, \"vat_rule_id\" :{ \"label\" : \"R\u00e8gle de TVA\" , \"description\" : \"R\u00e8gle de TVA \u00e0 laquelle cette ligne est li\u00e9e.\" , \"help\" : \"\" }, \"accounting_rule_line_ids\" :{ \"label\" : \"Lignes li\u00e9es \u00e0 cette r\u00e8gle\" , \"description\" : \"Lignes li\u00e9es \u00e0 cette r\u00e8gle.\" , \"help\" : \"\" } }, \"view\" : { \"form.default\" : { \"name\" : \"R\u00e8gles de Tva\" , \"description\" : \"Vue par d\u00e9faut des r\u00e8gles comptables avec tous les champs\" , \"layout\" : { \"section.accounting_rules_section\" : { \"label\" : \"D\u00e9tails\" }, \"section.accounting_rulelines\" : { \"label\" : \"Ligne de r\u00e8gle comptable\" } } }, \"list.default\" : { \"name\" : \"Liste des R\u00e8gles de Tva\" , \"description\" : \"Cette vue est destin\u00e9e \u00e0 afficher les r\u00e8gles comptables.\" , \"layout\" : {} } }, \"error\" : { } } Multiple translation files \u00b6 Classes may be used in different packages (extending parent classes with the possibility of adding new fields) and therefore, they also may have different translation files. Here is an example of an extended class. <?php namespace lodging\\sale\\booking ; class Contact extends \\sale\\booking\\Contact { public static function getName () { return \"Contact\" ; } public static function getDescription () { return \"Booking contacts are persons involved in the organisation of a booking.\" ; } public static function getColumns () { return [ 'owner_identity_id' => [ 'type' => 'many2one' , 'foreign_object' => 'lodging\\identity\\Identity' , 'description' => 'The organisation which the targeted identity is a partner of.' , 'default' => 1 ], 'partner_identity_id' => [ 'type' => 'many2one' , 'foreign_object' => 'lodging\\identity\\Identity' , 'description' => 'The targeted identity (the partner).' , 'onupdate' => 'identity\\Partner::onupdatePartnerIdentityId' , 'required' => true ], 'booking_id' => [ 'type' => 'many2one' , 'foreign_object' => 'lodging\\sale\\booking\\Booking' , 'description' => 'Booking the contact relates to.' , 'required' => true ], 'owner_identity_id' => [ 'type' => 'many2one' , 'foreign_object' => 'lodging\\identity\\Identity' , 'description' => 'The organisation which the targeted identity is a partner of.' , 'default' => 1 ] ]; } } If multiple translation files exist, the child class ( extending the parent ) gets overloaded with the parent ( being extended ) translation files. Also, if the same fields are translated, the translation used is the lowest/furthest one in the translation hierarchy (the translation file of the child class). For example, if the class Contact inside the package sale and the one inside the package lodging both have inside the i18n folder a file named Contact.json in which the field booking_id is translated, the translation inside the package lodging (extending the class inside the package sale) will be the one used. On the other hand, if different fields are translated, the child class (inside the package lodging in the above example) will inherit the translations from the parent classes. This scenario goes on until we reach the root-parent class \"equal\\orm\\Model\" . Translation of Menus \u00b6 Even though Menu views are different than Form Views , their translation is the same. However, menu's don't contain anything in there model section since it has no fields, which is why it won't be displayed in the translation of it. The view section is similar to the ones shown above, containing the \"id\" of the section, its \"label\" and an empty \"layout\" object because all items in the menu are considered as a new view type even if it's a children item in the view. Below is the structured menu translation: { \"description\" : \"\" , \"view\" : { \"item.bookings\" : { \"label\" : \"R\u00e9servations\" , \"description\" : \"\" , \"layout\" : {} }, \"item.customers\" : { \"label\" : \"Clients\" , \"description\" : \"\" , \"layout\" : {} }, \"item.planning\" : { \"label\" : \"Calendrier\" , \"description\" : \"\" , \"layout\" : {} } } } Translation files are stored in a specific i18n folders, in the packages directory which entities belong to. Generic filename format is : packages/{package_name}/i18n/{lang}/{class_name}.json Translation files are requested using the config_i18n controller: Example : ```bash $ ./equal.run --get=config_i18n --entity=core\\User --lang=fr","title":"i18n"},{"location":"usage/i18n/#translations","text":"Two distinct mechanisms are involved in i18n (internationalisation): translation of the values when depending on the language used for storing the Model; translation of the fields labels when objects are rendered within a View; As naming convention , language identification uses the ISO codes for language and country, separated by a dash. The country code being optional. Each code is two letters long, lower case for language and uppercase for country. Syntax: {ISO639-1 lang}[-{ISO-3166-1 country}] Examples : fr : standard french fr-CA : french Canadian zh-CN : simplified chinese","title":"Translations"},{"location":"usage/i18n/#model-translation-of-fields-values","text":"Any non-relational field can be translated (see Fields types). The ORM uses a dedicated Model core\\Translation to store the terms translations. When a field is marked as multilang , the values of its translations can be retrieved with a SQL query. 'Translation' object fields: <?php /*[...]*/ class Translation extends Model { public static function getColumns () { return [ 'language' => [ 'type' => 'string' , 'usage' => 'language/iso-639:2' ], 'object_class' => [ 'type' => 'string' ], 'object_field' => [ 'type' => 'string' ], 'object_id' => [ 'type' => 'integer' ], 'value' => [ 'type' => 'binary' ] ]; } } For the value field, the SQL MEDIUMBLOB type is used (overhead of 3 bytes, max size of 16,7 Mo). Indeed, the size of the 'value' column may vary greatly from one type to another (the binary type may represent a document, a picture, a video, \u2026). And, most of the time, fields that must be translated are texts (string, short_text or text). In any case, a 3 characters overhead is acceptable (and set a 16 Mo limit should not be a problem). Note : as the only condition for the SQL type is to be compatible with the associated eQual type, in order for a binary field to be translated (for instance a PDF doc available in different languages), the size of the PDF should remain smaller than the SQL MEDIUMBLOB type (16 MB with MySQL).","title":"Model - Translation of fields values"},{"location":"usage/i18n/#using-multilang-in-crud","text":"i18n is applied on a field basis. To mark a field for i18n support and allow to store several translations for it, the multilang property must be set to true in the related class definition file. Example : <?php 'field' => [ 'type' => 'string' , 'multilang' => true ] To understand how it works, let's compare with a normal http UPDATE controller (which is also valid for CREATE) : <?php // [...] MyClass :: ids ( $id ) -> update ( $fields ) -> read ([ 'field1' , 'field2' ]) -> first (); Now let's use the multilang field by adding a parameter in our request : <?php // [...] $lang = 'fr' ; MyClass :: ids ( $id ) -> update ( $fields , $lang ) -> read ([ 'field1' , 'field2' ], $lang ) -> first (); Using the $lang parameter ( DEFAULT_LANG by default) indicates the ORM which value to return for fields set as multilang . Note: you don't need to specify language for a DELETE request since the whole object gets deleted And it's the same process for a GET request, for instance : <?php // [...] $lang = 'en' ; MyClass :: search () -> read ([ 'field1' , 'field2' ], $lang ) -> get ( true ); Now there is a special case you're very likely to encounter : CREATE an object with multiple translations at once. Here is how you should proceed : <?php // [...] $lang1 = 'fr' ; $lang2 = 'en' ; MyClass :: create ( $fields , $lang1 ) -> read ([ 'field1' , 'field2' ]) -> first (); MyClass :: ids ( $id ) -> update ( $fields , $lang2 ); What it does, is updating your initial object with the secondary language If you want to add more than 2 languages, you can repeat that last line for as many languages needed. Like so : <?php // [...] MyClass :: ids ( $id ) -> update ( $fields , $lang2 ); // $lang2 = 'en' MyClass :: ids ( $id ) -> update ( $fields , $lang3 ); // $lang3 = 'es'","title":"Using multilang in CRUD"},{"location":"usage/i18n/#view-translation-of-the-terms-related-to-a-class","text":"Each package can have an optional folder named i18n . If such folder exists, it must contain a subfolder for each language used by the backend (according to naming convention and as defined in the configuration). Inside those folders, translations are stored in .json files which prefixes are identical to the class they refer to (ex. : User.json ). Those translation files use UTF-8 encoding and JSON format, and contain the translation of all terms that might be translated (attributes label , description , selection , and help ). The translation file has the name and the plural of the name of the class, as well as a description for it. The model section which consist of a map of all the field names that are present in the class, to which is associated a list of attributes with their related translations. Possible attributes are : label attribute is the name of the field that we want the user to see and it must start with a capital letter. description attribute is considered an additional information or a small brief for the field, to assist users in understanding the use of it. This attribute should start with a capital letter and end with either \".\", \"?\" or \"!\". selection attribute is usually added for the \"type\" field of the class, which allows the translation of the available options of the field. help attribute is going to be used as a more detailed explanation about the view's fields, in case the user didn't properly understand the description . For the moment, this attribute is going to be an empty string, but should be added to all the fields. The view section that translates all the section names of the tabs or the groups, if present in the form view. Since some classes may have multiple types of views, like \"Partner.form.default.json\" and \"Partner.form.payer.json\" , the view section will contain the name of the type (in this case \"form.default\" and \"form.payer\" ). Inside each object a name , description and layout containing the \"id\" of the view's sections and assigning a label to it, will be displayed as shown below. \"view\" : { \"form.default\" : { \"name\" : \"Partenaires\" , \"description\" : \"Formulaire de base pour afficher les partenaires\" , \"layout\" : {} }, \"list.default\" : { \"name\" : \"Partneraires\" , \"description\" : \"Liste de base des partenaires pr\u00e9-existants\" , \"layout\" : {} }, \"form.payer\" : { \"name\" : \"Client\" , \"description\" : \"Formulaire de base pour les clients pr\u00e9-existants\" , \"layout\" : {} }, \"list.customer\" : { \"name\" : \"Clients\" , \"description\" : \"Liste de base des clients pr\u00e9-existants\" , \"layout\" : {} }, \"list.contact\" : { \"name\" : \"Contacts\" , \"description\" : \"List des contacts pr\u00e9-existants\" , \"layout\" : {} } } In this example, multiple view type exists but all the layouts are empty because none of them were divided into sections. A none empty layout, which means that the view is actually divided into sections or tabs will look like the following example, where \"section.identity_info\", \"section.identity_main_address\", \"section.identity_addresses\", and \"section.identity_description\" are the sections ids and the labels are the name we want to be shown on the user side. Usually \"list.default\" type have an empty layout because it is a table, so it will not be divided into sections. \"view\" : { \"form.default\" : { \"name\" : \"Identit\u00e9\" , \"description\" : \"Formulaire de base pour afficher des groupes\" , \"layout\" : { \"section.identity_info\" : { \"label\" : \"Informations g\u00e9n\u00e9rales\" }, \"section.identity_main_address\" : { \"label\" : \"Adresse principale\" }, \"section.identity_addresses\" : { \"label\" : \"Autres adresses\" }, \"section.identity_description\" : { \"label\" : \"Description\" } } }, \"list.default\" : { \"name\" : \"Liste d'identit\u00e9s\" , \"description\" : \"Liste de base d'identit\u00e9s pr\u00e9-existantes\" , \"layout\" : {} } } The error section is used for translating the form validation (Usually added for the Login/Sign Up form). In every i18n (translation) folder in each package, the user has the ability to create a Markdown (.md) file to better explain what the view does and how it works. For example, to explain more about Booking list view, we can create a \"Booking.list.default.md\" file inside the i18n folder where this view is present and write down more explanation about it. We can write that this view represents all the booking history related to a center of the logged user, and that they should be displayed in descending order which means that the most recent posts are the ones shown first.","title":"View - Translation of the terms related to a class"},{"location":"usage/i18n/#example-of-french-fr-translation-using","text":"Example of french (fr) translation using i18n { \"name\" : \"R\u00e8gle de Tva\" , \"plural\" : \"R\u00e8gles de Tva\" , \"description\" : \"Les r\u00e8gles comptables permettent de pr\u00e9ciser sur quel compte une op\u00e9ration doit \u00eatre imput\u00e9e.\" , \"model\" : { \"name\" :{ \"label\" : \"Nom\" , \"description\" : \"Nom de la r\u00e8gle comptable.\" , \"help\" : \"\" }, \"description\" :{ \"label\" : \"Description\" , \"description\" : \"Br\u00e8ve description de la r\u00e8gle pour servir de m\u00e9mo.\" , \"help\" : \"\" }, \"type\" :{ \"label\" : \"Type\" , \"description\" : \"Type d'op\u00e9ration auquel cette r\u00e8gle se rapporte.\" , \"selection\" : { \"purchase\" : \"achat\" , \"sale\" : \"vente\" }, \"help\" : \"\" }, \"vat_rule_id\" :{ \"label\" : \"R\u00e8gle de TVA\" , \"description\" : \"R\u00e8gle de TVA \u00e0 laquelle cette ligne est li\u00e9e.\" , \"help\" : \"\" }, \"accounting_rule_line_ids\" :{ \"label\" : \"Lignes li\u00e9es \u00e0 cette r\u00e8gle\" , \"description\" : \"Lignes li\u00e9es \u00e0 cette r\u00e8gle.\" , \"help\" : \"\" } }, \"view\" : { \"form.default\" : { \"name\" : \"R\u00e8gles de Tva\" , \"description\" : \"Vue par d\u00e9faut des r\u00e8gles comptables avec tous les champs\" , \"layout\" : { \"section.accounting_rules_section\" : { \"label\" : \"D\u00e9tails\" }, \"section.accounting_rulelines\" : { \"label\" : \"Ligne de r\u00e8gle comptable\" } } }, \"list.default\" : { \"name\" : \"Liste des R\u00e8gles de Tva\" , \"description\" : \"Cette vue est destin\u00e9e \u00e0 afficher les r\u00e8gles comptables.\" , \"layout\" : {} } }, \"error\" : { } }","title":"Example of french (fr) translation using"},{"location":"usage/i18n/#multiple-translation-files","text":"Classes may be used in different packages (extending parent classes with the possibility of adding new fields) and therefore, they also may have different translation files. Here is an example of an extended class. <?php namespace lodging\\sale\\booking ; class Contact extends \\sale\\booking\\Contact { public static function getName () { return \"Contact\" ; } public static function getDescription () { return \"Booking contacts are persons involved in the organisation of a booking.\" ; } public static function getColumns () { return [ 'owner_identity_id' => [ 'type' => 'many2one' , 'foreign_object' => 'lodging\\identity\\Identity' , 'description' => 'The organisation which the targeted identity is a partner of.' , 'default' => 1 ], 'partner_identity_id' => [ 'type' => 'many2one' , 'foreign_object' => 'lodging\\identity\\Identity' , 'description' => 'The targeted identity (the partner).' , 'onupdate' => 'identity\\Partner::onupdatePartnerIdentityId' , 'required' => true ], 'booking_id' => [ 'type' => 'many2one' , 'foreign_object' => 'lodging\\sale\\booking\\Booking' , 'description' => 'Booking the contact relates to.' , 'required' => true ], 'owner_identity_id' => [ 'type' => 'many2one' , 'foreign_object' => 'lodging\\identity\\Identity' , 'description' => 'The organisation which the targeted identity is a partner of.' , 'default' => 1 ] ]; } } If multiple translation files exist, the child class ( extending the parent ) gets overloaded with the parent ( being extended ) translation files. Also, if the same fields are translated, the translation used is the lowest/furthest one in the translation hierarchy (the translation file of the child class). For example, if the class Contact inside the package sale and the one inside the package lodging both have inside the i18n folder a file named Contact.json in which the field booking_id is translated, the translation inside the package lodging (extending the class inside the package sale) will be the one used. On the other hand, if different fields are translated, the child class (inside the package lodging in the above example) will inherit the translations from the parent classes. This scenario goes on until we reach the root-parent class \"equal\\orm\\Model\" .","title":"Multiple translation files"},{"location":"usage/i18n/#translation-of-menus","text":"Even though Menu views are different than Form Views , their translation is the same. However, menu's don't contain anything in there model section since it has no fields, which is why it won't be displayed in the translation of it. The view section is similar to the ones shown above, containing the \"id\" of the section, its \"label\" and an empty \"layout\" object because all items in the menu are considered as a new view type even if it's a children item in the view. Below is the structured menu translation: { \"description\" : \"\" , \"view\" : { \"item.bookings\" : { \"label\" : \"R\u00e9servations\" , \"description\" : \"\" , \"layout\" : {} }, \"item.customers\" : { \"label\" : \"Clients\" , \"description\" : \"\" , \"layout\" : {} }, \"item.planning\" : { \"label\" : \"Calendrier\" , \"description\" : \"\" , \"layout\" : {} } } } Translation files are stored in a specific i18n folders, in the packages directory which entities belong to. Generic filename format is : packages/{package_name}/i18n/{lang}/{class_name}.json Translation files are requested using the config_i18n controller: Example : ```bash $ ./equal.run --get=config_i18n --entity=core\\User --lang=fr","title":"Translation of Menus"},{"location":"usage/model-definition/","text":"Model definition \u00b6 Each Model is defined in a .class.php file , located in the /packages/{package_name}/classes file of the package it relates to (see Directory Structure ). All classes inherit from a common ancestor: the Model class, declared in the equal\\orm namespace and defined in /lib/equal/orm/Model.class.php . A class is always referred to as an entity and belongs to a package. Packages and their subdirectories are used as namespaces. The syntax is : {{package_name}}\\{{class_name}} (ex. : core\\setting\\SettingValue ). A class consists of a series of fields definition, along with specific methods. Here is an example of a Category class having multiple fields for which we will then show how to write its Form View and List View . <?php class Category extends Model { public static function getColumns () { return [ 'name' => [ 'type' => 'string' , 'description' => \"Name of the category (for all variants).\" , 'required' => true ], 'description' => [ 'type' => 'string' , 'description' => \"A few details about category purpose and usage.\" ], 'product_models_ids' => [ 'type' => 'many2many' , 'foreign_object' => 'sale\\catalog\\ProductModel' , 'foreign_field' => 'categories_ids' , 'rel_table' => 'sale_product_rel_productmodel_category' , 'rel_foreign_key' => 'productmodel_id' , 'rel_local_key' => 'category_id' , 'description' => 'List of product models assigned to the category.' ] ]; } } Classes \u00b6 Objects are grouped into classes that define the structure and methods of those objects. Classes definitions from a same package are placed into the folder //packages/[package_name]/classes//. Here is an example of the class definition syntax : <?php namespace school ; use equal\\orm\\Model ; class Student extends Model { public static function getColumns () { return [ 'firstname' => [ 'type' => 'string' ], 'lastname' => [ 'type' => 'string' ], 'birthdate' => [ 'type' => 'date' ] ]; } } Consistency with Database \u00b6 Classes are mapped with database tables. Each table having structure (columns) matching the fields defined in the model. Consistency between models ( *.class.php files) and database schema is done at package initialization (columns types must be compatible). It must be maintained manually in case of change. When a new class is created or the schema of a class is modified, the SQL schema must be adapted consequently. Controllers core_init_package and utils_sql-schema are made to help with this task. Also, Action controller core_test_package-consistency can help to spot any incompatibility or inconsistency in the definition the classes from a given package. Fields categories \u00b6 CATEGORY DESCRIPTION simple Direct field that holds a value of a given type. Such fields are stored as is in database and are automatically converted (SQL/PHP). relational Field whose value targets one or more objects. Supported relations are : one2many , many2many , and many2one (which behaves like a simple field) computed Indirect field that results from a computation based on other values. Computed fields have a final type that can be either simple or relational. Fields types \u00b6 The type property sets the type of the field. The following types are supported by the ORM : boolean integer float string text date time datetime binary many2one one2many many2many computed alias usage property The usage property is complementary to the type property and allows to refine the way the field should be handled by the ORM and the DBMS, and how it should be rendered in the UI. boolean \u00b6 Numeric value of Boolean type ( true or false ) Note For booleans, we use the PHP built-in constant : true and false (when using '0', '1', 0 or 1, value is converted to a bool). integer \u00b6 Signed numeric value (negative or positive). By default, strings are stored in DBMS using INT(11) . about integer precision PHP depends on the platform for integers size allocation ( PHP_INT_SIZE ), while SQL INT will always be 32 bits. float (double) \u00b6 Floating point numeric value (float or double) By default, strings are stored in DBMS using DECIMAL(10,2) . string \u00b6 Short string without formatting/carriage returns (ex: lastname, place, \u2026) By default, strings are stored in DBMS using VARCHAR(255) . Strings can potentially be long and include formatting, and some behavior require a specific combination of type and usage. For instance: <?php [ 'type' => 'string' , 'usage' => 'text/plain' ] will be stored as MEDIUMTEXT and the UI will know it has to display the field as a TEXTAREA rather than as an INPUT. whereas : <?php [ 'type' => 'string' , 'usage' => 'phone' ] will be stored as VARCHAR(20) . text \u00b6 By default, texts are stored in DMBS as text . The TEXT data type has a size of string characters upto 65,535 bytes to manage classic long-form contents of the text. binary \u00b6 Any binary value (ex : a picture, a document, \u2026) Binary values can either be stored in the database or within the filesystem, under the /bin folder of the installation. This behavior can be set using the FILE_STORAGE_MODE and FILE_STORAGE_DIR configuration parameter. file \u00b6 A file value is stored in the DB (like binaries) as a LONGBLOB . date, time & datetime \u00b6 When stored to the DBMS, those types follow the standard SQL format: date: YYYY-mm-dd time: HH:mm:ss datetime: YYYY-mm-dd HH:mm:ss Tip Internally, dates, times and datetimes are handled as timestamps. These are adapted to SQL format or JSON format when needed. many2one \u00b6 Relational field used for fields holding a N-1 relation. The stored value is an integer that holds the identifier of the pointed object. Example: <?php // from todolist\\Task // Each task has only 1 user assigned at a time 'user_id' => [ 'type' => 'many2one' , 'foreign_object' => 'todolist\\User' ] one2many \u00b6 1-N relation, related to a many2one object foreign_object -&gt; foreign_field -&gt; select amongst fields of other class + ability to create a new one (many2many) : temporary creation in one of both ways ! rel_table -&gt; check amongst existing rel tables ({package}_rel_local_foreign or rel_foreign_local) if no table yet -&gt; create rel_local_key -&gt; {local_class}_id rel_foreign_key -&gt; {foreign_class}_id <?php // todolist\\User // Each user can have many tasks 'tasks_ids' => [ 'type' => 'one2many' , 'foreign_object' => 'todolist\\Task' , 'foreign_field' => 'user_id' ] many2many \u00b6 M-N relation foreign_object -&gt; select amongst other classes + ability to create symetrical one (one2many) php <?php // school\\Teacher 'courses_ids' => [ 'type' => 'many2many', 'foreign_object' => 'school\\Course', 'foreign_field' => 'teachers_ids', 'rel_table' => 'school_rel_course_teacher', 'rel_foreign_key' => 'course_id', 'rel_local_key' => 'teacher_id' ] computed \u00b6 type: 'computed' function: string holding name of a callable method result_type : select ('boolean', 'integer', 'float', 'string', 'text', 'html' ) store : boolean Computed fields are not stored in the DB, unless the store attribute is set to true. To get it, we use the 'function' key, that will point at any function. It will return a processed value and afterwards, it can be stored inside the DB. Most of the time the use of the store attribute requires that field(s) on which depends the computed value, has an onchange event, triggering the update of the calculated field (see example). When trying to load a computed field, if 'store' is not defined or set to false, it computes the value using the provided method each time the field value is requested if 'store' is set to true and the field isn't in the DB (NULL), it computes the value using the provided method if 'store' is set to true and the field is in the DB, it uses the DB value <?php // Example from core\\Permission // ... 'rights' => [ 'type' => 'integer' , 'onupdate' => 'onchangeRights' ], 'rights_txt' => [ 'type' => 'computed' , 'store' => true , 'result_type' => 'string' , 'function' => 'calcRightsTxt' ], // ... public static function onupdateRights ( $om , $ids , $values , $lang ) { $om -> update ( __CLASS__ , $oids , [ 'rights_txt' => null , $lang ); } public static function calcRightsTxt ( $om , $ids , $lang ) { $res = array (); $values = $om -> read ( 'core\\Permission' , $ids , array ( 'rights' ), $lang ); foreach ( $ids as $oid ) { $rights_txt = array (); $rights = $values [ $oid ][ 'rights' ]; if ( $rights & QN_R_CREATE ) $rights_txt [] = 'create' ; if ( $rights & QN_R_READ ) $rights_txt [] = 'read' ; if ( $rights & QN_R_WRITE ) $rights_txt [] = 'write' ; if ( $rights & QN_R_DELETE ) $rights_txt [] = 'delete' ; if ( $rights & QN_R_MANAGE ) $rights_txt [] = 'manage' ; $res [ $oid ] = implode ( ', ' , $rights_txt ); } return $res ; } Fields properties \u00b6 Common properties \u00b6 PROPERTY DESCRIPTION type The type of field: one of the value listed as fields types . usage (string) Specifies additional information about the format of the field. description (string) Brief about the field (max 65 chars). visible (optional, boolean | array) Domain holding the conditions that must be met in order for the field to be relevant (and shown in UI). default (optional) (mixed) Tells how to get the default value of the field. Can be either a value (of the same type than the one target by type ) or a callable (string). readonly (boolean) Marks the field as non-editable (default = false). required (boolean) Marks the field as mandatory (trying to store an object without a value for that field raises error) (default = false). multilang (boolean) Marks the field as translatable (default = false). onupdate (optional, string) Name of the method to invoke when field is updated. Format: package\\Class::method Signature : public static function onupdateFieldName($orm, $oids, $values, $lang) {} domain (only relational fields, array) Domain holding the additional conditions to apply on the set of objects targeted by the relation. dependencies (optional, array) list of computed fields (relative to current object or through relations traversal) that must be reset when the value of the field is updated. There must be a symmetrical 'depends_on' on targeted computed fields. Type-related properties \u00b6 TYPE ATTRIBUTE USAGE string type Type of the field. Accepted types are: alias , computed , many2one , many2many , one2many , integer , string , float , boolean , text , date and datetime . multilang (optional, boolean) Tells if field is translatable (default = false) selection (optional, array) Pre-defined list or associative array holding the possible values for the field. Example alias alias (string) Targets another field whose value must be returned when fetching the field value. By default, the name field is an alias for the id field. many2one foreign_object Full name of the class toward which field is pointing back. ondelete Tells how to behave when the parent object is deleted. cascade : delete the children too. null : void the pointer and keep the children. one2many foreign_object (string) Class toward which current field is pointing back. foreign_field (string) Name of the field of the pointed class that is pointing back toward the current class. foreign_key (optional, string) Name of the field that serves as identifier for objects pointed by the relation (default = 'id') order (optional) Name of the field pointed objects must be sorted on. sort (optional, string) direction fort sorting (possible values: 'asc', 'desc') ondetach (string [null, delete]) Tells how to handle the children objects when the relation is removed: either set the pointer to null or delete the children objects. (default = null) many2many foreign_object Full name of the class the relation points to. foreign_field Name of the field of the pointed class that is pointing back toward the current class. rel_table Name of the SQL table dedicated to the m2m relation (recommended syntax: package_rel_class1_class2 ) rel_local_key Name of the column in rel_table holding the identifier of the current object. rel_foreign_key Name of the column in de rel_table holding the identifier of the pointed object. computed result_type Specifies the type of the result returned by the field function, which can be any of the allowed types. store (optional) boolean telling if the result must be stored in database (in that case, the related table must contain a column for the field). By default, this attribute is set to false . function String holding the name of the method to invoke for computing the value of the field. Syntax: method (relative to current class) or package\\Class::method (absolute notation) multilang (optional) Boolean flag telling if field can be translated (default value: false). This applies only for stored fields. depends_on (optional) Symetrical link allowing to check consistency of a class declaration (make sure that reverse inlinks are actually set) Example of a basic field using the selection attribute: <?php 'fieldname' => [ 'type' => 'string' , 'selection' => [ 'choice1' , 'choice2' , 'choice3' ] ] System fields \u00b6 Some fields are mandatory, and defined in the Model class. NAME TYPE ROLE id integer Unique identifier of the object. name string Name to use when referring to the object (in views). By default, this field is an alias of id . status string 'draft', 'instance', 'archive'. created datetime Date at which the object was created. creator foreign_object core\\User modified datetime Date date on which the object was last modified modifier foreign_object core\\User deleted boolean Marks the object as soft-deleted. Getters methods \u00b6 NAME DESCRIPTION getName() Get Model readable name. getDescription() Get Model description. getType() Provide the list of unique rules (array of combinations of fields). getLink() Get the URL associated with the class. getColumns() Returns the user-defined part of the schema (i.e. fields list with types and other attributes). getConstraints() Returns a map of constraint items associating fields with validation functions. getUnique() Provide the list of unique rules (array of combinations of fields). getFields() Returns all fields names. getValues() Returns values of static instance. getDefaults() Return default values. getTable() Return the name of the DB table to be used for storing objects of current class. Overridable methods \u00b6 NAME DESCRIPTION cancreate() Check wether an object can be created. oncreate() Hook invoked after object creation for performing object-specific additional operations. canupdate() Check wether an object can be updated. onupdate() Hook invoked before object update for performing object-specific additional operations. candelete() Check wether an object can be deleted. ondelete() Hook invoked before object deletion for performing object-specific additional operations. canclone() Check wether an object can be cloned. onclone() Hook invoked after object cloning for performing object-specific additional operations. onchange() Handler for virtual static methods: use classname to invoke a Collection method, if available. Custom methods \u00b6","title":"Model Definition"},{"location":"usage/model-definition/#model-definition","text":"Each Model is defined in a .class.php file , located in the /packages/{package_name}/classes file of the package it relates to (see Directory Structure ). All classes inherit from a common ancestor: the Model class, declared in the equal\\orm namespace and defined in /lib/equal/orm/Model.class.php . A class is always referred to as an entity and belongs to a package. Packages and their subdirectories are used as namespaces. The syntax is : {{package_name}}\\{{class_name}} (ex. : core\\setting\\SettingValue ). A class consists of a series of fields definition, along with specific methods. Here is an example of a Category class having multiple fields for which we will then show how to write its Form View and List View . <?php class Category extends Model { public static function getColumns () { return [ 'name' => [ 'type' => 'string' , 'description' => \"Name of the category (for all variants).\" , 'required' => true ], 'description' => [ 'type' => 'string' , 'description' => \"A few details about category purpose and usage.\" ], 'product_models_ids' => [ 'type' => 'many2many' , 'foreign_object' => 'sale\\catalog\\ProductModel' , 'foreign_field' => 'categories_ids' , 'rel_table' => 'sale_product_rel_productmodel_category' , 'rel_foreign_key' => 'productmodel_id' , 'rel_local_key' => 'category_id' , 'description' => 'List of product models assigned to the category.' ] ]; } }","title":"Model definition"},{"location":"usage/model-definition/#classes","text":"Objects are grouped into classes that define the structure and methods of those objects. Classes definitions from a same package are placed into the folder //packages/[package_name]/classes//. Here is an example of the class definition syntax : <?php namespace school ; use equal\\orm\\Model ; class Student extends Model { public static function getColumns () { return [ 'firstname' => [ 'type' => 'string' ], 'lastname' => [ 'type' => 'string' ], 'birthdate' => [ 'type' => 'date' ] ]; } }","title":"Classes"},{"location":"usage/model-definition/#consistency-with-database","text":"Classes are mapped with database tables. Each table having structure (columns) matching the fields defined in the model. Consistency between models ( *.class.php files) and database schema is done at package initialization (columns types must be compatible). It must be maintained manually in case of change. When a new class is created or the schema of a class is modified, the SQL schema must be adapted consequently. Controllers core_init_package and utils_sql-schema are made to help with this task. Also, Action controller core_test_package-consistency can help to spot any incompatibility or inconsistency in the definition the classes from a given package.","title":"Consistency with Database"},{"location":"usage/model-definition/#fields-categories","text":"CATEGORY DESCRIPTION simple Direct field that holds a value of a given type. Such fields are stored as is in database and are automatically converted (SQL/PHP). relational Field whose value targets one or more objects. Supported relations are : one2many , many2many , and many2one (which behaves like a simple field) computed Indirect field that results from a computation based on other values. Computed fields have a final type that can be either simple or relational.","title":"Fields categories"},{"location":"usage/model-definition/#fields-types","text":"The type property sets the type of the field. The following types are supported by the ORM : boolean integer float string text date time datetime binary many2one one2many many2many computed alias usage property The usage property is complementary to the type property and allows to refine the way the field should be handled by the ORM and the DBMS, and how it should be rendered in the UI.","title":"Fields types "},{"location":"usage/model-definition/#boolean","text":"Numeric value of Boolean type ( true or false ) Note For booleans, we use the PHP built-in constant : true and false (when using '0', '1', 0 or 1, value is converted to a bool).","title":"boolean"},{"location":"usage/model-definition/#integer","text":"Signed numeric value (negative or positive). By default, strings are stored in DBMS using INT(11) . about integer precision PHP depends on the platform for integers size allocation ( PHP_INT_SIZE ), while SQL INT will always be 32 bits.","title":"integer"},{"location":"usage/model-definition/#float-double","text":"Floating point numeric value (float or double) By default, strings are stored in DBMS using DECIMAL(10,2) .","title":"float (double)"},{"location":"usage/model-definition/#string","text":"Short string without formatting/carriage returns (ex: lastname, place, \u2026) By default, strings are stored in DBMS using VARCHAR(255) . Strings can potentially be long and include formatting, and some behavior require a specific combination of type and usage. For instance: <?php [ 'type' => 'string' , 'usage' => 'text/plain' ] will be stored as MEDIUMTEXT and the UI will know it has to display the field as a TEXTAREA rather than as an INPUT. whereas : <?php [ 'type' => 'string' , 'usage' => 'phone' ] will be stored as VARCHAR(20) .","title":"string"},{"location":"usage/model-definition/#text","text":"By default, texts are stored in DMBS as text . The TEXT data type has a size of string characters upto 65,535 bytes to manage classic long-form contents of the text.","title":"text"},{"location":"usage/model-definition/#binary","text":"Any binary value (ex : a picture, a document, \u2026) Binary values can either be stored in the database or within the filesystem, under the /bin folder of the installation. This behavior can be set using the FILE_STORAGE_MODE and FILE_STORAGE_DIR configuration parameter.","title":"binary"},{"location":"usage/model-definition/#file","text":"A file value is stored in the DB (like binaries) as a LONGBLOB .","title":"file"},{"location":"usage/model-definition/#date-time-datetime","text":"When stored to the DBMS, those types follow the standard SQL format: date: YYYY-mm-dd time: HH:mm:ss datetime: YYYY-mm-dd HH:mm:ss Tip Internally, dates, times and datetimes are handled as timestamps. These are adapted to SQL format or JSON format when needed.","title":"date, time &amp; datetime"},{"location":"usage/model-definition/#many2one","text":"Relational field used for fields holding a N-1 relation. The stored value is an integer that holds the identifier of the pointed object. Example: <?php // from todolist\\Task // Each task has only 1 user assigned at a time 'user_id' => [ 'type' => 'many2one' , 'foreign_object' => 'todolist\\User' ]","title":"many2one"},{"location":"usage/model-definition/#one2many","text":"1-N relation, related to a many2one object foreign_object -&gt; foreign_field -&gt; select amongst fields of other class + ability to create a new one (many2many) : temporary creation in one of both ways ! rel_table -&gt; check amongst existing rel tables ({package}_rel_local_foreign or rel_foreign_local) if no table yet -&gt; create rel_local_key -&gt; {local_class}_id rel_foreign_key -&gt; {foreign_class}_id <?php // todolist\\User // Each user can have many tasks 'tasks_ids' => [ 'type' => 'one2many' , 'foreign_object' => 'todolist\\Task' , 'foreign_field' => 'user_id' ]","title":"one2many"},{"location":"usage/model-definition/#many2many","text":"M-N relation foreign_object -&gt; select amongst other classes + ability to create symetrical one (one2many) php <?php // school\\Teacher 'courses_ids' => [ 'type' => 'many2many', 'foreign_object' => 'school\\Course', 'foreign_field' => 'teachers_ids', 'rel_table' => 'school_rel_course_teacher', 'rel_foreign_key' => 'course_id', 'rel_local_key' => 'teacher_id' ]","title":"many2many"},{"location":"usage/model-definition/#computed","text":"type: 'computed' function: string holding name of a callable method result_type : select ('boolean', 'integer', 'float', 'string', 'text', 'html' ) store : boolean Computed fields are not stored in the DB, unless the store attribute is set to true. To get it, we use the 'function' key, that will point at any function. It will return a processed value and afterwards, it can be stored inside the DB. Most of the time the use of the store attribute requires that field(s) on which depends the computed value, has an onchange event, triggering the update of the calculated field (see example). When trying to load a computed field, if 'store' is not defined or set to false, it computes the value using the provided method each time the field value is requested if 'store' is set to true and the field isn't in the DB (NULL), it computes the value using the provided method if 'store' is set to true and the field is in the DB, it uses the DB value <?php // Example from core\\Permission // ... 'rights' => [ 'type' => 'integer' , 'onupdate' => 'onchangeRights' ], 'rights_txt' => [ 'type' => 'computed' , 'store' => true , 'result_type' => 'string' , 'function' => 'calcRightsTxt' ], // ... public static function onupdateRights ( $om , $ids , $values , $lang ) { $om -> update ( __CLASS__ , $oids , [ 'rights_txt' => null , $lang ); } public static function calcRightsTxt ( $om , $ids , $lang ) { $res = array (); $values = $om -> read ( 'core\\Permission' , $ids , array ( 'rights' ), $lang ); foreach ( $ids as $oid ) { $rights_txt = array (); $rights = $values [ $oid ][ 'rights' ]; if ( $rights & QN_R_CREATE ) $rights_txt [] = 'create' ; if ( $rights & QN_R_READ ) $rights_txt [] = 'read' ; if ( $rights & QN_R_WRITE ) $rights_txt [] = 'write' ; if ( $rights & QN_R_DELETE ) $rights_txt [] = 'delete' ; if ( $rights & QN_R_MANAGE ) $rights_txt [] = 'manage' ; $res [ $oid ] = implode ( ', ' , $rights_txt ); } return $res ; }","title":"computed"},{"location":"usage/model-definition/#fields-properties","text":"","title":"Fields properties"},{"location":"usage/model-definition/#common-properties","text":"PROPERTY DESCRIPTION type The type of field: one of the value listed as fields types . usage (string) Specifies additional information about the format of the field. description (string) Brief about the field (max 65 chars). visible (optional, boolean | array) Domain holding the conditions that must be met in order for the field to be relevant (and shown in UI). default (optional) (mixed) Tells how to get the default value of the field. Can be either a value (of the same type than the one target by type ) or a callable (string). readonly (boolean) Marks the field as non-editable (default = false). required (boolean) Marks the field as mandatory (trying to store an object without a value for that field raises error) (default = false). multilang (boolean) Marks the field as translatable (default = false). onupdate (optional, string) Name of the method to invoke when field is updated. Format: package\\Class::method Signature : public static function onupdateFieldName($orm, $oids, $values, $lang) {} domain (only relational fields, array) Domain holding the additional conditions to apply on the set of objects targeted by the relation. dependencies (optional, array) list of computed fields (relative to current object or through relations traversal) that must be reset when the value of the field is updated. There must be a symmetrical 'depends_on' on targeted computed fields.","title":"Common properties"},{"location":"usage/model-definition/#type-related-properties","text":"TYPE ATTRIBUTE USAGE string type Type of the field. Accepted types are: alias , computed , many2one , many2many , one2many , integer , string , float , boolean , text , date and datetime . multilang (optional, boolean) Tells if field is translatable (default = false) selection (optional, array) Pre-defined list or associative array holding the possible values for the field. Example alias alias (string) Targets another field whose value must be returned when fetching the field value. By default, the name field is an alias for the id field. many2one foreign_object Full name of the class toward which field is pointing back. ondelete Tells how to behave when the parent object is deleted. cascade : delete the children too. null : void the pointer and keep the children. one2many foreign_object (string) Class toward which current field is pointing back. foreign_field (string) Name of the field of the pointed class that is pointing back toward the current class. foreign_key (optional, string) Name of the field that serves as identifier for objects pointed by the relation (default = 'id') order (optional) Name of the field pointed objects must be sorted on. sort (optional, string) direction fort sorting (possible values: 'asc', 'desc') ondetach (string [null, delete]) Tells how to handle the children objects when the relation is removed: either set the pointer to null or delete the children objects. (default = null) many2many foreign_object Full name of the class the relation points to. foreign_field Name of the field of the pointed class that is pointing back toward the current class. rel_table Name of the SQL table dedicated to the m2m relation (recommended syntax: package_rel_class1_class2 ) rel_local_key Name of the column in rel_table holding the identifier of the current object. rel_foreign_key Name of the column in de rel_table holding the identifier of the pointed object. computed result_type Specifies the type of the result returned by the field function, which can be any of the allowed types. store (optional) boolean telling if the result must be stored in database (in that case, the related table must contain a column for the field). By default, this attribute is set to false . function String holding the name of the method to invoke for computing the value of the field. Syntax: method (relative to current class) or package\\Class::method (absolute notation) multilang (optional) Boolean flag telling if field can be translated (default value: false). This applies only for stored fields. depends_on (optional) Symetrical link allowing to check consistency of a class declaration (make sure that reverse inlinks are actually set) Example of a basic field using the selection attribute: <?php 'fieldname' => [ 'type' => 'string' , 'selection' => [ 'choice1' , 'choice2' , 'choice3' ] ]","title":"Type-related properties"},{"location":"usage/model-definition/#system-fields","text":"Some fields are mandatory, and defined in the Model class. NAME TYPE ROLE id integer Unique identifier of the object. name string Name to use when referring to the object (in views). By default, this field is an alias of id . status string 'draft', 'instance', 'archive'. created datetime Date at which the object was created. creator foreign_object core\\User modified datetime Date date on which the object was last modified modifier foreign_object core\\User deleted boolean Marks the object as soft-deleted.","title":"System fields"},{"location":"usage/model-definition/#getters-methods","text":"NAME DESCRIPTION getName() Get Model readable name. getDescription() Get Model description. getType() Provide the list of unique rules (array of combinations of fields). getLink() Get the URL associated with the class. getColumns() Returns the user-defined part of the schema (i.e. fields list with types and other attributes). getConstraints() Returns a map of constraint items associating fields with validation functions. getUnique() Provide the list of unique rules (array of combinations of fields). getFields() Returns all fields names. getValues() Returns values of static instance. getDefaults() Return default values. getTable() Return the name of the DB table to be used for storing objects of current class.","title":"Getters methods"},{"location":"usage/model-definition/#overridable-methods","text":"NAME DESCRIPTION cancreate() Check wether an object can be created. oncreate() Hook invoked after object creation for performing object-specific additional operations. canupdate() Check wether an object can be updated. onupdate() Hook invoked before object update for performing object-specific additional operations. candelete() Check wether an object can be deleted. ondelete() Hook invoked before object deletion for performing object-specific additional operations. canclone() Check wether an object can be cloned. onclone() Hook invoked after object cloning for performing object-specific additional operations. onchange() Handler for virtual static methods: use classname to invoke a Collection method, if available.","title":"Overridable methods"},{"location":"usage/model-definition/#custom-methods","text":"","title":"Custom methods"},{"location":"usage/routing/","text":"Router \u00b6 The Router equal/route/Router.class.php class handles routes located inside the config/routing folder. Structure of a route : URI -> operation Reserved parameters : get do show route announce Routing to scripts. simple scripts Main constraint : routing and FS tree Creating Routes \u00b6 Inside the config/routing directory, you have the possibility to build your own routes. The expected route structure : STRUCTURE TYPE DESCRIPTION method string HTTP method, example: \"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\". path string full path of the requested URI. parts array array of parts composing the path. operation string the operation the URI resolves to. params array map of parameters names as keys, related to their values. There are a few default routes built in eQual, to get the users and groups. Example : \"/user/:ids\" : { \"GET\" : { \"description\" : \"Retrieve fields values related to a given user\" , \"operation\" : \"?get=core_model_read&entity=core\\\\User\" }, \"PUT\" : { \"description\" : \"Update a user\" , \"operation\" : \"?do=core_user_update\" }, \"DELETE\" : { \"description\" : \"Delete a user\" , \"operation\" : \"?do=core_model_delete&entity=core\\\\User\" } } , You need the operation and description properties to build your routes. The operation will be about the \"Query\" part of the URI/URL. And the description is simply a field to indicate what the operation does. routes hierarchy \u00b6 The routes are read in alphabetical order (also counts for numbers). Which means, that if two different files contain the same route, the first one, in alphabetical order, found by the system, will be read. Only the routes inside the global config/routing folder matter. In conclusion, if you need a route to be read before an other, you need to place the route in earlier files. i18n \u00b6 Inside the config/routing folder, you can have sub-folders for different languages, with the possibility to translate the routes in the chosen language.","title":"Routing"},{"location":"usage/routing/#router","text":"The Router equal/route/Router.class.php class handles routes located inside the config/routing folder. Structure of a route : URI -> operation Reserved parameters : get do show route announce Routing to scripts. simple scripts Main constraint : routing and FS tree","title":"Router"},{"location":"usage/routing/#creating-routes","text":"Inside the config/routing directory, you have the possibility to build your own routes. The expected route structure : STRUCTURE TYPE DESCRIPTION method string HTTP method, example: \"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\". path string full path of the requested URI. parts array array of parts composing the path. operation string the operation the URI resolves to. params array map of parameters names as keys, related to their values. There are a few default routes built in eQual, to get the users and groups. Example : \"/user/:ids\" : { \"GET\" : { \"description\" : \"Retrieve fields values related to a given user\" , \"operation\" : \"?get=core_model_read&entity=core\\\\User\" }, \"PUT\" : { \"description\" : \"Update a user\" , \"operation\" : \"?do=core_user_update\" }, \"DELETE\" : { \"description\" : \"Delete a user\" , \"operation\" : \"?do=core_model_delete&entity=core\\\\User\" } } , You need the operation and description properties to build your routes. The operation will be about the \"Query\" part of the URI/URL. And the description is simply a field to indicate what the operation does.","title":"Creating Routes"},{"location":"usage/routing/#routes-hierarchy","text":"The routes are read in alphabetical order (also counts for numbers). Which means, that if two different files contain the same route, the first one, in alphabetical order, found by the system, will be read. Only the routes inside the global config/routing folder matter. In conclusion, if you need a route to be read before an other, you need to place the route in earlier files.","title":"routes hierarchy"},{"location":"usage/routing/#i18n","text":"Inside the config/routing folder, you can have sub-folders for different languages, with the possibility to translate the routes in the chosen language.","title":"i18n"},{"location":"usage/searching/","text":"Searching \u00b6 Searching is handled by the ORM, which offers a search() method, and can be performed either through a Collection or using the ObjectManager service. The search method returns a list of objects identifiers of the targeted class. that list of identifiers can then be used for reading values of the filtered objects; additional parameters (order, sort, start, limit) allow to refine the search behavior. In order to search amongst existing objects, the search method uses a domain argument describing the search criteria. About domains To understand or learn more about domains, please refer to the domain section. ORM search \u00b6 In classes, searching can be invoked by calling the ObjectManager service. signature \u00b6 <?php public function search ( $class , $domain = NULL , $sort = [ 'id' => 'asc' ], $start = '0' , $limit = '0' , $lang = DEFAULT_LANG ) usage \u00b6 Example: <?php $orm -> search ( 'core\\User' , [ 'login' , '=' , $login ]) Collection search \u00b6 In controllers, searching can be invoked either by calling the ObjectManager service or through a collection. signature \u00b6 <?php public function search ( array $domain = [], array $params = [], $lang = DEFAULT_LANG ) usage \u00b6 Example: <?php use core\\User ; User :: search ([ [ 'login' , 'like' , '%john%' ], [ 'validated' , '=' , 'true' ] ]);","title":"Searching"},{"location":"usage/searching/#searching","text":"Searching is handled by the ORM, which offers a search() method, and can be performed either through a Collection or using the ObjectManager service. The search method returns a list of objects identifiers of the targeted class. that list of identifiers can then be used for reading values of the filtered objects; additional parameters (order, sort, start, limit) allow to refine the search behavior. In order to search amongst existing objects, the search method uses a domain argument describing the search criteria. About domains To understand or learn more about domains, please refer to the domain section.","title":"Searching"},{"location":"usage/searching/#orm-search","text":"In classes, searching can be invoked by calling the ObjectManager service.","title":"ORM search"},{"location":"usage/searching/#signature","text":"<?php public function search ( $class , $domain = NULL , $sort = [ 'id' => 'asc' ], $start = '0' , $limit = '0' , $lang = DEFAULT_LANG )","title":"signature"},{"location":"usage/searching/#usage","text":"Example: <?php $orm -> search ( 'core\\User' , [ 'login' , '=' , $login ])","title":"usage"},{"location":"usage/searching/#collection-search","text":"In controllers, searching can be invoked either by calling the ObjectManager service or through a collection.","title":"Collection search"},{"location":"usage/searching/#signature_1","text":"<?php public function search ( array $domain = [], array $params = [], $lang = DEFAULT_LANG )","title":"signature"},{"location":"usage/searching/#usage_1","text":"Example: <?php use core\\User ; User :: search ([ [ 'login' , 'like' , '%john%' ], [ 'validated' , '=' , 'true' ] ]);","title":"usage"},{"location":"usage/testing/","text":"Testing \u00b6 Before anything, please check your package consistency : PATH core\\actions\\test\\package-consistency.php URL ?do=test_package-consistency&package=myPackage CLI $ ./equal.run --do=test_package-consistency --package=myPackage DESCRIPTION Consistency checks between DB and class as well as syntax validation for classes (PHP), views and translation files (JSON). It will tell you if you have available tests. If it's not the case, see Writing the tests Running the tests locally \u00b6 Open your CLI at the root of eQual (where run.php is), then launch this : php run.php --do = test_package --package = mypackage It should log an overview of each test you wrote, resulting as \"ok\" or \"ko\" depending on the expected results If it doesn't show anything it means there is an error somewhere in your code Tip: use http://[localhost] /console.php for potential insights Test data set \u00b6 If you want to put your database in a certain state before running the tests, then you need a data set. Refer to section Building the data set below to know how to proceed If you already have one, you can enter this before the test command : PATH core\\actions\\init\\package.php URL ?do=init_package&package=myPackage CLI $ ./equal.run --do=init_package --package=myPackage DESCRIPTION Initialise database for given package. If no package is given, initialize core package. Running the tests in a CI/CD environment \u00b6 There are many ways out there you can choose from, for example you can use BitBucket Pipelines, GitLab CI, or any versioning platform with a compatible pipeline tool Here we'll use GitHub with Travis CI To learn how to setup a testing environment with Travis, see Advanced > CI/CD > Travis Assuming you have a data set ready for your tests, add this in the script section of your .travis.yml file : # initate data set - php run.php --do=init_package --package=mypackage # run tests - php run.php --do=test_package --package=mypackage Note: if the tests succeed in local but fail with Travis, try to change your Http request with localhost as host instead of 127.0.0.1 or any localhost name you're using Building the data set \u00b6 At some point in your testing you're very likely to operate changes in your database, which may aswell make a few of your previous tests obsolete To avoid this, we use a data set that we initiate everytime we want to run tests Steps \u00b6 1) In MySQL : Write the data you're gonna use for your tests When you're happy with it, click on your database, go to the Export tab, select Personalized and unpick the tables you don't want to use, then press Execute 2) It should give you a .sql file named after your database, go ahead and rename it data.sql 3) In your package directory (public/packages/mypackage/) : Create a folder named /init Move data.sql into this folder 4) Open data.sql . We're going to update it to make it compatible with eQual : Remove anything that doesn't start with \" INSERT INTO \" Manually adapt each insertion : For example, instead of INSERT INTO `my_table` ( `field1` , `field2` ) VALUES ( 'value1' , 'value1' ), ( 'value2' , 'value2' ), ( 'value3' , 'value3' ); Write it like that INSERT INTO `my_table` ( `field1` , `field2` ) VALUES ( 'value1' , 'value1' ); INSERT INTO `my_table` ( `field1` , `field2` ) VALUES ( 'value2' , 'value2' ); INSERT INTO `my_table` ( `field1` , `field2` ) VALUES ( 'value3' , 'value3' ); Note: you can add \"IGNORE\" between INSERT and INTO to avoid future problems That's it. To see if it works, run the following CLI command to initiate your data set php run.php --do = init_package --package = mypackage And compare in MySQL if you get the data you expected From now on, you can run the command above everytime you want to reinitialize your DB state Writing the tests \u00b6 The testing folder should be located at the root of each package, under the name /tests In this folder add a file mytests.php (or whatever name you want) Here is a minimal template for test-writing : // \\tests\\mytests.php <?php use equal\\http\\HttpRequest ; use myapp\\Myobject $providers = inject ([ 'context' ]); $tests = [ '0001' => [ 'description' => '' , // what the test does 'return' => [], // expected value type 'expected' => [], // expected result of 'test' 'test' => function (){ // testing goes here }, 'assert' => function ( $assertion ){ // Checks if assertion is false } ], // working example '0002' => [ 'description' => 'checking test_value' , 'return' => [ 'string' ], 'expected' => \"test\" , 'test' => function (){ $test_value = \"test\" return $test_value ; }, 'assert' => function ( $assertion ){ // Checks if assertion is false } ], // [...] add as many as you want! ] There is 2 additional parameters (they have to fit right between 'expected' and 'test') you can use in case you need to run some specific function before and after a test : 'arrange' => function(){ } (used to do something before the test) 'rollback' => function(){ } (used to do something after the test) Important : Keep in mind that 'arrange' doesn't trigger if the test fails or doesn't match with the 'expected' field Syntax details \u00b6 The type of value expected in 'return' must be in array (ex: ['integer'], ['boolean'], ['array'] ... ) The 'expected' field value can be anything but null The 'test' field is where the logic is written, it has to end with a return . This returned value will go through the built-in function test() which tells us whether it's \"ok\" or \"ko\" Let's have a look at Tester.class.php to understand how the testing works : <?php public function test () { // [...] $result = $test [ 'test' ](); $status = 'ok' ; if ( in_array ( gettype ( $result ), ( array ) $test [ 'return' ])) { // (1) if ( isset ( $test [ 'expected' ])) { // (2) if ( gettype ( $result ) == gettype ( $test [ 'expected' ])) { // (4) if ( gettype ( $result ) == \"array\" ) { // (5) if ( ! self :: array_equals ( $result , $test [ 'expected' ])) { // (6) $success = false ; } } else { if ( $result != $test [ 'expected' ]) { // (7) $success = false ; } } } else { $success = false ; } } else if ( isset ( $test [ 'assert' ]) && is_callable ( $test [ 'assert' ])) { // (3) $success = $test [ 'assert' ]( $result ); } } else { $success = false ; } // [...] } What it does : Store the 'test' function results in $result, and tell $status = 'ok' by default Cascading logic : (1) If $result and 'return' value are respectively inside an array (if 'return' isn't, do so automatically) (2) If the 'expected' field has been set. If not, (3) Check if there is an 'assert' field available (4) If the type of $result is the same as 'return' (5) If $result is of type \"array\", (6) Call the array_equals() method to verify if $result and 'expected' are identical. If not, (7) Use a simpler logic to do the verification '$success = false' is the equivalent of '$status = ko'","title":"Testing"},{"location":"usage/testing/#testing","text":"Before anything, please check your package consistency : PATH core\\actions\\test\\package-consistency.php URL ?do=test_package-consistency&package=myPackage CLI $ ./equal.run --do=test_package-consistency --package=myPackage DESCRIPTION Consistency checks between DB and class as well as syntax validation for classes (PHP), views and translation files (JSON). It will tell you if you have available tests. If it's not the case, see Writing the tests","title":"Testing"},{"location":"usage/testing/#running-the-tests-locally","text":"Open your CLI at the root of eQual (where run.php is), then launch this : php run.php --do = test_package --package = mypackage It should log an overview of each test you wrote, resulting as \"ok\" or \"ko\" depending on the expected results If it doesn't show anything it means there is an error somewhere in your code Tip: use http://[localhost] /console.php for potential insights","title":"Running the tests locally"},{"location":"usage/testing/#test-data-set","text":"If you want to put your database in a certain state before running the tests, then you need a data set. Refer to section Building the data set below to know how to proceed If you already have one, you can enter this before the test command : PATH core\\actions\\init\\package.php URL ?do=init_package&package=myPackage CLI $ ./equal.run --do=init_package --package=myPackage DESCRIPTION Initialise database for given package. If no package is given, initialize core package.","title":"Test data set"},{"location":"usage/testing/#running-the-tests-in-a-cicd-environment","text":"There are many ways out there you can choose from, for example you can use BitBucket Pipelines, GitLab CI, or any versioning platform with a compatible pipeline tool Here we'll use GitHub with Travis CI To learn how to setup a testing environment with Travis, see Advanced > CI/CD > Travis Assuming you have a data set ready for your tests, add this in the script section of your .travis.yml file : # initate data set - php run.php --do=init_package --package=mypackage # run tests - php run.php --do=test_package --package=mypackage Note: if the tests succeed in local but fail with Travis, try to change your Http request with localhost as host instead of 127.0.0.1 or any localhost name you're using","title":"Running the tests in a CI/CD environment"},{"location":"usage/testing/#building-the-data-set","text":"At some point in your testing you're very likely to operate changes in your database, which may aswell make a few of your previous tests obsolete To avoid this, we use a data set that we initiate everytime we want to run tests","title":"Building the data set "},{"location":"usage/testing/#steps","text":"1) In MySQL : Write the data you're gonna use for your tests When you're happy with it, click on your database, go to the Export tab, select Personalized and unpick the tables you don't want to use, then press Execute 2) It should give you a .sql file named after your database, go ahead and rename it data.sql 3) In your package directory (public/packages/mypackage/) : Create a folder named /init Move data.sql into this folder 4) Open data.sql . We're going to update it to make it compatible with eQual : Remove anything that doesn't start with \" INSERT INTO \" Manually adapt each insertion : For example, instead of INSERT INTO `my_table` ( `field1` , `field2` ) VALUES ( 'value1' , 'value1' ), ( 'value2' , 'value2' ), ( 'value3' , 'value3' ); Write it like that INSERT INTO `my_table` ( `field1` , `field2` ) VALUES ( 'value1' , 'value1' ); INSERT INTO `my_table` ( `field1` , `field2` ) VALUES ( 'value2' , 'value2' ); INSERT INTO `my_table` ( `field1` , `field2` ) VALUES ( 'value3' , 'value3' ); Note: you can add \"IGNORE\" between INSERT and INTO to avoid future problems That's it. To see if it works, run the following CLI command to initiate your data set php run.php --do = init_package --package = mypackage And compare in MySQL if you get the data you expected From now on, you can run the command above everytime you want to reinitialize your DB state","title":"Steps"},{"location":"usage/testing/#writing-the-tests","text":"The testing folder should be located at the root of each package, under the name /tests In this folder add a file mytests.php (or whatever name you want) Here is a minimal template for test-writing : // \\tests\\mytests.php <?php use equal\\http\\HttpRequest ; use myapp\\Myobject $providers = inject ([ 'context' ]); $tests = [ '0001' => [ 'description' => '' , // what the test does 'return' => [], // expected value type 'expected' => [], // expected result of 'test' 'test' => function (){ // testing goes here }, 'assert' => function ( $assertion ){ // Checks if assertion is false } ], // working example '0002' => [ 'description' => 'checking test_value' , 'return' => [ 'string' ], 'expected' => \"test\" , 'test' => function (){ $test_value = \"test\" return $test_value ; }, 'assert' => function ( $assertion ){ // Checks if assertion is false } ], // [...] add as many as you want! ] There is 2 additional parameters (they have to fit right between 'expected' and 'test') you can use in case you need to run some specific function before and after a test : 'arrange' => function(){ } (used to do something before the test) 'rollback' => function(){ } (used to do something after the test) Important : Keep in mind that 'arrange' doesn't trigger if the test fails or doesn't match with the 'expected' field","title":"Writing the tests"},{"location":"usage/testing/#syntax-details","text":"The type of value expected in 'return' must be in array (ex: ['integer'], ['boolean'], ['array'] ... ) The 'expected' field value can be anything but null The 'test' field is where the logic is written, it has to end with a return . This returned value will go through the built-in function test() which tells us whether it's \"ok\" or \"ko\" Let's have a look at Tester.class.php to understand how the testing works : <?php public function test () { // [...] $result = $test [ 'test' ](); $status = 'ok' ; if ( in_array ( gettype ( $result ), ( array ) $test [ 'return' ])) { // (1) if ( isset ( $test [ 'expected' ])) { // (2) if ( gettype ( $result ) == gettype ( $test [ 'expected' ])) { // (4) if ( gettype ( $result ) == \"array\" ) { // (5) if ( ! self :: array_equals ( $result , $test [ 'expected' ])) { // (6) $success = false ; } } else { if ( $result != $test [ 'expected' ]) { // (7) $success = false ; } } } else { $success = false ; } } else if ( isset ( $test [ 'assert' ]) && is_callable ( $test [ 'assert' ])) { // (3) $success = $test [ 'assert' ]( $result ); } } else { $success = false ; } // [...] } What it does : Store the 'test' function results in $result, and tell $status = 'ok' by default Cascading logic : (1) If $result and 'return' value are respectively inside an array (if 'return' isn't, do so automatically) (2) If the 'expected' field has been set. If not, (3) Check if there is an 'assert' field available (4) If the type of $result is the same as 'return' (5) If $result is of type \"array\", (6) Call the array_equals() method to verify if $result and 'expected' are identical. If not, (7) Use a simpler logic to do the verification '$success = false' is the equivalent of '$status = ko'","title":"Syntax details"},{"location":"usage/validation/","text":"Validation \u00b6 Definition \u00b6 The validate function of the ObjectManager provider checks if the values given by the User are matching the object fields requirements. This function is used at different times : with \"CREATE\" & \"UPDATE\" Methods with Controller Calls Calling the scripts In addition to the usual objects, Controllers are in eQual, also objects. And as such, their params or getColumns() fields for usual objects must be validated by the validate function ; \u200b Validate function \u00b6 Required property \u00b6 The following section will look into the function's parts. The first property checked by the function is the required property. <?php foreach ( $schema as $field => $def ) { // required fields must be provided and cannot be left/set to null if ( isset ( $def [ 'required' ]) && $def [ 'required' ] && ( ! isset ( $values [ $field ]) || is_null ( $values [ $field ])) ) { $error_code = QN_ERROR_INVALID_PARAM ; $res [ $field ][ 'missing_mandatory' ] = 'Missing mandatory value.' ; trigger_error ( \"QN_DEBUG_ORM::mandatory field { $field } is missing for instance of { $class } \" , QN_REPORT_WARNING ); } } The function checks if the field is required (can't be null ) and if it is, it must have a value, otherwise, an error is sent to the User. Type & Usage properties \u00b6 type \u00b6 The function checks if the type property matches the value, this property gives information about the way the field is stored in the DB. usage \u00b6 The usage property is complementary to the type property and allows to refine the way the field should be handled by the ORM and the DBBMS, and how it should be rendered in the UI. Example : <?php 'params' => [ 'code' => [ 'description' => 'Code for athenticating user.' , 'type' => 'string' , 'usage' => 'email' , 'required' => true ] ], In the above example, the type is a string, and the usage tells us that the string is expected to be an email. The validate function will then call the getConstraintFromUsage() method from DataValidator.class.php : <?php case 'email' : return [ 'kind' => 'function' , 'rule' => function ( $a , $o ) { return ( bool ) ( preg_match ( '/^([_a-z0-9-]+) (\\.[_a-z0-9+-]+)*@([a-z0-9-]+)(\\.[a-z0-9-]+)*(\\.[a-z]{2,13})$/' , $a ));} ]; A rule is then used to valide the usage property value. Here, it checks if the field is a real email through regex and returns true or false. If it returns false, it will send an error to the User. getConstraints() \u00b6 Returns a map of constraint items associating fields with validation functions. Example of validation function : <?php case 'string' : $constraints [ $field ][ 'size_overflow' ] = [ 'message' => 'String length must be maximum 255 chars.' , 'function' => function ( $val , $obj ) { return ( strlen ( $val ) <= 255 );} ]; break ; getUnique() \u00b6 Provides the list of unique rules (array of combinations of fields). If the rules aren't followed, an error is sent. <?php trigger_error ( \"QN_DEBUG_ORM::field { $field } violates unique constraint with object { $oid } \" , QN_REPORT_WARNING );","title":"Validation"},{"location":"usage/validation/#validation","text":"","title":"Validation"},{"location":"usage/validation/#definition","text":"The validate function of the ObjectManager provider checks if the values given by the User are matching the object fields requirements. This function is used at different times : with \"CREATE\" & \"UPDATE\" Methods with Controller Calls Calling the scripts In addition to the usual objects, Controllers are in eQual, also objects. And as such, their params or getColumns() fields for usual objects must be validated by the validate function ; \u200b","title":"Definition"},{"location":"usage/validation/#validate-function","text":"","title":"Validate function"},{"location":"usage/validation/#required-property","text":"The following section will look into the function's parts. The first property checked by the function is the required property. <?php foreach ( $schema as $field => $def ) { // required fields must be provided and cannot be left/set to null if ( isset ( $def [ 'required' ]) && $def [ 'required' ] && ( ! isset ( $values [ $field ]) || is_null ( $values [ $field ])) ) { $error_code = QN_ERROR_INVALID_PARAM ; $res [ $field ][ 'missing_mandatory' ] = 'Missing mandatory value.' ; trigger_error ( \"QN_DEBUG_ORM::mandatory field { $field } is missing for instance of { $class } \" , QN_REPORT_WARNING ); } } The function checks if the field is required (can't be null ) and if it is, it must have a value, otherwise, an error is sent to the User.","title":"Required property"},{"location":"usage/validation/#type-usage-properties","text":"","title":"Type &amp; Usage properties"},{"location":"usage/validation/#type","text":"The function checks if the type property matches the value, this property gives information about the way the field is stored in the DB.","title":"type"},{"location":"usage/validation/#usage","text":"The usage property is complementary to the type property and allows to refine the way the field should be handled by the ORM and the DBBMS, and how it should be rendered in the UI. Example : <?php 'params' => [ 'code' => [ 'description' => 'Code for athenticating user.' , 'type' => 'string' , 'usage' => 'email' , 'required' => true ] ], In the above example, the type is a string, and the usage tells us that the string is expected to be an email. The validate function will then call the getConstraintFromUsage() method from DataValidator.class.php : <?php case 'email' : return [ 'kind' => 'function' , 'rule' => function ( $a , $o ) { return ( bool ) ( preg_match ( '/^([_a-z0-9-]+) (\\.[_a-z0-9+-]+)*@([a-z0-9-]+)(\\.[a-z0-9-]+)*(\\.[a-z]{2,13})$/' , $a ));} ]; A rule is then used to valide the usage property value. Here, it checks if the field is a real email through regex and returns true or false. If it returns false, it will send an error to the User.","title":"usage"},{"location":"usage/validation/#getconstraints","text":"Returns a map of constraint items associating fields with validation functions. Example of validation function : <?php case 'string' : $constraints [ $field ][ 'size_overflow' ] = [ 'message' => 'String length must be maximum 255 chars.' , 'function' => function ( $val , $obj ) { return ( strlen ( $val ) <= 255 );} ]; break ;","title":"getConstraints()"},{"location":"usage/validation/#getunique","text":"Provides the list of unique rules (array of combinations of fields). If the rules aren't followed, an error is sent. <?php trigger_error ( \"QN_DEBUG_ORM::field { $field } violates unique constraint with object { $oid } \" , QN_REPORT_WARNING );","title":"getUnique()"},{"location":"usage/views/","text":"Views \u00b6 Views are intended to describe how to present the objects to end-users under a given context. They are used as templates for the front-end, and are stored as JSON files within the views folder of their respective package. Each of them represents a mode of visualization: form, list, chart, dashboard, etc; and can be edited independently from the models they relate to. It is possible to define as many views (of different types, or variations of same type) as necessary. Each view is referenced by an ID, which is composed of its type and its name. As a convention, a default view for list and form types should be defined for each entity. The generic filename format is: {class_name}.{view_type}.{view_name}.json class_name : the class name of the entity the view relates to (e.g. default form view for core\\User is stored as packages/core/views/User.form.default.json ) view_type : Possible values are :' list ', ' form ',' chart ',' dashboard ' view_name : As a convention, classes should always have a 'default' view for types 'list' and 'view'. Here is a recap for the core\\User entity : FILENAME ENTITY VIEW TYPE VIEW NAME VIEW ID core\\views\\User.list.default.json core\\User list default list.default core\\views\\User.form.default.json core\\User form default form.default Front-end logic \u00b6 A View relates to an entity and has a type and a name. The view itself requests the corresponding data from the server (template or translation) when loading the layout at which a domain can be specified. Within a view, a layout defines the way in which the widgets are linked to the model. The view is synchronized with the model during modifications. Keep in mind that if the view's class extends another class, which will be called the parent, then it should also contain all the fields from this parent class except the computed ones and the ones that are already present in this child class. A Model is a collection of objects of a given entity. This class keeps the full schema of the entity with the default values that are then updated by this model after it requests the corresponding data from the server. A Layout is the layout associated with a given view. It is always linked to a Model. A Widget is responsible for displaying the value of an object's field (in 'view' or 'edit' mode). It synchronizes its value with the Model to which it is associated via the Layout and the View that is using it. Views commons \u00b6 Some attributes are common to all types of views. Below is a list of the common attributes and their role. Structure summary \u00b6 PROPERTY DESCRIPTION name The name property is mandatory and relates to the unique name assigned to the view. description A description property allows to give a short hint about the view's context or the way it is intended to be used. access (optional) actions (optional) controller (optional) When set, the controller property allows to customize the controller that is used for populating the view (by default: 'model_collect' for lists, 'model_read' for forms). header (optional) In the header property, one can customize the standard buttons of the header and the actions attached to these. access \u00b6 groups: array (list of groups the view is restricted to) Example : \"access\": ['root'] actions \u00b6 The optional actions property contains a list of objects defining a custom list of possible actions attached to the view. Each action item relates to a button, displayed in the right side of the header, which, when clicked, relays a request to a given controller. Upon successful completion of the action, the view is automatically refreshed. PROPERTY DESCRIPTION id Identifier of the action for translation purpose (can be set in the i18n related file). description The description that is displayed to the user when (s)he clicks on the related button. label Label assigned to the view. controller Controller to invoke when the user confirms the action. By default, the id of the current object is sent as a parameter. visible (optional) Domain (array) of conditions to meet in order to make the action button visible. Example: \"visible\": [\"status\", \"=\", \"quote\"] confirm (optional) If set to true, a confirmation dialog is displayed before relaying the request to the controller. params (optional) Associative array mapping fields with their values. Values can be assigned by referencing a property of the current user (e.g. user.login ) or current object (for form views). Example: \"actions\" : [ { \"id\" : \"action.option\" , \"label\" : \"Set as Option\" , \"description\" : \"Rental units will be blocked but no funding will be claimed yet.\" , \"controller\" : \"lodging_booking_option\" , \"visible\" : [ \"status\" , \"=\" , \"quote\" ], \"confirm\" : true , \"params\" : { \"id\" : \"object.id\" } }, { \"id\" : \"action.validate\" , \"label\" : \"Confirm Booking\" , \"description\" : \"Rental units will be blocked and the invoicing plan will be set up.\" , \"controller\" : \"lodging_booking_confirm\" , \"visible\" : [ \"status\" , \"in\" , [ \"quote\" , \"option\" ]] }, { \"id\" : \"action.checkin\" , \"label\" : \"Check In\" , \"description\" : \"The host has arrived: the rental units will be marked as occupied.\" , \"controller\" : \"lodging_booking_checkin\" , \"visible\" : [ \"status\" , \"=\" , \"validated\" ] }, { \"id\" : \"action.checkout\" , \"label\" : \"Check Out\" , \"description\" : \"The host is leaving: the rental units will be marked for cleaning.\" , \"controller\" : \"lodging_booking_checkout\" , \"visible\" : [ \"status\" , \"=\" , \"checkedin\" ] }, { \"id\" : \"action.invoice\" , \"label\" : \"Invoice\" , \"description\" : \"The host has left and room has been reviewed: emit the invoice.\" , \"controller\" : \"lodging_booking_invoice\" , \"visible\" : [ \"status\" , \"=\" , \"checkedout\" ] } ] If target controller requires one or more parameter, the view will generate a dialog asking the user for the values to be assigned to each parameter. If no parameter is required but the confirm property is set to true , then a confirmation dialog is displayed before performing the action. Here below is a flow diagram that recaps the interactions between the controller and the confirm property. controller \u00b6 The optional controller property specifies the controller that must be requested for fetching the Model collection that will feed the View (either a single object or a collection of objects). The default values is model_collect (which is an alias for core_model_collect ) Note Controller are considered as entities. When a controller is specified for a list View, a special view is expected ( search.default ) for describing the layout of the form for inputing parameters values (i.e. fields returned by the ::announce method of the view controller). In turn, those values are sent to the controller along with default values ( entity , fields , domain , order , sort , start , limit , lang ) for feeding the View. Example: for controller sale_booking_collect , a packages/sale/views/booking/collect.search.default.json file is expected. header \u00b6 The header section allows to override the default behavior of the view. Structure summary \u00b6 PROPERTY DESCRIPTION actions This property allows to customize the actions buttons shown in the left part of the View header. visible (optional) boolean or array (domain) actions \u00b6 The actions property can be used for 3 purposes: to force action buttons visibility; to define the order of the actions for buttons having multiple actions (\"split buttons\"); and to override the configuration of the subsequent Views (for relational fields). For forms , default actions are : ACTION.EDIT , ACTION.SAVE , ACTION.CREATE , ACTION.CANCEL For lists , default actions are : ACTION.SELECT , ACTION.CREATE Each action item is either a boolean or an array of items describing the order of the buttons and parameters for subsequent views. Action descriptor Actions descriptors used in the header has the same structure than View actions. Therefore, it is possible to force the view to use a specific controller when a standard button is clicked. Empty arrays or items set to false mean that the action is not available for the View. If action is an array with multiple items, the related button will be displayed as a split-button (note: in that case, the order of the items is maintained). ACTION DESCRIPTION ID(S) ACTION.EDIT For forms in view mode, allows to edit the current object. ACTION.SAVE For forms in edit mode, ACTION.SAVE is the action used for storing the changes made to the current object. SAVE_AND_CLOSE , SAVE_AND_VIEW , SAVE_AND_CONTINUE ACTION.CREATE For all views, ACTION.CREATE is the action used for creating a new current object. CREATE , ADD ACTION.CANCEL For forms in edit mode, allows to cancel the changes made to the current object. CANCEL_AND_CLOSE , CANCEL_AND_VIEW ACTION.SELECT For relational fields, allows to select or add one or many objects and relay selection to parent View. Predefined actions : ACTION DESCRIPTION CONTROLLER SAVE_AND_CLOSE The view is saved and close. The user is brought to the previous context. SAVE_AND_CONTINUE The view is saved and left open allowing the user to perform further changes. A snackbar is given as feedback to the user. SAVE_AND_VIEW The view is saved and closed. The user is brought to the 'view' version (SAVE action can only occur in 'edit' mode). In most cases, the 'view' version is the parent. If not, a new (similar) context is opened in 'view' mode. SAVE_AND_EDIT The view is saved and closed. The user is brought to a cloned context (still in 'edit' mode). CREATE model_create ADD model_update Usage example : \"header\" : { \"actions\" : { \"ACTION.CREATE\" : [ { \"view\" : \"form.create\" , \"description\" : \"Overload form to use for objects creation.\" , \"domain\" : [ \"parent_status\" , \"=\" , \"object.status\" ], \"visible\" : [ \"admin\" , \"in\" , \"user.groups\" ], \"controller\" : \"custompackage_mode_update\" } ], \"ACTION.SELECT\" : false , \"ACTION.SAVE\" : [ { \"id\" : \"SAVE_AND_CONTINUE\" }, { \"id\" : \"SAVE_AND_CLOSE\" } ], \"ACTION.CANCEL\" : [ { \"id\" : CANCEL_AND_VIEW\" }] } } View Inheritance \u00b6 Classes may be used in different packages (extending parent classes with the possibility of adding new fields) and therefore, they also may have different view files. Here is an example of an extended class. <?php namespace lodging\\sale\\booking ; class Contact extends \\sale\\booking\\Contact { public static function getName () { return \"Contact\" ; } public static function getDescription () { return \"Booking contacts are persons involved in the organisation of a booking.\" ; } public static function getColumns () { return [ 'owner_identity_id' => [ 'type' => 'many2one' , 'foreign_object' => 'lodging\\identity\\Identity' , 'description' => 'The organisation which the targeted identity is a partner of.' , 'default' => 1 ], 'partner_identity_id' => [ 'type' => 'many2one' , 'foreign_object' => 'lodging\\identity\\Identity' , 'description' => 'The targeted identity (the partner).' , 'onupdate' => 'identity\\Partner::onupdatePartnerIdentityId' , 'required' => true ], 'booking_id' => [ 'type' => 'many2one' , 'foreign_object' => 'lodging\\sale\\booking\\Booking' , 'description' => 'Booking the contact relates to.' , 'required' => true ], 'owner_identity_id' => [ 'type' => 'many2one' , 'foreign_object' => 'lodging\\identity\\Identity' , 'description' => 'The organisation which the targeted identity is a partner of.' , 'default' => 1 ] ]; } } To decide which view will be used, eQual uses a system of class inheritance , where the child view ( class extending the parent ) replaces the parent ( class being extended ) view file. To understand how it works, here is the code : <?php list ( $params , $providers ) = announce ([ 'description' => \"Returns the JSON view related to an entity (class model), given a view ID (<type.name>).\" , 'params' => [ 'entity' => [ 'description' => 'Full name (including namespace) of the class to return (e.g. \\'core\\\\User\\').' , 'type' => 'string' , 'required' => true ], 'view_id' => [ 'description' => 'The identifier of the view <type.name>.' , 'type' => 'string' , 'default' => 'list.default' ] ], 'response' => [ 'content-type' => 'application/json' , 'charset' => 'utf-8' , 'accept-origin' => '*' ], 'providers' => [ 'context' , 'orm' ] ]); list ( $context , $orm ) = [ $providers [ 'context' ], $providers [ 'orm' ]]; $entity = $params [ 'entity' ]; // retrieve existing view meant for entity (recurse through parents) while ( true ) { $parts = explode ( '\\\\' , $entity ); $package = array_shift ( $parts ); $file = array_pop ( $parts ); $class_path = implode ( '/' , $parts ); $file = QN_BASEDIR . \"/packages/ { $package } /views/ { $class_path } / { $file } . { $params [ 'view_id' ] } .json\" ; if ( file_exists ( $file )) { //(1) break ; } $parent = get_parent_class ( $orm -> getModel ( $entity )); //(2) if ( ! $parent || $parent == 'equal\\orm\\Model' ) { //(3) break ; } $entity = $parent ; } if ( ! file_exists ( $file )) { throw new Exception ( \"unknown_view_id\" , QN_ERROR_UNKNOWN_OBJECT ); } if ( ( $view = json_decode ( @ file_get_contents ( $file ), true )) === null ) { throw new Exception ( \"malformed_view_schema\" , QN_ERROR_INVALID_CONFIG ); } $context -> httpResponse () -> body ( $view ) -> send (); What it does : (1) If the file exists in the view folder of the package where we are, the loop stops and uses that view. (2) Otherwise, it loops through the parent classes one by one, and takes the first view file we encounter. (3) This scenario goes on until we reach the root-parent class \"equal\\orm\\Model\" . Form views \u00b6 Forms allow to view and edit individual objects. It is possible to define as many views as desired, and a given entity should always have default form view ( {entity}.form.default.json ). Forms views are JSON objects that describe how to render a specific view related to a given entity. Minimal example \u00b6 Example.form.default.json { \"name\" : \"Example\" , \"description\" : \"Simple form for displaying a basic objects\" , \"actions\" : [], \"layout\" : { \"groups\" : [ { \"label\" : \"\" , \"sections\" : [ { \"rows\" : [ { \"columns\" : [ { \"width\" : \"50%\" , \"items\" : [ { \"type\" : \"field\" , \"value\" : \"id\" , \"width\" : \"50%\" }, { \"type\" : \"field\" , \"value\" : \"name\" , \"width\" : \"50%\" } ] } ] } ] } ] } ] } } Structure summary \u00b6 PROPERTY DESCRIPTION name The name property is mandatory and relates to the unique name assigned to the view. description A description property allows to give a short hint about the way the view is intended to be used. header This section allows to override action buttons that are displayed in the header of the form. actions (optional) A list of actions associated to a view. If set, visible actions (see below) will be shown in the right-part of the header. layout \u00b6 The layout part holds a nested structure that describes the way the (form) view has to be rendered (which fields, using which widgets) and how to place its elements, by grouping fields within rows and columns. layout.groups \u00b6 The groups are stacked vertically. A layout must always have at least 1 group. PROPERTY DESCRIPTION label name of the group. sections Array of sections objects. A group must always have at least 1 section. group.sections \u00b6 A group must always have at least 1 section. When several sections are present, each section is displayed under a tabs. PROPERTY DESCRIPTION label (optional) Label (en) of the section. The label of a section is only displayed when there are several sections. id (optional) identifier for mapping the section in translation files visible (optional) a domain conditioning the visibility of the section and its tab (ex. [\"status\", \"not in\", [\"quote\", \"option\"]] ) rows Array of rows objects. A section must always have at least 1 row. section.rows \u00b6 PROPERTY DESCRIPTION columns An array of columns objects that should be displayed within the row. row.columns \u00b6 PROPERTY DESCRIPTION width Width of the column, as percentage of the width of the parent row (ex.: \"25%\"). items An array of items that should be displayer within the column. column.items \u00b6 Each column has a list of items, which are element describing which fields are to be rendered, how to render them (room within the column, widget override, ...), and under what conditions they must be displayed. Each item is an object accepting the following properties : PROPERTY DESCRIPTION label (optional) Default label type value value of the field width width, in percentage of the parent column width. visible (optional) either a boolean (true, false) or a domain (ex. [\"is_complete\", \"=\", true] ) domain (optional) (ex. [\"type\", \"<>\", \"I\"] ) widget (optional) additional settings to apply on the widget that holds the fields item.widget \u00b6 Within item objects , the widget property allows to refine the configuration of the widget (i.e. how the widget has to be rendered within the view). PROPERTY DESCRIPTION heading (optional) If set to true, the widget is emphasized. readonly (optional) If set to true, the value cannot be modified by the user (marked as disabled in edit mode). If the readonly property is set to true in the schema, it cannot be overridden by the view. usage (optional) A widget can be applied on an item, to force apply a specific data rendering. If an usage is defined at the schema level, it is overridden. Additional properties apply only to specific field types. Here is the full list of the available options by type of field: FIELD TYPE PROPERTY many2many , one2many header (optional) The widget can override the configuration that will be relayed to the subsequent View for M2M and O2M fields. For details about header structure see views commons . header.actions (optional) works the same way as View actions property. For details about header structure see views commons . view (optional) ID of the view to use for subobjects. For forms, default is \"form.default\", and for lists, default is \"list.default\" (ex.: \"form.create\"). domain Apply an additional domain to the view's collection. In case the view has a domain of its own, both domains are merged. many2one order Name of the field which the collection must be sorted on. sort Direction for sorting 'asc' (ascending order) or 'desc' (descending order). limit Override the maximum items that the list must display. domain Apply an additional domain to the view's collection. In case the view has a domain of its own, both domains are merged. About widget property For one2many and many2many field, it is also possible to force using a specific widget (non-default). Example: \"widget\" : { \"header\" : { \"actions\" : { \"ACTION.SELECT\" : true , \"ACTION.CREATE\" : false } } } Note When an usage property is set in the schema of the entity, the widget is adapted accordingly. For example, when a field has its type set as float and its usage set to amount/percent , in view mode, it is displayed as an integer value between 0 an 100, and followed by a '%' sign (e.g.: \"0.12\" is converted to \"'12%''). Real life example \u00b6 A real example of a form view is shown below, which is the Category form of a package having multiple sections (tabs) each having a label(Categories, Product Models and Booking Types) and an id( section.categories_id , section.product_models , section.booking_types ) to be able to be translated in using the \"i18n\". The field called name has a widget property with an attribute heading set to true which emphasizes it by displaying it a little bigger. The view's name is Category.form.default.json and is as follows: { \"name\" : \"Category\" , \"description\" : \"Categories are not related to Families and allow a different way of grouping Products.\" , \"layout\" : { \"groups\" : [ { \"sections\" : [ { \"label\" : \"Categories\" , \"id\" : \"section.categories_id\" , \"rows\" : [ { \"columns\" : [ { \"width\" : \"50%\" , \"items\" : [ { \"type\" : \"field\" , \"value\" : \"name\" , \"width\" : \"100%\" , \"widget\" : { \"heading\" : true } }, { \"type\" : \"field\" , \"value\" : \"description\" , \"width\" : \"100%\" } ] } ] } ] }, { \"label\" : \"Product Models\" , \"id\" : \"section.product_models\" , \"rows\" : [ { \"columns\" : [ { \"width\" : \"100%\" , \"items\" : [ { \"type\" : \"field\" , \"value\" : \"product_models_ids\" , \"width\" : \"100%\" } ] } ] } ] }, { \"label\" : \"Booking Types\" , \"id\" : \"section.booking_types\" , \"rows\" : [ { \"columns\" : [ { \"width\" : \"100%\" , \"items\" : [ { \"type\" : \"field\" , \"value\" : \"booking_types_ids\" , \"width\" : \"100%\" } ] } ] } ] } ] } ] } } List views \u00b6 List views are used to display collections of items. It contains the same properties mentioned in the Form View section, such as name , description , layout and a few additional ones. Some of the additional properties that are specific for the list views are filters , pager for displaying in navigation bar, selection_actions which allows the modification of an object in the list or exporting and printing it. sortable property could also be added to the list view, which enables the action of sorting the list when it has the value \"true\" since it's of type Boolean. By clicking on one row in the list, it redirects you to the editable form related to the view. Minimal example \u00b6 The name of file is displayed like so: packages/core/views/User.list.default.json A list view is defined according to the following structure: { \"name\" : \"\" , \"description\" : \"\" , \"domain\" : [], \"filters\" : [ { \"id\" : \"lang.french\" , \"label\" : \"fran\u00e7ais\" , \"description\" : \"Users with locale set to french\" , \"clause\" : [ \"language\" , \"=\" , \"fr\" ] } ], \"layout\" : { \"filter\" : \"bool\" , \"pager\" : \"bool\" , \"selection_actions\" : [ { \"label\" : \"export\" , \"action\" : \"products_export\" } ], \"items\" : [ { \"type\" : \"field\" , \"value\" : \"id\" , \"width\" : \"10%\" , \"sortable\" : true , \"readonly\" : true }, { \"type\" : \"field\" , \"value\" : \"created\" , \"width\" : \"25%\" , \"sortable\" : true }, { \"type\" : \"field\" , \"value\" : \"validated\" , \"width\" : \"10%\" }, { \"type\" : \"field\" , \"value\" : \"login\" , \"widget\" : { \"link\" : true }, \"width\" : \"30%\" , \"sortable\" : true }, { \"type\" : \"field\" , \"value\" : \"language\" , \"width\" : \"10%\" , \"widget\" : { \"type\" : \"select\" , \"values\" : [ \"fr\" , \"en\" , \"nl\" ] } }, { \"type\" : \"field\" , \"value\" : \"groups_ids\" , \"label\" : \"Groups\" , \"width\" : \"0%\" , \"visible\" : false , \"widget\" : { \"type\" : \"one2many\" } } ] } } The list view of the Category form mentioned in the above section contains the name of the list which is Categories, a description and the main fields to be displayed for quick use like the \"name\" and the \"description\" of the categories. The list view is named Category.list.default.json and has the following structure: { \"name\" : \"Categories\" , \"description\" : \"This view is intended for displaying the list of categories.\" , \"layout\" : { \"items\" : [ { \"type\" : \"field\" , \"value\" : \"name\" , \"width\" : \"15%\" }, { \"type\" : \"field\" , \"value\" : \"description\" , \"width\" : \"25%\" } ] } } Structure summary \u00b6 PROPERTY DESCRIPTION name The name property is mandatory and relates to the unique name assigned to the view. description A description property allows to give a short hint about the view's context or the way it is intended to be used. group_by (optional) order (optional) controller (optional) sort (optional) limit (optional) domain (optional) filters (optional) header (optional) The header section allows to override the default behavior of the view. actions (optional) exports (optional) layout The layout part holds a structure that describes the way the (list) view has to be rendered (which fields, using which widgets) and how to order its elements, group them or apply operations on them. operations (optional) access (optional) group_by \u00b6 A group_by array can be set to describe the way the objects have to be grouped. Each item in the array is either a field name or the descriptor of an operation to perform on a specific field. Example : \"group_by\" : [ \"date\" ] The operations items have the following structure : { \"field\" : \"product_id\" , \"operation\" : [ \"SUM\" , \"object.qty\" ] } Another example : \"group_by\" : [ \"date\" , { \"field\" : \"product_id\" , \"operation\" : [ \"SUM\" , \"object.qty\" ]}] order \u00b6 String holding the name(s) of the field to sort results on, separated with commas. Example : \"order\" : \"sku,product_model_id\" sort \u00b6 String litteral (' desc ' or ' asc ') Example: \"sort\" : \"asc\" limit \u00b6 integer (max size of result set) Example : \"limit\" : 100 Bear in mind that the default controller (core_mode_collect), has a max constraint of 500 for this parameter. domain \u00b6 The domain property allows to conditionally display the data (More Info: domain ). Example: <?php \"domain\" : \"[\" type \", \" <> \", \" I \"]\" filters \u00b6 The filter property allows to provide a series of predefined search filters. \"filters\" : [ { \"id\" : \"lang.french\" , \"label\" : \"French\" , \"description\" : \"French speaking people\" , \"clause\" : [ \"language\" , \"=\" , \"fr\" ] } ] ``` header \u00b6 In addition to the attributes common to all views (see views commons ), the header property for lists uses an additional features for the actions attribute. selection \u00b6 PROPERTY DESCRIPTION default (optional) Boolean telling if the default actions have to be present in the available action to apply on current selection. (default = false) actions (optional) An array of action items that can be applied on current selection. Example : \"header\" : { \"actions\" : { \"ACTION.CREATE\" : false }, \"selection\" : { \"default\" : false , \"actions\" : [ { \"id\" : \"header.selection.actions.mark_ignored\" , \"label\" : \"Mark as ignored\" , \"icon\" : \"\" , \"controller\" : \"lodging_sale_booking_bankstatementline_bulk-ignore\" } ] } } actions \u00b6 The action property is common to all views. For details about its structure see views commons . exports \u00b6 Printing a document such as a contract can be done in the list view. Multiple fields will have to be added such as the id of the contract, the label , the icon of the printer also known as \"print\" is added. Also, a small description , a controller having the value \"model_export-print\" used to trigger the printing action, the view which corresponds to the specific view \"print.default\" and finally visible field should be displayed as well. All these fields are added inside of the exports section of list view, which is an array of objects that has the below structure: \"exports\" : [ { \"id\" : \"export.print.contract\" , \"label\" : \"Print contract\" , \"icon\" : \"print\" , \"description\" : \"Print contract related to the booking.\" , \"controller\" : \"lodging_booking_print-contract\" , \"view\" : \"print.default\" , \"visible\" : [ \"status\" , \"=\" , \"quote\" ] } ] The view property points to an HTML file that will be parsed and filled with selected object values before being converted to PDF. layout \u00b6 The layout part holds a structure that describes the way the (list) view has to be rendered (which fields, using which widgets) and how to order its elements, group them or apply operations on them. layout.items \u00b6 The list view consists of a table having a series of columns (items). Each column relates to a field, and is described by an item that specifies how the field is to be rendered, the behaviors attached to it (ordering, sorting, ...), and under what conditions it must be displayed. Each item is an object accepting the following properties : PROPERTY DESCRIPTION label (optional) Default label type always 'field' value the name of the field width column width, in percentage of the list width. visible (optional) either a boolean (true, false) or a domain (ex. [\"is_complete\", \"=\", true] ) sortable (optional) boolean to mark the column related to the field as sortable. item.widget \u00b6 Within item objects , the widget property allows to refine the configuration of the widget (i.e. how the widget has to be rendered within the view). PROPERTY DESCRIPTION readonly (optional) If set to true, the value cannot be modified by the user (marked as disabled in edit mode). If the readonly property is set to true in the schema, it cannot be overridden by the view. usage (optional) A widget can be applied on an item, to force apply a specific data rendering. If an usage is defined at the schema level, it is overridden. operations \u00b6 This property allows to apply a series of operations on one or more columns, for the displayed records set. Each entry of the opearations object associates a name (ID of an operation - which will allow to group the results), with an associative array mapping field names with operation descriptors. In turn, each descriptor accepts the following properties : PROPERTY DESCRIPTION operation The operation to apply on the related field (see operation syntax below). usage The usage of the operation as hint for displaying the result. (see) Example : amount/money:2 , numeric/integer suffix (optional) string to append to the result. prefix (optional) string to prepend to the result. Examples: \"operations\" : { \"total\" : { \"total_paid\" : { \"id\" : \"operations.total.total_paid\" , \"label\" : \"Total received\" , \"operation\" : \"SUM\" , \"usage\" : \"amount/money:2\" }, \"total_due\" : { \"operation\" : \"SUM\" , \"usage\" : \"amount/money:2\" } } } \"operations\" : { \"total\" : { \"rental_unit_id\" : { \"operation\" : \"COUNT\" , \"usage\" : \"numeric/integer\" , \"suffix\" : \"p.\" } } } Operation Syntax \u00b6 Unary operators : [ OPERATOR, {FIELD | OPERATION} ] OR Binary operators : [ OPERATOR, {FIELD | OPERATION}, {FIELD | OPERATION} ] Binary operators \u00b6 OPERATOR RESULT SYNTAX + Sum of a and b . ['+', a, b] - Difference between a and b . ['-', a, b] * Product of a by b . ['*', a, b] / Division of a by b . ['/', a, b] % Modulo b of a . ['%', a, b] ^ a at power b . ['^', a, b] Unary operators \u00b6 OPERATOR SYNTAX SUM ['SUM', object.field] AVG ['AVG', object.field] (which is a shortcut for ['/', ['SUM', object.field], ['COUNT', object.field]] ) COUNT ['COUNT', object.field] MIN ['MIN', object.field] MAX ['MAX', object.field] access \u00b6 Groups and users with the permission to see the content of the view. Example : \"access\" : { \"groups\" : [ \"booking.default.user\" ] } , Menu Views \u00b6 Menus allow to define custom tree structures of action-buttons for accessing specific routes or contexts. Menu items have the following structure : PROPERTY DESCRIPTION id Identifier of the item (used for translations). label Title of the item to display within the menu. description (optional) Short string explaining the purpose of the item (the view it leads to). icon (optional) icon to show aside the item. type (mandatory) either 'entry' or 'parent'. In case an item is a 'parent', it also have a 'children' property. Parent items have a children property, which is an array holding a list of items (which, in turn, can be either parents or entries). Entries items have a context property, which has the following structure : PROPERTY DESCRIPTION entity Entity to which relates the view to show. view ID of the view to use for showing the targeted entities. order (optional) sort (optional) domain (optional) Domain to apply to specified view. Example: \"id\" : \"item.pos_sessions\" , \"label\" : \"Sessions\" , \"description\" : \"\" , \"icon\" : \"menu_book\" , \"type\" : \"parent\" , \"children\" : [ { \"id\" : \"item.pos_sessions.pending\" , \"type\" : \"entry\" , \"label\" : \"Pending sessions\" , \"description\" : \"\" , \"context\" : { \"entity\" : \"lodging\\\\sale\\\\pos\\\\CashdeskSession\" , \"view\" : \"list.default\" , \"order\" : \"created\" , \"sort\" : \"desc\" , \"domain\" : [ [ \"status\" , \"=\" , \"pending\" ], [ \"center_id\" , \"in\" , \"user.centers_ids\" ] ] } } ] As other views, a menu has a name property and a layout property, that describes how the items are going to be displayed. In the example shown below, one parent menu item is present named \"New Booking\" and it contains two children, \"New Booking\" to create a new booking and \"All Bookings\" that displays the list of all the bookings ordered by id and sorted in descending order. { \"name\" : \"Booking menu\" , \"layout\" : { \"items\" : [ { \"id\" : \"item.bookings\" , \"label\" : \"Bookings\" , \"description\" : \"\" , \"icon\" : \"menu_book\" , \"type\" : \"parent\" , \"children\" : [ { \"id\" : \"item.new_booking\" , \"type\" : \"entry\" , \"label\" : \"New booking\" , \"description\" : \"\" , \"icon\" : \"add\" , \"context\" : { \"entity\" : \"lodging\\\\sale\\\\booking\\\\Booking\" , \"view\" : \"form.default\" , \"purpose\" : \"create\" } }, { \"id\" : \"item.all_booking\" , \"type\" : \"entry\" , \"label\" : \"All bookings\" , \"description\" : \"\" , \"context\" : { \"entity\" : \"lodging\\\\sale\\\\booking\\\\Booking\" , \"view\" : \"list.default\" , \"order\" : \"id\" , \"sort\" : \"desc\" } } ] } ] } } Dashboard Views \u00b6 Dashboard views are control panels, opening the possibility to show multiple views on the same page. The following example displays 4 different views to simplify the management of informations. PROPERTY DESCRIPTION id Identifier of the item (used for translations). label Title of the item to display within the menu. description (optional) Short string explaining the purpose of the item (the view it leads to). width Width of the field. type (mandatory) either 'entry' or 'parent'. In case an item is a 'parent', it also have a 'children' property. entity Entity to which relates the view to show. view ID of the view to use for showing the targeted entities. domain (optional) Domain to apply to specified view. { \"name\" : \"Main dashboard\" , \"description\" : \"\" , \"layout\" : { \"groups\" : [ { \"label\" : \"test\" , \"height\" : \"100%\" , \"sections\" : [ { \"rows\" : [ { \"height\" : \"50%\" , \"columns\" : [ { \"width\" : \"100%\" , \"items\" : [ { \"id\" : \"item.bookings\" , \"label\" : \"Alertes\" , \"description\" : \"\" , \"width\" : \"50%\" , \"entity\" : \"core\\\\alert\\\\Message\" , \"view\" : \"list.dashboard\" , \"domain\" : [ \"object_class\" , \"=\" , \"lodging\\\\sale\\\\booking\\\\Booking\" ] }, { \"id\" : \"item.bookings2\" , \"label\" : \"Mes R\u00e9servations\" , \"description\" : \"\" , \"width\" : \"50%\" , \"entity\" : \"lodging\\\\sale\\\\booking\\\\Booking\" , * // Following section \"view\" : \"list.dashboard\" , \"domain\" : [ \"creator\" , \"=\" , \"user.id\" ] ** } ] } ] }, { \"height\" : \"50%\" , \"columns\" : [ { \"width\" : \"100%\" , \"items\" : [ { \"id\" : \"item.bookings3\" , \"label\" : \"CA Pr\u00e9visionnel des r\u00e9servations\" , \"description\" : \"\" , \"width\" : \"50%\" , \"entity\" : \"lodging\\\\sale\\\\booking\\\\Booking\" , \"view\" : \"chart.default\" }, { \"id\" : \"item.bookings4\" , \"label\" : \"Nombre de checkin\" , \"description\" : \"\" , \"width\" : \"50%\" , \"entity\" : \"lodging\\\\sale\\\\booking\\\\Booking\" , \"view\" : \"chart.checkin\" } ] } ] } ] } ] } ] } } list.dashboard \u00b6 This example demonstrates the possibility to name views the way we want. Here we use a new list view , that could, for example, have a different domain** ( \"domain\": [\"creator\", \"=\", \"user.id\"] ) than the Booking.list.default.json view. { \"name\" : \"Booking list\" , \"description\" : \"This view displays the list of bookings: the most recent on top.\" , \"access\" : { \"groups\" : [ \"booking.default.user\" ] }, \"order\" : \"created\" , \"sort\" : \"desc\" , \"domain\" : [ \"center_office_id\" , \"in\" , \"user.center_offices_ids\" ], \"layout\" : { \"items\" : [ { } ] } } Charts \u00b6 Charts enable us to visually compare multiple sets of data. It can be very helpful to display statistics. Below is an example of a chart view, the proprerties are very similar to the ones we can find in menus (check the section above this one). The properties \u00b6 The access property is allowing the people that belong to the group to see this chart. The layout describes how the items are going to be displayed. The range_interval property allows us to choose which period of time will delimit the data that we want to see, the possibilities are : \"day, week, semester, year\". The range_to & range_from properties allow us to choose, when the range starts and when it stops (linked with the range_interval property). Possibilities : date.[this|prev|next].[day|week|month|quarter|semester|year].[first|last]. The dataset property is about the data that will be shown in the graph, we have the label property that will allow us to the name the element displayed. The operation property that will use the operations talked about in the above sections, will allow us to display a certain type of data. At last, the domain property allows us to filter the data even more. { \"name\" : \"Booking total\" , \"description\" : \"This view displays the amount of bookings in the DB\" , \"access\" : { \"groups\" : [ \"booking.default.user\" ] }, \"layout\" : { \"entity\" : \"lodging\\\\sale\\\\booking\\\\Booking\" , \"group_by\" : \"range\" , \"range_interval\" : \"year\" , \"range_from\" : \"date.this.year.first\" , \"range_to\" : \"date.this.year.last\" , \"datasets\" : [ { \"label\" : \"Nombre de r\u00e9servations\" , \"operation\" : [ \"COUNT\" , \"object.id\" ], \"domain\" : [ \"id\" , \">\" , 5 ] } { \"name\" : \"Main dashboard\" , \"layout\" : { \"groups\" : [ { \"label\" : \"\" , \"height\" : \"100%\" , \"sections\" : [ { \"rows\" : [ { \"height\" : \"50%\" , \"columns\" : [ { \"width\" : \"50%\" , \"items\" : [ { \"id\" : \"item.bookings\" , \"label\" : \"Bookings\" , \"description\" : \"\" , \"width\" : \"50%\" , \"entity\" : \"\" , \"view\" : \"\" } ] } ] } ] } ] } ] } }","title":"Views"},{"location":"usage/views/#views","text":"Views are intended to describe how to present the objects to end-users under a given context. They are used as templates for the front-end, and are stored as JSON files within the views folder of their respective package. Each of them represents a mode of visualization: form, list, chart, dashboard, etc; and can be edited independently from the models they relate to. It is possible to define as many views (of different types, or variations of same type) as necessary. Each view is referenced by an ID, which is composed of its type and its name. As a convention, a default view for list and form types should be defined for each entity. The generic filename format is: {class_name}.{view_type}.{view_name}.json class_name : the class name of the entity the view relates to (e.g. default form view for core\\User is stored as packages/core/views/User.form.default.json ) view_type : Possible values are :' list ', ' form ',' chart ',' dashboard ' view_name : As a convention, classes should always have a 'default' view for types 'list' and 'view'. Here is a recap for the core\\User entity : FILENAME ENTITY VIEW TYPE VIEW NAME VIEW ID core\\views\\User.list.default.json core\\User list default list.default core\\views\\User.form.default.json core\\User form default form.default","title":"Views"},{"location":"usage/views/#front-end-logic","text":"A View relates to an entity and has a type and a name. The view itself requests the corresponding data from the server (template or translation) when loading the layout at which a domain can be specified. Within a view, a layout defines the way in which the widgets are linked to the model. The view is synchronized with the model during modifications. Keep in mind that if the view's class extends another class, which will be called the parent, then it should also contain all the fields from this parent class except the computed ones and the ones that are already present in this child class. A Model is a collection of objects of a given entity. This class keeps the full schema of the entity with the default values that are then updated by this model after it requests the corresponding data from the server. A Layout is the layout associated with a given view. It is always linked to a Model. A Widget is responsible for displaying the value of an object's field (in 'view' or 'edit' mode). It synchronizes its value with the Model to which it is associated via the Layout and the View that is using it.","title":"Front-end logic"},{"location":"usage/views/#views-commons","text":"Some attributes are common to all types of views. Below is a list of the common attributes and their role.","title":"Views commons"},{"location":"usage/views/#structure-summary","text":"PROPERTY DESCRIPTION name The name property is mandatory and relates to the unique name assigned to the view. description A description property allows to give a short hint about the view's context or the way it is intended to be used. access (optional) actions (optional) controller (optional) When set, the controller property allows to customize the controller that is used for populating the view (by default: 'model_collect' for lists, 'model_read' for forms). header (optional) In the header property, one can customize the standard buttons of the header and the actions attached to these.","title":"Structure summary"},{"location":"usage/views/#access","text":"groups: array (list of groups the view is restricted to) Example : \"access\": ['root']","title":"access"},{"location":"usage/views/#actions","text":"The optional actions property contains a list of objects defining a custom list of possible actions attached to the view. Each action item relates to a button, displayed in the right side of the header, which, when clicked, relays a request to a given controller. Upon successful completion of the action, the view is automatically refreshed. PROPERTY DESCRIPTION id Identifier of the action for translation purpose (can be set in the i18n related file). description The description that is displayed to the user when (s)he clicks on the related button. label Label assigned to the view. controller Controller to invoke when the user confirms the action. By default, the id of the current object is sent as a parameter. visible (optional) Domain (array) of conditions to meet in order to make the action button visible. Example: \"visible\": [\"status\", \"=\", \"quote\"] confirm (optional) If set to true, a confirmation dialog is displayed before relaying the request to the controller. params (optional) Associative array mapping fields with their values. Values can be assigned by referencing a property of the current user (e.g. user.login ) or current object (for form views). Example: \"actions\" : [ { \"id\" : \"action.option\" , \"label\" : \"Set as Option\" , \"description\" : \"Rental units will be blocked but no funding will be claimed yet.\" , \"controller\" : \"lodging_booking_option\" , \"visible\" : [ \"status\" , \"=\" , \"quote\" ], \"confirm\" : true , \"params\" : { \"id\" : \"object.id\" } }, { \"id\" : \"action.validate\" , \"label\" : \"Confirm Booking\" , \"description\" : \"Rental units will be blocked and the invoicing plan will be set up.\" , \"controller\" : \"lodging_booking_confirm\" , \"visible\" : [ \"status\" , \"in\" , [ \"quote\" , \"option\" ]] }, { \"id\" : \"action.checkin\" , \"label\" : \"Check In\" , \"description\" : \"The host has arrived: the rental units will be marked as occupied.\" , \"controller\" : \"lodging_booking_checkin\" , \"visible\" : [ \"status\" , \"=\" , \"validated\" ] }, { \"id\" : \"action.checkout\" , \"label\" : \"Check Out\" , \"description\" : \"The host is leaving: the rental units will be marked for cleaning.\" , \"controller\" : \"lodging_booking_checkout\" , \"visible\" : [ \"status\" , \"=\" , \"checkedin\" ] }, { \"id\" : \"action.invoice\" , \"label\" : \"Invoice\" , \"description\" : \"The host has left and room has been reviewed: emit the invoice.\" , \"controller\" : \"lodging_booking_invoice\" , \"visible\" : [ \"status\" , \"=\" , \"checkedout\" ] } ] If target controller requires one or more parameter, the view will generate a dialog asking the user for the values to be assigned to each parameter. If no parameter is required but the confirm property is set to true , then a confirmation dialog is displayed before performing the action. Here below is a flow diagram that recaps the interactions between the controller and the confirm property.","title":"actions "},{"location":"usage/views/#controller","text":"The optional controller property specifies the controller that must be requested for fetching the Model collection that will feed the View (either a single object or a collection of objects). The default values is model_collect (which is an alias for core_model_collect ) Note Controller are considered as entities. When a controller is specified for a list View, a special view is expected ( search.default ) for describing the layout of the form for inputing parameters values (i.e. fields returned by the ::announce method of the view controller). In turn, those values are sent to the controller along with default values ( entity , fields , domain , order , sort , start , limit , lang ) for feeding the View. Example: for controller sale_booking_collect , a packages/sale/views/booking/collect.search.default.json file is expected.","title":"controller "},{"location":"usage/views/#header","text":"The header section allows to override the default behavior of the view.","title":"header "},{"location":"usage/views/#structure-summary_1","text":"PROPERTY DESCRIPTION actions This property allows to customize the actions buttons shown in the left part of the View header. visible (optional) boolean or array (domain)","title":"Structure summary"},{"location":"usage/views/#actions_1","text":"The actions property can be used for 3 purposes: to force action buttons visibility; to define the order of the actions for buttons having multiple actions (\"split buttons\"); and to override the configuration of the subsequent Views (for relational fields). For forms , default actions are : ACTION.EDIT , ACTION.SAVE , ACTION.CREATE , ACTION.CANCEL For lists , default actions are : ACTION.SELECT , ACTION.CREATE Each action item is either a boolean or an array of items describing the order of the buttons and parameters for subsequent views. Action descriptor Actions descriptors used in the header has the same structure than View actions. Therefore, it is possible to force the view to use a specific controller when a standard button is clicked. Empty arrays or items set to false mean that the action is not available for the View. If action is an array with multiple items, the related button will be displayed as a split-button (note: in that case, the order of the items is maintained). ACTION DESCRIPTION ID(S) ACTION.EDIT For forms in view mode, allows to edit the current object. ACTION.SAVE For forms in edit mode, ACTION.SAVE is the action used for storing the changes made to the current object. SAVE_AND_CLOSE , SAVE_AND_VIEW , SAVE_AND_CONTINUE ACTION.CREATE For all views, ACTION.CREATE is the action used for creating a new current object. CREATE , ADD ACTION.CANCEL For forms in edit mode, allows to cancel the changes made to the current object. CANCEL_AND_CLOSE , CANCEL_AND_VIEW ACTION.SELECT For relational fields, allows to select or add one or many objects and relay selection to parent View. Predefined actions : ACTION DESCRIPTION CONTROLLER SAVE_AND_CLOSE The view is saved and close. The user is brought to the previous context. SAVE_AND_CONTINUE The view is saved and left open allowing the user to perform further changes. A snackbar is given as feedback to the user. SAVE_AND_VIEW The view is saved and closed. The user is brought to the 'view' version (SAVE action can only occur in 'edit' mode). In most cases, the 'view' version is the parent. If not, a new (similar) context is opened in 'view' mode. SAVE_AND_EDIT The view is saved and closed. The user is brought to a cloned context (still in 'edit' mode). CREATE model_create ADD model_update Usage example : \"header\" : { \"actions\" : { \"ACTION.CREATE\" : [ { \"view\" : \"form.create\" , \"description\" : \"Overload form to use for objects creation.\" , \"domain\" : [ \"parent_status\" , \"=\" , \"object.status\" ], \"visible\" : [ \"admin\" , \"in\" , \"user.groups\" ], \"controller\" : \"custompackage_mode_update\" } ], \"ACTION.SELECT\" : false , \"ACTION.SAVE\" : [ { \"id\" : \"SAVE_AND_CONTINUE\" }, { \"id\" : \"SAVE_AND_CLOSE\" } ], \"ACTION.CANCEL\" : [ { \"id\" : CANCEL_AND_VIEW\" }] } }","title":"actions"},{"location":"usage/views/#view-inheritance","text":"Classes may be used in different packages (extending parent classes with the possibility of adding new fields) and therefore, they also may have different view files. Here is an example of an extended class. <?php namespace lodging\\sale\\booking ; class Contact extends \\sale\\booking\\Contact { public static function getName () { return \"Contact\" ; } public static function getDescription () { return \"Booking contacts are persons involved in the organisation of a booking.\" ; } public static function getColumns () { return [ 'owner_identity_id' => [ 'type' => 'many2one' , 'foreign_object' => 'lodging\\identity\\Identity' , 'description' => 'The organisation which the targeted identity is a partner of.' , 'default' => 1 ], 'partner_identity_id' => [ 'type' => 'many2one' , 'foreign_object' => 'lodging\\identity\\Identity' , 'description' => 'The targeted identity (the partner).' , 'onupdate' => 'identity\\Partner::onupdatePartnerIdentityId' , 'required' => true ], 'booking_id' => [ 'type' => 'many2one' , 'foreign_object' => 'lodging\\sale\\booking\\Booking' , 'description' => 'Booking the contact relates to.' , 'required' => true ], 'owner_identity_id' => [ 'type' => 'many2one' , 'foreign_object' => 'lodging\\identity\\Identity' , 'description' => 'The organisation which the targeted identity is a partner of.' , 'default' => 1 ] ]; } } To decide which view will be used, eQual uses a system of class inheritance , where the child view ( class extending the parent ) replaces the parent ( class being extended ) view file. To understand how it works, here is the code : <?php list ( $params , $providers ) = announce ([ 'description' => \"Returns the JSON view related to an entity (class model), given a view ID (<type.name>).\" , 'params' => [ 'entity' => [ 'description' => 'Full name (including namespace) of the class to return (e.g. \\'core\\\\User\\').' , 'type' => 'string' , 'required' => true ], 'view_id' => [ 'description' => 'The identifier of the view <type.name>.' , 'type' => 'string' , 'default' => 'list.default' ] ], 'response' => [ 'content-type' => 'application/json' , 'charset' => 'utf-8' , 'accept-origin' => '*' ], 'providers' => [ 'context' , 'orm' ] ]); list ( $context , $orm ) = [ $providers [ 'context' ], $providers [ 'orm' ]]; $entity = $params [ 'entity' ]; // retrieve existing view meant for entity (recurse through parents) while ( true ) { $parts = explode ( '\\\\' , $entity ); $package = array_shift ( $parts ); $file = array_pop ( $parts ); $class_path = implode ( '/' , $parts ); $file = QN_BASEDIR . \"/packages/ { $package } /views/ { $class_path } / { $file } . { $params [ 'view_id' ] } .json\" ; if ( file_exists ( $file )) { //(1) break ; } $parent = get_parent_class ( $orm -> getModel ( $entity )); //(2) if ( ! $parent || $parent == 'equal\\orm\\Model' ) { //(3) break ; } $entity = $parent ; } if ( ! file_exists ( $file )) { throw new Exception ( \"unknown_view_id\" , QN_ERROR_UNKNOWN_OBJECT ); } if ( ( $view = json_decode ( @ file_get_contents ( $file ), true )) === null ) { throw new Exception ( \"malformed_view_schema\" , QN_ERROR_INVALID_CONFIG ); } $context -> httpResponse () -> body ( $view ) -> send (); What it does : (1) If the file exists in the view folder of the package where we are, the loop stops and uses that view. (2) Otherwise, it loops through the parent classes one by one, and takes the first view file we encounter. (3) This scenario goes on until we reach the root-parent class \"equal\\orm\\Model\" .","title":"View Inheritance"},{"location":"usage/views/#form-views","text":"Forms allow to view and edit individual objects. It is possible to define as many views as desired, and a given entity should always have default form view ( {entity}.form.default.json ). Forms views are JSON objects that describe how to render a specific view related to a given entity.","title":"Form views"},{"location":"usage/views/#minimal-example","text":"Example.form.default.json { \"name\" : \"Example\" , \"description\" : \"Simple form for displaying a basic objects\" , \"actions\" : [], \"layout\" : { \"groups\" : [ { \"label\" : \"\" , \"sections\" : [ { \"rows\" : [ { \"columns\" : [ { \"width\" : \"50%\" , \"items\" : [ { \"type\" : \"field\" , \"value\" : \"id\" , \"width\" : \"50%\" }, { \"type\" : \"field\" , \"value\" : \"name\" , \"width\" : \"50%\" } ] } ] } ] } ] } ] } }","title":"Minimal example"},{"location":"usage/views/#structure-summary_2","text":"PROPERTY DESCRIPTION name The name property is mandatory and relates to the unique name assigned to the view. description A description property allows to give a short hint about the way the view is intended to be used. header This section allows to override action buttons that are displayed in the header of the form. actions (optional) A list of actions associated to a view. If set, visible actions (see below) will be shown in the right-part of the header.","title":"Structure summary"},{"location":"usage/views/#layout","text":"The layout part holds a nested structure that describes the way the (form) view has to be rendered (which fields, using which widgets) and how to place its elements, by grouping fields within rows and columns.","title":"layout"},{"location":"usage/views/#layoutgroups","text":"The groups are stacked vertically. A layout must always have at least 1 group. PROPERTY DESCRIPTION label name of the group. sections Array of sections objects. A group must always have at least 1 section.","title":"layout.groups"},{"location":"usage/views/#groupsections","text":"A group must always have at least 1 section. When several sections are present, each section is displayed under a tabs. PROPERTY DESCRIPTION label (optional) Label (en) of the section. The label of a section is only displayed when there are several sections. id (optional) identifier for mapping the section in translation files visible (optional) a domain conditioning the visibility of the section and its tab (ex. [\"status\", \"not in\", [\"quote\", \"option\"]] ) rows Array of rows objects. A section must always have at least 1 row.","title":"group.sections"},{"location":"usage/views/#sectionrows","text":"PROPERTY DESCRIPTION columns An array of columns objects that should be displayed within the row.","title":"section.rows"},{"location":"usage/views/#rowcolumns","text":"PROPERTY DESCRIPTION width Width of the column, as percentage of the width of the parent row (ex.: \"25%\"). items An array of items that should be displayer within the column.","title":"row.columns"},{"location":"usage/views/#columnitems","text":"Each column has a list of items, which are element describing which fields are to be rendered, how to render them (room within the column, widget override, ...), and under what conditions they must be displayed. Each item is an object accepting the following properties : PROPERTY DESCRIPTION label (optional) Default label type value value of the field width width, in percentage of the parent column width. visible (optional) either a boolean (true, false) or a domain (ex. [\"is_complete\", \"=\", true] ) domain (optional) (ex. [\"type\", \"<>\", \"I\"] ) widget (optional) additional settings to apply on the widget that holds the fields","title":"column.items"},{"location":"usage/views/#itemwidget","text":"Within item objects , the widget property allows to refine the configuration of the widget (i.e. how the widget has to be rendered within the view). PROPERTY DESCRIPTION heading (optional) If set to true, the widget is emphasized. readonly (optional) If set to true, the value cannot be modified by the user (marked as disabled in edit mode). If the readonly property is set to true in the schema, it cannot be overridden by the view. usage (optional) A widget can be applied on an item, to force apply a specific data rendering. If an usage is defined at the schema level, it is overridden. Additional properties apply only to specific field types. Here is the full list of the available options by type of field: FIELD TYPE PROPERTY many2many , one2many header (optional) The widget can override the configuration that will be relayed to the subsequent View for M2M and O2M fields. For details about header structure see views commons . header.actions (optional) works the same way as View actions property. For details about header structure see views commons . view (optional) ID of the view to use for subobjects. For forms, default is \"form.default\", and for lists, default is \"list.default\" (ex.: \"form.create\"). domain Apply an additional domain to the view's collection. In case the view has a domain of its own, both domains are merged. many2one order Name of the field which the collection must be sorted on. sort Direction for sorting 'asc' (ascending order) or 'desc' (descending order). limit Override the maximum items that the list must display. domain Apply an additional domain to the view's collection. In case the view has a domain of its own, both domains are merged. About widget property For one2many and many2many field, it is also possible to force using a specific widget (non-default). Example: \"widget\" : { \"header\" : { \"actions\" : { \"ACTION.SELECT\" : true , \"ACTION.CREATE\" : false } } } Note When an usage property is set in the schema of the entity, the widget is adapted accordingly. For example, when a field has its type set as float and its usage set to amount/percent , in view mode, it is displayed as an integer value between 0 an 100, and followed by a '%' sign (e.g.: \"0.12\" is converted to \"'12%'').","title":"item.widget"},{"location":"usage/views/#real-life-example","text":"A real example of a form view is shown below, which is the Category form of a package having multiple sections (tabs) each having a label(Categories, Product Models and Booking Types) and an id( section.categories_id , section.product_models , section.booking_types ) to be able to be translated in using the \"i18n\". The field called name has a widget property with an attribute heading set to true which emphasizes it by displaying it a little bigger. The view's name is Category.form.default.json and is as follows: { \"name\" : \"Category\" , \"description\" : \"Categories are not related to Families and allow a different way of grouping Products.\" , \"layout\" : { \"groups\" : [ { \"sections\" : [ { \"label\" : \"Categories\" , \"id\" : \"section.categories_id\" , \"rows\" : [ { \"columns\" : [ { \"width\" : \"50%\" , \"items\" : [ { \"type\" : \"field\" , \"value\" : \"name\" , \"width\" : \"100%\" , \"widget\" : { \"heading\" : true } }, { \"type\" : \"field\" , \"value\" : \"description\" , \"width\" : \"100%\" } ] } ] } ] }, { \"label\" : \"Product Models\" , \"id\" : \"section.product_models\" , \"rows\" : [ { \"columns\" : [ { \"width\" : \"100%\" , \"items\" : [ { \"type\" : \"field\" , \"value\" : \"product_models_ids\" , \"width\" : \"100%\" } ] } ] } ] }, { \"label\" : \"Booking Types\" , \"id\" : \"section.booking_types\" , \"rows\" : [ { \"columns\" : [ { \"width\" : \"100%\" , \"items\" : [ { \"type\" : \"field\" , \"value\" : \"booking_types_ids\" , \"width\" : \"100%\" } ] } ] } ] } ] } ] } }","title":"Real life example"},{"location":"usage/views/#list-views","text":"List views are used to display collections of items. It contains the same properties mentioned in the Form View section, such as name , description , layout and a few additional ones. Some of the additional properties that are specific for the list views are filters , pager for displaying in navigation bar, selection_actions which allows the modification of an object in the list or exporting and printing it. sortable property could also be added to the list view, which enables the action of sorting the list when it has the value \"true\" since it's of type Boolean. By clicking on one row in the list, it redirects you to the editable form related to the view.","title":"List views"},{"location":"usage/views/#minimal-example_1","text":"The name of file is displayed like so: packages/core/views/User.list.default.json A list view is defined according to the following structure: { \"name\" : \"\" , \"description\" : \"\" , \"domain\" : [], \"filters\" : [ { \"id\" : \"lang.french\" , \"label\" : \"fran\u00e7ais\" , \"description\" : \"Users with locale set to french\" , \"clause\" : [ \"language\" , \"=\" , \"fr\" ] } ], \"layout\" : { \"filter\" : \"bool\" , \"pager\" : \"bool\" , \"selection_actions\" : [ { \"label\" : \"export\" , \"action\" : \"products_export\" } ], \"items\" : [ { \"type\" : \"field\" , \"value\" : \"id\" , \"width\" : \"10%\" , \"sortable\" : true , \"readonly\" : true }, { \"type\" : \"field\" , \"value\" : \"created\" , \"width\" : \"25%\" , \"sortable\" : true }, { \"type\" : \"field\" , \"value\" : \"validated\" , \"width\" : \"10%\" }, { \"type\" : \"field\" , \"value\" : \"login\" , \"widget\" : { \"link\" : true }, \"width\" : \"30%\" , \"sortable\" : true }, { \"type\" : \"field\" , \"value\" : \"language\" , \"width\" : \"10%\" , \"widget\" : { \"type\" : \"select\" , \"values\" : [ \"fr\" , \"en\" , \"nl\" ] } }, { \"type\" : \"field\" , \"value\" : \"groups_ids\" , \"label\" : \"Groups\" , \"width\" : \"0%\" , \"visible\" : false , \"widget\" : { \"type\" : \"one2many\" } } ] } } The list view of the Category form mentioned in the above section contains the name of the list which is Categories, a description and the main fields to be displayed for quick use like the \"name\" and the \"description\" of the categories. The list view is named Category.list.default.json and has the following structure: { \"name\" : \"Categories\" , \"description\" : \"This view is intended for displaying the list of categories.\" , \"layout\" : { \"items\" : [ { \"type\" : \"field\" , \"value\" : \"name\" , \"width\" : \"15%\" }, { \"type\" : \"field\" , \"value\" : \"description\" , \"width\" : \"25%\" } ] } }","title":"Minimal example"},{"location":"usage/views/#structure-summary_3","text":"PROPERTY DESCRIPTION name The name property is mandatory and relates to the unique name assigned to the view. description A description property allows to give a short hint about the view's context or the way it is intended to be used. group_by (optional) order (optional) controller (optional) sort (optional) limit (optional) domain (optional) filters (optional) header (optional) The header section allows to override the default behavior of the view. actions (optional) exports (optional) layout The layout part holds a structure that describes the way the (list) view has to be rendered (which fields, using which widgets) and how to order its elements, group them or apply operations on them. operations (optional) access (optional)","title":"Structure summary"},{"location":"usage/views/#group_by","text":"A group_by array can be set to describe the way the objects have to be grouped. Each item in the array is either a field name or the descriptor of an operation to perform on a specific field. Example : \"group_by\" : [ \"date\" ] The operations items have the following structure : { \"field\" : \"product_id\" , \"operation\" : [ \"SUM\" , \"object.qty\" ] } Another example : \"group_by\" : [ \"date\" , { \"field\" : \"product_id\" , \"operation\" : [ \"SUM\" , \"object.qty\" ]}]","title":"group_by"},{"location":"usage/views/#order","text":"String holding the name(s) of the field to sort results on, separated with commas. Example : \"order\" : \"sku,product_model_id\"","title":"order"},{"location":"usage/views/#sort","text":"String litteral (' desc ' or ' asc ') Example: \"sort\" : \"asc\"","title":"sort"},{"location":"usage/views/#limit","text":"integer (max size of result set) Example : \"limit\" : 100 Bear in mind that the default controller (core_mode_collect), has a max constraint of 500 for this parameter.","title":"limit"},{"location":"usage/views/#domain","text":"The domain property allows to conditionally display the data (More Info: domain ). Example: <?php \"domain\" : \"[\" type \", \" <> \", \" I \"]\"","title":"domain"},{"location":"usage/views/#filters","text":"The filter property allows to provide a series of predefined search filters. \"filters\" : [ { \"id\" : \"lang.french\" , \"label\" : \"French\" , \"description\" : \"French speaking people\" , \"clause\" : [ \"language\" , \"=\" , \"fr\" ] } ] ```","title":"filters"},{"location":"usage/views/#header_1","text":"In addition to the attributes common to all views (see views commons ), the header property for lists uses an additional features for the actions attribute.","title":"header"},{"location":"usage/views/#selection","text":"PROPERTY DESCRIPTION default (optional) Boolean telling if the default actions have to be present in the available action to apply on current selection. (default = false) actions (optional) An array of action items that can be applied on current selection. Example : \"header\" : { \"actions\" : { \"ACTION.CREATE\" : false }, \"selection\" : { \"default\" : false , \"actions\" : [ { \"id\" : \"header.selection.actions.mark_ignored\" , \"label\" : \"Mark as ignored\" , \"icon\" : \"\" , \"controller\" : \"lodging_sale_booking_bankstatementline_bulk-ignore\" } ] } }","title":"selection"},{"location":"usage/views/#actions_2","text":"The action property is common to all views. For details about its structure see views commons .","title":"actions"},{"location":"usage/views/#exports","text":"Printing a document such as a contract can be done in the list view. Multiple fields will have to be added such as the id of the contract, the label , the icon of the printer also known as \"print\" is added. Also, a small description , a controller having the value \"model_export-print\" used to trigger the printing action, the view which corresponds to the specific view \"print.default\" and finally visible field should be displayed as well. All these fields are added inside of the exports section of list view, which is an array of objects that has the below structure: \"exports\" : [ { \"id\" : \"export.print.contract\" , \"label\" : \"Print contract\" , \"icon\" : \"print\" , \"description\" : \"Print contract related to the booking.\" , \"controller\" : \"lodging_booking_print-contract\" , \"view\" : \"print.default\" , \"visible\" : [ \"status\" , \"=\" , \"quote\" ] } ] The view property points to an HTML file that will be parsed and filled with selected object values before being converted to PDF.","title":"exports"},{"location":"usage/views/#layout_1","text":"The layout part holds a structure that describes the way the (list) view has to be rendered (which fields, using which widgets) and how to order its elements, group them or apply operations on them.","title":"layout"},{"location":"usage/views/#layoutitems","text":"The list view consists of a table having a series of columns (items). Each column relates to a field, and is described by an item that specifies how the field is to be rendered, the behaviors attached to it (ordering, sorting, ...), and under what conditions it must be displayed. Each item is an object accepting the following properties : PROPERTY DESCRIPTION label (optional) Default label type always 'field' value the name of the field width column width, in percentage of the list width. visible (optional) either a boolean (true, false) or a domain (ex. [\"is_complete\", \"=\", true] ) sortable (optional) boolean to mark the column related to the field as sortable.","title":"layout.items"},{"location":"usage/views/#itemwidget_1","text":"Within item objects , the widget property allows to refine the configuration of the widget (i.e. how the widget has to be rendered within the view). PROPERTY DESCRIPTION readonly (optional) If set to true, the value cannot be modified by the user (marked as disabled in edit mode). If the readonly property is set to true in the schema, it cannot be overridden by the view. usage (optional) A widget can be applied on an item, to force apply a specific data rendering. If an usage is defined at the schema level, it is overridden.","title":"item.widget"},{"location":"usage/views/#operations","text":"This property allows to apply a series of operations on one or more columns, for the displayed records set. Each entry of the opearations object associates a name (ID of an operation - which will allow to group the results), with an associative array mapping field names with operation descriptors. In turn, each descriptor accepts the following properties : PROPERTY DESCRIPTION operation The operation to apply on the related field (see operation syntax below). usage The usage of the operation as hint for displaying the result. (see) Example : amount/money:2 , numeric/integer suffix (optional) string to append to the result. prefix (optional) string to prepend to the result. Examples: \"operations\" : { \"total\" : { \"total_paid\" : { \"id\" : \"operations.total.total_paid\" , \"label\" : \"Total received\" , \"operation\" : \"SUM\" , \"usage\" : \"amount/money:2\" }, \"total_due\" : { \"operation\" : \"SUM\" , \"usage\" : \"amount/money:2\" } } } \"operations\" : { \"total\" : { \"rental_unit_id\" : { \"operation\" : \"COUNT\" , \"usage\" : \"numeric/integer\" , \"suffix\" : \"p.\" } } }","title":"operations"},{"location":"usage/views/#operation-syntax","text":"Unary operators : [ OPERATOR, {FIELD | OPERATION} ] OR Binary operators : [ OPERATOR, {FIELD | OPERATION}, {FIELD | OPERATION} ]","title":"Operation Syntax"},{"location":"usage/views/#binary-operators","text":"OPERATOR RESULT SYNTAX + Sum of a and b . ['+', a, b] - Difference between a and b . ['-', a, b] * Product of a by b . ['*', a, b] / Division of a by b . ['/', a, b] % Modulo b of a . ['%', a, b] ^ a at power b . ['^', a, b]","title":"Binary operators"},{"location":"usage/views/#unary-operators","text":"OPERATOR SYNTAX SUM ['SUM', object.field] AVG ['AVG', object.field] (which is a shortcut for ['/', ['SUM', object.field], ['COUNT', object.field]] ) COUNT ['COUNT', object.field] MIN ['MIN', object.field] MAX ['MAX', object.field]","title":"Unary operators"},{"location":"usage/views/#access_1","text":"Groups and users with the permission to see the content of the view. Example : \"access\" : { \"groups\" : [ \"booking.default.user\" ] } ,","title":"access"},{"location":"usage/views/#menu-views","text":"Menus allow to define custom tree structures of action-buttons for accessing specific routes or contexts. Menu items have the following structure : PROPERTY DESCRIPTION id Identifier of the item (used for translations). label Title of the item to display within the menu. description (optional) Short string explaining the purpose of the item (the view it leads to). icon (optional) icon to show aside the item. type (mandatory) either 'entry' or 'parent'. In case an item is a 'parent', it also have a 'children' property. Parent items have a children property, which is an array holding a list of items (which, in turn, can be either parents or entries). Entries items have a context property, which has the following structure : PROPERTY DESCRIPTION entity Entity to which relates the view to show. view ID of the view to use for showing the targeted entities. order (optional) sort (optional) domain (optional) Domain to apply to specified view. Example: \"id\" : \"item.pos_sessions\" , \"label\" : \"Sessions\" , \"description\" : \"\" , \"icon\" : \"menu_book\" , \"type\" : \"parent\" , \"children\" : [ { \"id\" : \"item.pos_sessions.pending\" , \"type\" : \"entry\" , \"label\" : \"Pending sessions\" , \"description\" : \"\" , \"context\" : { \"entity\" : \"lodging\\\\sale\\\\pos\\\\CashdeskSession\" , \"view\" : \"list.default\" , \"order\" : \"created\" , \"sort\" : \"desc\" , \"domain\" : [ [ \"status\" , \"=\" , \"pending\" ], [ \"center_id\" , \"in\" , \"user.centers_ids\" ] ] } } ] As other views, a menu has a name property and a layout property, that describes how the items are going to be displayed. In the example shown below, one parent menu item is present named \"New Booking\" and it contains two children, \"New Booking\" to create a new booking and \"All Bookings\" that displays the list of all the bookings ordered by id and sorted in descending order. { \"name\" : \"Booking menu\" , \"layout\" : { \"items\" : [ { \"id\" : \"item.bookings\" , \"label\" : \"Bookings\" , \"description\" : \"\" , \"icon\" : \"menu_book\" , \"type\" : \"parent\" , \"children\" : [ { \"id\" : \"item.new_booking\" , \"type\" : \"entry\" , \"label\" : \"New booking\" , \"description\" : \"\" , \"icon\" : \"add\" , \"context\" : { \"entity\" : \"lodging\\\\sale\\\\booking\\\\Booking\" , \"view\" : \"form.default\" , \"purpose\" : \"create\" } }, { \"id\" : \"item.all_booking\" , \"type\" : \"entry\" , \"label\" : \"All bookings\" , \"description\" : \"\" , \"context\" : { \"entity\" : \"lodging\\\\sale\\\\booking\\\\Booking\" , \"view\" : \"list.default\" , \"order\" : \"id\" , \"sort\" : \"desc\" } } ] } ] } }","title":"Menu Views"},{"location":"usage/views/#dashboard-views","text":"Dashboard views are control panels, opening the possibility to show multiple views on the same page. The following example displays 4 different views to simplify the management of informations. PROPERTY DESCRIPTION id Identifier of the item (used for translations). label Title of the item to display within the menu. description (optional) Short string explaining the purpose of the item (the view it leads to). width Width of the field. type (mandatory) either 'entry' or 'parent'. In case an item is a 'parent', it also have a 'children' property. entity Entity to which relates the view to show. view ID of the view to use for showing the targeted entities. domain (optional) Domain to apply to specified view. { \"name\" : \"Main dashboard\" , \"description\" : \"\" , \"layout\" : { \"groups\" : [ { \"label\" : \"test\" , \"height\" : \"100%\" , \"sections\" : [ { \"rows\" : [ { \"height\" : \"50%\" , \"columns\" : [ { \"width\" : \"100%\" , \"items\" : [ { \"id\" : \"item.bookings\" , \"label\" : \"Alertes\" , \"description\" : \"\" , \"width\" : \"50%\" , \"entity\" : \"core\\\\alert\\\\Message\" , \"view\" : \"list.dashboard\" , \"domain\" : [ \"object_class\" , \"=\" , \"lodging\\\\sale\\\\booking\\\\Booking\" ] }, { \"id\" : \"item.bookings2\" , \"label\" : \"Mes R\u00e9servations\" , \"description\" : \"\" , \"width\" : \"50%\" , \"entity\" : \"lodging\\\\sale\\\\booking\\\\Booking\" , * // Following section \"view\" : \"list.dashboard\" , \"domain\" : [ \"creator\" , \"=\" , \"user.id\" ] ** } ] } ] }, { \"height\" : \"50%\" , \"columns\" : [ { \"width\" : \"100%\" , \"items\" : [ { \"id\" : \"item.bookings3\" , \"label\" : \"CA Pr\u00e9visionnel des r\u00e9servations\" , \"description\" : \"\" , \"width\" : \"50%\" , \"entity\" : \"lodging\\\\sale\\\\booking\\\\Booking\" , \"view\" : \"chart.default\" }, { \"id\" : \"item.bookings4\" , \"label\" : \"Nombre de checkin\" , \"description\" : \"\" , \"width\" : \"50%\" , \"entity\" : \"lodging\\\\sale\\\\booking\\\\Booking\" , \"view\" : \"chart.checkin\" } ] } ] } ] } ] } ] } }","title":"Dashboard Views"},{"location":"usage/views/#listdashboard","text":"This example demonstrates the possibility to name views the way we want. Here we use a new list view , that could, for example, have a different domain** ( \"domain\": [\"creator\", \"=\", \"user.id\"] ) than the Booking.list.default.json view. { \"name\" : \"Booking list\" , \"description\" : \"This view displays the list of bookings: the most recent on top.\" , \"access\" : { \"groups\" : [ \"booking.default.user\" ] }, \"order\" : \"created\" , \"sort\" : \"desc\" , \"domain\" : [ \"center_office_id\" , \"in\" , \"user.center_offices_ids\" ], \"layout\" : { \"items\" : [ { } ] } }","title":"list.dashboard"},{"location":"usage/views/#charts","text":"Charts enable us to visually compare multiple sets of data. It can be very helpful to display statistics. Below is an example of a chart view, the proprerties are very similar to the ones we can find in menus (check the section above this one).","title":"Charts"},{"location":"usage/views/#the-properties","text":"The access property is allowing the people that belong to the group to see this chart. The layout describes how the items are going to be displayed. The range_interval property allows us to choose which period of time will delimit the data that we want to see, the possibilities are : \"day, week, semester, year\". The range_to & range_from properties allow us to choose, when the range starts and when it stops (linked with the range_interval property). Possibilities : date.[this|prev|next].[day|week|month|quarter|semester|year].[first|last]. The dataset property is about the data that will be shown in the graph, we have the label property that will allow us to the name the element displayed. The operation property that will use the operations talked about in the above sections, will allow us to display a certain type of data. At last, the domain property allows us to filter the data even more. { \"name\" : \"Booking total\" , \"description\" : \"This view displays the amount of bookings in the DB\" , \"access\" : { \"groups\" : [ \"booking.default.user\" ] }, \"layout\" : { \"entity\" : \"lodging\\\\sale\\\\booking\\\\Booking\" , \"group_by\" : \"range\" , \"range_interval\" : \"year\" , \"range_from\" : \"date.this.year.first\" , \"range_to\" : \"date.this.year.last\" , \"datasets\" : [ { \"label\" : \"Nombre de r\u00e9servations\" , \"operation\" : [ \"COUNT\" , \"object.id\" ], \"domain\" : [ \"id\" , \">\" , 5 ] } { \"name\" : \"Main dashboard\" , \"layout\" : { \"groups\" : [ { \"label\" : \"\" , \"height\" : \"100%\" , \"sections\" : [ { \"rows\" : [ { \"height\" : \"50%\" , \"columns\" : [ { \"width\" : \"50%\" , \"items\" : [ { \"id\" : \"item.bookings\" , \"label\" : \"Bookings\" , \"description\" : \"\" , \"width\" : \"50%\" , \"entity\" : \"\" , \"view\" : \"\" } ] } ] } ] } ] } ] } }","title":"The properties"},{"location":"welcome/contribution-guide/","text":"Contributing \u00b6 New contributions to eQual are welcome, but we ask that you please follow these guidelines: Before opening a PR for additions or changes, please discuss those by filing an issue on GitHub or asking about it on Discord (#general channel). This will save you development time by getting feedback upfront and make review faster by giving the maintainers more context and details. Check that your package will pass the consistency tests ( $ ./equal.run --do=test_package-consistency ). Add unit tests (in the packages/{your_package}/tests/ ) and descriptions to the new classes and controllers . Avoid breaking changes unless there is an upcoming major release, which is infrequent. We encourage people to write distinct libraries and/or packages for most new advanced features, and care a lot about backwards compatibility. Joining the project \u00b6 Active committers and contributors are invited to introduce themselves and request commit access to the project on the Discord #join channel. If you think you can help, we'd love to have you! Bugs and Issues \u00b6 Please report these on our GitHub page . Please do not use issues for support requests: for help using eQual, please consider Stack Overflow. Well structured, detailed bug reports are hugely valuable for the project. Guidelines for reporting bugs: Check the issue search to see if it has already been reported. Isolate the problem to a simple test case. Please include a code snippet that demonstrates the bug. If filing a bug against master, you may reference the latest code using the URL of the repository of the branch (e.g. https://github.com/cedricfrancoys/equal/blob/master/eq.lib.php - changing the filename to point at the file you need as appropriate). Please provide any additional details associated with the bug, if it's generic or only happens with a certain configuration or data set.","title":"Contribution Guide"},{"location":"welcome/contribution-guide/#contributing","text":"New contributions to eQual are welcome, but we ask that you please follow these guidelines: Before opening a PR for additions or changes, please discuss those by filing an issue on GitHub or asking about it on Discord (#general channel). This will save you development time by getting feedback upfront and make review faster by giving the maintainers more context and details. Check that your package will pass the consistency tests ( $ ./equal.run --do=test_package-consistency ). Add unit tests (in the packages/{your_package}/tests/ ) and descriptions to the new classes and controllers . Avoid breaking changes unless there is an upcoming major release, which is infrequent. We encourage people to write distinct libraries and/or packages for most new advanced features, and care a lot about backwards compatibility.","title":"Contributing"},{"location":"welcome/contribution-guide/#joining-the-project","text":"Active committers and contributors are invited to introduce themselves and request commit access to the project on the Discord #join channel. If you think you can help, we'd love to have you!","title":"Joining the project"},{"location":"welcome/contribution-guide/#bugs-and-issues","text":"Please report these on our GitHub page . Please do not use issues for support requests: for help using eQual, please consider Stack Overflow. Well structured, detailed bug reports are hugely valuable for the project. Guidelines for reporting bugs: Check the issue search to see if it has already been reported. Isolate the problem to a simple test case. Please include a code snippet that demonstrates the bug. If filing a bug against master, you may reference the latest code using the URL of the repository of the branch (e.g. https://github.com/cedricfrancoys/equal/blob/master/eq.lib.php - changing the filename to point at the file you need as appropriate). Please provide any additional details associated with the bug, if it's generic or only happens with a certain configuration or data set.","title":"Bugs and Issues"},{"location":"welcome/release-notes/","text":"","title":"Release notes"}]}